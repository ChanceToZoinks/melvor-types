/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Data for constructing a Gamemode object
 */
declare type GamemodeData = GamemodeData1 & {
  /**
   * Display name of the Gamemode
   */
  name: string;
  /**
   * URI of Gamemode icon
   */
  media: string;
  /**
   * Optional. Description of the Gamemode displayed on the Character Select screen
   */
  description?: string;
  /**
   * List of rules that are specific to the Gamemode. Displayed on the Character Select screen
   */
  rules: string[];
  /**
   * CSS class used on the character select screen to specify the colour of the Gamemode's name
   */
  textClass: string;
  /**
   * CSS class used on the character select screen to specify the style of both Gamemode Selection and Created Characters
   */
  btnClass: string;
  /**
   * If true, dying in this Gamemode will delete the save file
   */
  isPermaDeath: boolean;
  /**
   * If true, a notice will be shown that this gamemode is Time limited on the character select screen
   */
  isEvent: boolean;
  /**
   * Optional. If present, respresents the Unix timestamp at which the Gamemode is available to play
   */
  startDate?: number;
  /**
   * Represents the Unix timestamp at which the Gamemode is no longer available to play. If set to 0, the Gamemode is always available.
   */
  endDate: number;
  /**
   * The combat triangle utilized in the Gamemode. 0 specifies the Standard Triangle. 1 specifies the Hardcore Triangle. 2 specifies the inverted Hardcore triangle.
   */
  combatTriangle: CombatTriangleType;
  /**
   * All hitpoint and damage values will be multiplied by this value. The Standard value is 10.
   */
  hitpointMultiplier: number;
  /**
   * Determines if the Player has passive hitpoint regeneration
   */
  hasRegen: boolean;
  /**
   * Determines if Non-Combat skills will be capped by the Player's combat level
   */
  capNonCombatSkillLevels: boolean;
  /**
   * ID of the page that the game should change to after the Tutorial has been completed
   */
  startingPage: PageID;
  /**
   * The items that the Player starts with upon completing the Tutorial
   */
  startingItems: AnyItemQuantity[];
  /**
   * If the Gamemode allows for skills to be unlocked for a GP cost
   */
  allowSkillUnlock: boolean;
  /**
   * Optional. Array of Skill IDs that the player should start with in the gamemode. If unset, the player starts with all skills.
   */
  startingSkills?: SkillID[];
  /**
   * Array of GP costs to unlock new skills in the gamemode. If the number of skills unlocked exceeds the length of this array, the last element will be utilized as the cost. Has no effect if allowSkillUnlock is false.
   */
  skillUnlockCost: number[];
  /**
   * Modifiers that will be applied to the Player at all times
   */
  playerModifiers: PlayerModifierData;
  /**
   * Modifiers that will be applied to all Enemies/Monsters
   */
  enemyModifiers: CombatModifierData;
  /**
   * Determines if the Player has access to the tutorial on creating a new save
   */
  hasTutorial: boolean;
  [k: string]: unknown;
};
declare type GamemodeData1 = IDData;
declare type CombatTriangleType = "Standard" | "Hardcore" | "InvertedHardcore";
declare type PageID =
  | "melvorD:ActiveSkill"
  | "melvorD:TutorialIsland"
  | "melvorD:Shop"
  | "melvorD:Bank"
  | "melvorD:Combat"
  | "melvorD:Woodcutting"
  | "melvorD:Fishing"
  | "melvorD:Firemaking"
  | "melvorD:Cooking"
  | "melvorD:Mining"
  | "melvorD:Smithing"
  | "melvorD:Thieving"
  | "melvorD:Farming"
  | "melvorD:Fletching"
  | "melvorD:Crafting"
  | "melvorD:Runecrafting"
  | "melvorD:Herblore"
  | "melvorD:Agility"
  | "melvorD:Summoning"
  | "melvorD:Astrology"
  | "melvorD:Township"
  | "melvorD:AltMagic"
  | "melvorD:GolbinRaid"
  | "melvorD:CompletionLog"
  | "melvorD:Lore"
  | "melvorD:Statistics"
  | "melvorD:Settings";
declare type AnyItemID =
  | ItemID
  | EquipmentItemID
  | FoodItemID
  | BoneItemID
  | PotionItemID
  | ReadableItemID
  | OpenableItemID
  | TokenItemID
  | CompostItemID;
declare type ItemID =
  | "melvorD:Normal_Logs"
  | "melvorD:Oak_Logs"
  | "melvorD:Willow_Logs"
  | "melvorD:Teak_Logs"
  | "melvorD:Maple_Logs"
  | "melvorD:Mahogany_Logs"
  | "melvorD:Yew_Logs"
  | "melvorD:Magic_Logs"
  | "melvorD:Redwood_Logs"
  | "melvorD:Raw_Shrimp"
  | "melvorD:Raw_Sardine"
  | "melvorD:Raw_Herring"
  | "melvorD:Raw_Trout"
  | "melvorD:Raw_Salmon"
  | "melvorD:Raw_Lobster"
  | "melvorD:Raw_Swordfish"
  | "melvorD:Raw_Crab"
  | "melvorD:Raw_Shark"
  | "melvorD:Raw_Cave_Fish"
  | "melvorD:Raw_Manta_Ray"
  | "melvorD:Raw_Whale"
  | "melvorD:Burnt_Shrimp"
  | "melvorD:Burnt_Sardine"
  | "melvorD:Burnt_Herring"
  | "melvorD:Burnt_Trout"
  | "melvorD:Burnt_Salmon"
  | "melvorD:Burnt_Lobster"
  | "melvorD:Burnt_Swordfish"
  | "melvorD:Burnt_Crab"
  | "melvorD:Burnt_Shark"
  | "melvorD:Burnt_Cave_Fish"
  | "melvorD:Burnt_Manta_Ray"
  | "melvorD:Burnt_Whale"
  | "melvorD:Copper_Ore"
  | "melvorD:Tin_Ore"
  | "melvorD:Iron_Ore"
  | "melvorD:Coal_Ore"
  | "melvorD:Silver_Ore"
  | "melvorD:Gold_Ore"
  | "melvorD:Mithril_Ore"
  | "melvorD:Adamantite_Ore"
  | "melvorD:Runite_Ore"
  | "melvorD:Dragonite_Ore"
  | "melvorD:Bronze_Bar"
  | "melvorD:Iron_Bar"
  | "melvorD:Steel_Bar"
  | "melvorD:Gold_Bar"
  | "melvorD:Mithril_Bar"
  | "melvorD:Adamantite_Bar"
  | "melvorD:Runite_Bar"
  | "melvorD:Dragonite_Bar"
  | "melvorD:Topaz"
  | "melvorD:Sapphire"
  | "melvorD:Ruby"
  | "melvorD:Emerald"
  | "melvorD:Diamond"
  | "melvorD:Silver_Bar"
  | "melvorD:Potato_Seed"
  | "melvorD:Onion_Seed"
  | "melvorD:Cabbage_Seed"
  | "melvorD:Tomato_Seed"
  | "melvorD:Sweetcorn_Seed"
  | "melvorD:Strawberry_Seed"
  | "melvorD:Watermelon_Seed"
  | "melvorD:Snape_Grass_Seed"
  | "melvorD:Oak_Tree_Seed"
  | "melvorD:Willow_Tree_Seed"
  | "melvorD:Maple_Tree_Seed"
  | "melvorD:Yew_Tree_Seed"
  | "melvorD:Magic_Tree_Seed"
  | "melvorD:Bronze_Arrowtips"
  | "melvorD:Iron_Arrowtips"
  | "melvorD:Steel_Arrowtips"
  | "melvorD:Mithril_Arrowtips"
  | "melvorD:Adamant_Arrowtips"
  | "melvorD:Rune_Arrowtips"
  | "melvorD:Dragon_Arrowtips"
  | "melvorD:Headless_Arrows"
  | "melvorD:Feathers"
  | "melvorD:Bowstring"
  | "melvorD:Leather"
  | "melvorD:Green_Dragonhide"
  | "melvorD:Blue_Dragonhide"
  | "melvorD:Red_Dragonhide"
  | "melvorD:Black_Dragonhide"
  | "melvorD:Rune_Essence"
  | "melvorD:Air_Rune"
  | "melvorD:Mind_Rune"
  | "melvorD:Water_Rune"
  | "melvorD:Earth_Rune"
  | "melvorD:Fire_Rune"
  | "melvorD:Body_Rune"
  | "melvorD:Chaos_Rune"
  | "melvorD:Death_Rune"
  | "melvorD:Blood_Rune"
  | "melvorD:Ancient_Rune"
  | "melvorD:Carrot_Seeds"
  | "melvorD:Garum_Herb"
  | "melvorD:Sourweed_Herb"
  | "melvorD:Mantalyme_Herb"
  | "melvorD:Lemontyle_Herb"
  | "melvorD:Oxilyme_Herb"
  | "melvorD:Garum_Seed"
  | "melvorD:Sourweed_Seed"
  | "melvorD:Mantalyme_Seed"
  | "melvorD:Lemontyle_Seed"
  | "melvorD:Oxilyme_Seed"
  | "melvorD:Signet_Ring_Half_A"
  | "melvorD:Signet_Ring_Half_B"
  | "melvorD:Old_Boot"
  | "melvorD:Old_Hat"
  | "melvorD:Seaweed"
  | "melvorD:Rusty_Key"
  | "melvorD:Shell"
  | "melvorD:Rope"
  | "melvorD:Glass_Bottle"
  | "melvorD:Rubber_Ducky"
  | "melvorD:Raw_Blowfish"
  | "melvorD:Raw_Poison_Fish"
  | "melvorD:Leaping_Trout"
  | "melvorD:Leaping_Salmon"
  | "melvorD:Leaping_Broad_Fish"
  | "melvorD:Raw_Anglerfish"
  | "melvorD:Raw_Fanfish"
  | "melvorD:Raw_Seahorse"
  | "melvorD:Raw_Carp"
  | "melvorD:Burnt_Anglerfish"
  | "melvorD:Burnt_Fanfish"
  | "melvorD:Burnt_Seahorse"
  | "melvorD:Burnt_Carp"
  | "melvorD:Lemon"
  | "melvorD:Lemons"
  | "melvorD:Headless_Bolts"
  | "melvorD:Bronze_Crossbow_Head"
  | "melvorD:Iron_Crossbow_Head"
  | "melvorD:Steel_Crossbow_Head"
  | "melvorD:Mithril_Crossbow_Head"
  | "melvorD:Adamant_Crossbow_Head"
  | "melvorD:Rune_Crossbow_Head"
  | "melvorD:Dragon_Crossbow_Head"
  | "melvorD:Bronze_Javelin_Heads"
  | "melvorD:Iron_Javelin_Heads"
  | "melvorD:Steel_Javelin_Heads"
  | "melvorD:Mithril_Javelin_Heads"
  | "melvorD:Adamant_Javelin_Heads"
  | "melvorD:Rune_Javelin_Heads"
  | "melvorD:Dragon_Javelin_Heads"
  | "melvorD:Eight"
  | "melvorD:Light_Rune"
  | "melvorD:Mist_Rune"
  | "melvorD:Dust_Rune"
  | "melvorD:Smoke_Rune"
  | "melvorD:Circlet_of_Rhaelyx"
  | "melvorD:Jewel_of_Rhaelyx"
  | "melvorD:Charge_Stone_of_Rhaelyx"
  | "melvorD:Mysterious_Stone"
  | "melvorD:Event_Clue_1"
  | "melvorD:Event_Clue_2"
  | "melvorD:Event_Clue_3"
  | "melvorD:Event_Clue_4"
  | "melvorD:Cake_Base"
  | "melvorD:Candle"
  | "melvorD:Magical_Icing"
  | "melvorD:Magical_Flavouring"
  | "melvorD:Birthday_Token"
  | "melvorD:Christmas_Cracker"
  | "melvorD:Easter_Egg"
  | "melvorD:Red_Herring"
  | "melvorD:Bag_of_Flour"
  | "melvorD:Raw_Beef"
  | "melvorD:Raw_Chicken"
  | "melvorD:Cherry_Seeds"
  | "melvorD:Cheese"
  | "melvorD:Cream"
  | "melvorD:Natures_Call_Staff_Top"
  | "melvorD:Event_Token"
  | "melvorD:Christmas_Scarf"
  | "melvorD:Locked_Chest_Key"
  | "melvorD:Event_Token_Christmas2021"
  | "melvorF:Arrow_Shafts"
  | "melvorF:Normal_Shortbow_U"
  | "melvorF:Oak_Shortbow_U"
  | "melvorF:Willow_Shortbow_U"
  | "melvorF:Maple_Shortbow_U"
  | "melvorF:Yew_Shortbow_U"
  | "melvorF:Magic_Shortbow_U"
  | "melvorF:Normal_Longbow_U"
  | "melvorF:Oak_Longbow_U"
  | "melvorF:Willow_Longbow_U"
  | "melvorF:Maple_Longbow_U"
  | "melvorF:Yew_Longbow_U"
  | "melvorF:Magic_Longbow_U"
  | "melvorF:Redwood_Shortbow_U"
  | "melvorF:Redwood_Longbow_U"
  | "melvorF:Bobbys_Pocket"
  | "melvorF:Eyeball"
  | "melvorF:Dragon_Claw_Fragment"
  | "melvorF:Ancient_Claw_Fragment"
  | "melvorF:Poraxx_Herb"
  | "melvorF:Pigtayle_Herb"
  | "melvorF:Barrentoe_Herb"
  | "melvorF:Poraxx_Seed"
  | "melvorF:Pigtayle_Seed"
  | "melvorF:Barrentoe_Seed"
  | "melvorF:Large_Horn"
  | "melvorF:Elder_Dragonhide"
  | "melvorF:Air_Shard"
  | "melvorF:Water_Shard"
  | "melvorF:Earth_Shard"
  | "melvorF:Fire_Shard"
  | "melvorF:Slayer_Crossbow_Head"
  | "melvorF:Nature_Rune"
  | "melvorF:Havoc_Rune"
  | "melvorF:Spirit_Rune"
  | "melvorF:Mud_Rune"
  | "melvorF:Steam_Rune"
  | "melvorF:Lava_Rune"
  | "melvorF:Tidal_Edge_Fragment"
  | "melvorF:Ocean_Song_Fragment"
  | "melvorF:Shockwave_Fragment"
  | "melvorF:Infernal_Core"
  | "melvorF:Slayer_Upgrade_Kit_Strong"
  | "melvorF:Slayer_Upgrade_Kit_Elite"
  | "melvorF:Slayer_Upgrade_Kit_Master"
  | "melvorF:Summoning_Shard_Red"
  | "melvorF:Summoning_Shard_Green"
  | "melvorF:Summoning_Shard_Blue"
  | "melvorF:Summoning_Shard_Silver"
  | "melvorF:Summoning_Shard_Gold"
  | "melvorF:Summoning_Shard_Black"
  | "melvorF:Abnormal_Log"
  | "melvorF:Marksmans_Sigil"
  | "melvorF:Basic_Bag"
  | "melvorF:Shipwheel"
  | "melvorF:Giant_Club"
  | "melvorF:Knights_Sigil"
  | "melvorF:Wizards_Sigil"
  | "melvorF:Antique_Vase"
  | "melvorF:Jadestone"
  | "melvorF:Apple_Tree_Seeds"
  | "melvorF:Goo"
  | "melvorF:Wildflower"
  | "melvorF:Natures_Call_Staff_Bottom"
  | "melvorF:Fine_Poison_Powder"
  | "melvorF:Poison_Scales"
  | "melvorF:Miolite_Spore"
  | "melvorF:Poison_Essence"
  | "melvorF:Worm_Spike"
  | "melvorF:Burning_Essence"
  | "melvorF:Cursed_Hands"
  | "melvorF:Stinging_Essence"
  | "melvorF:Tough_Shell"
  | "melvorF:Undead_Essence"
  | "melvorF:Desecrated_Bones"
  | "melvorF:Stardust"
  | "melvorF:Golden_Stardust"
  | "melvorF:Small_Urn"
  | "melvorF:Medium_Urn"
  | "melvorTotH:Spruce_Logs"
  | "melvorTotH:Hornbeam_Logs"
  | "melvorTotH:Grove_Logs"
  | "melvorTotH:Linden_Logs"
  | "melvorTotH:Elderwood_Logs"
  | "melvorTotH:Red_Oak_Logs"
  | "melvorTotH:Revenant_Logs"
  | "melvorTotH:Mystic_Logs"
  | "melvorTotH:Carrion_Logs"
  | "melvorTotH:Corundumite_Ore"
  | "melvorTotH:Pure_Essence"
  | "melvorTotH:Iridium_Ore"
  | "melvorTotH:Palladium_Ore"
  | "melvorTotH:Augite_Ore"
  | "melvorTotH:Onyx"
  | "melvorTotH:Meteorite_Ore"
  | "melvorTotH:Divinite_Ore"
  | "melvorTotH:Oricha"
  | "melvorTotH:Cerulean"
  | "melvorTotH:Zephyte"
  | "melvorTotH:Corundumite_Bar"
  | "melvorTotH:Iridium_Bar"
  | "melvorTotH:Palladium_Bar"
  | "melvorTotH:Augite_Bar"
  | "melvorTotH:Meteorite_Bar"
  | "melvorTotH:Divinite_Bar"
  | "melvorTotH:Corundum_Arrowtips"
  | "melvorTotH:Corundum_Javelin_Heads"
  | "melvorTotH:Corundum_Crossbow_Head"
  | "melvorTotH:Augite_Arrowtips"
  | "melvorTotH:Augite_Javelin_Heads"
  | "melvorTotH:Augite_Crossbow_Head"
  | "melvorTotH:Meteorite_Javelin_Heads"
  | "melvorTotH:Meteorite_Crossbow_Head"
  | "melvorTotH:Divine_Arrowtips"
  | "melvorTotH:Divine_Javelin_Heads"
  | "melvorTotH:Divine_Crossbow_Head"
  | "melvorTotH:Woodcutting_Ring_Fragment"
  | "melvorTotH:Woodcutting_Amulet_Fragment"
  | "melvorTotH:Raw_Lava_Fish"
  | "melvorTotH:Raw_Spike_Fish"
  | "melvorTotH:Raw_Rockfish"
  | "melvorTotH:Raw_Blue_Crab"
  | "melvorTotH:Raw_Magma_Fish"
  | "melvorTotH:Raw_Large_Blowfish"
  | "melvorTotH:Raw_Static_Jellyfish"
  | "melvorTotH:Raw_Frost_Crab"
  | "melvorTotH:Raw_Magma_Eel"
  | "melvorTotH:Raw_Frozen_Manta_Ray"
  | "melvorTotH:Raw_Ghost_Fish"
  | "melvorTotH:Raw_Mystic_Seahorse"
  | "melvorTotH:Raw_Terrorfish"
  | "melvorTotH:Raw_Mystic_Shark"
  | "melvorTotH:Pumpkin_Seeds"
  | "melvorTotH:Chilli_Seeds"
  | "melvorTotH:Mushroom_Spores"
  | "melvorTotH:Starfruit_Seeds"
  | "melvorTotH:Snowcress_Seeds"
  | "melvorTotH:Snowcress_Herb"
  | "melvorTotH:Bitterlyme_Seeds"
  | "melvorTotH:Bitterlyme_Herb"
  | "melvorTotH:Moonwort_Seeds"
  | "melvorTotH:Moonwort_Herb"
  | "melvorTotH:Wurmtayle_Seeds"
  | "melvorTotH:Wurmtayle_Herb"
  | "melvorTotH:Banana_Tree_Seeds"
  | "melvorTotH:Grove_Tree_Seeds"
  | "melvorTotH:Elderwood_Tree_Seeds"
  | "melvorTotH:Carrion_Tree_Seeds"
  | "melvorTotH:Elderwood_Shortbow_U"
  | "melvorTotH:Elderwood_Longbow_U"
  | "melvorTotH:Revenant_Shortbow_U"
  | "melvorTotH:Revenant_Longbow_U"
  | "melvorTotH:Carrion_Shortbow_U"
  | "melvorTotH:Carrion_Longbow_U"
  | "melvorTotH:Large_Urn"
  | "melvorTotH:Carrion_Bark"
  | "melvorTotH:Poison_Rune"
  | "melvorTotH:Decay_Rune"
  | "melvorTotH:Infernal_Rune"
  | "melvorTotH:Despair_Rune"
  | "melvorTotH:Soul_Rune"
  | "melvorTotH:Lightning_Rune"
  | "melvorTotH:Archaic_Rune"
  | "melvorTotH:Calamity_Rune"
  | "melvorTotH:Runestone"
  | "melvorTotH:Perfect_Sight_Legs_Material"
  | "melvorTotH:Bundled_Protection_Body_Material"
  | "melvorTotH:Jungle_Spores"
  | "melvorTotH:Weakness_Exploiter_Cape_Material"
  | "melvorTotH:Thorned_Power_Core"
  | "melvorTotH:Burning_Protection_Material"
  | "melvorTotH:Ward_of_Flame_Material"
  | "melvorTotH:Frost_Walker_Boots_Material"
  | "melvorTotH:Freezing_Touch_Material"
  | "melvorTotH:Spectral_Ice_Sword_Shard"
  | "melvorTotH:Leviathan_Shield_Material"
  | "melvorTotH:Torrential_Blast_Crossbow_Shard"
  | "melvorTotH:Spider_Queen_Eggs"
  | "melvorTotH:Ectoplasm"
  | "melvorTotH:Feather_Storm_Crossbow_Shard"
  | "melvorTotH:Agile_Wings_Rapier_Shard"
  | "melvorTotH:Slicing_Maelstrom_Wand_Shard"
  | "melvorTotH:Slayer_Upgrade_Kit_Legendary"
  | "melvorTotH:Slayer_Upgrade_Kit_Mythical"
  | "melvorTotH:Labyrinth_Clue_1"
  | "melvorTotH:Labyrinth_Clue_2"
  | "melvorTotH:Labyrinth_Clue_3"
  | "melvorTotH:Labyrinth_Clue_4"
  | "melvorTotH:Labyrinth_Clue_5"
  | "melvorTotH:Charcoal"
  | "melvorTotH:Decaying_Stem"
  | "melvorTotH:Meteorite_Dust"
  | "melvorTotH:Lemonade_Empty"
  | "melvorTotH:Lemonade_Very_empty"
  | "melvorTotH:Lemonade_Still_very_empty"
  | "melvorTotH:Lemonade_Not_as_empty_as_before"
  | "melvorTotH:Lemonade_Not_much"
  | "melvorTotH:Lemonade_Has_a_bit_now"
  | "melvorTotH:Lemonade_A_little_bit_more_now"
  | "melvorTotH:Lemonade_Half_full"
  | "melvorTotH:Lemonade_Just_over_half_full"
  | "melvorTotH:Lemonade_Maybe_this_is_half_full"
  | "melvorTotH:Lemonade_Nope_this_is_half_full_now"
  | "melvorTotH:Lemonade_Wow_this_is_slow"
  | "melvorTotH:Lemonade_Just_fill_it_up_already"
  | "melvorTotH:Lemonade_Still_not_full"
  | "melvorTotH:Lemonade_Again_still_not_full"
  | "melvorTotH:Lemonade_Less_than_before_because_you_drank_some"
  | "melvorTotH:Lemonade_Back_to_where_we_were_before"
  | "melvorTotH:Lemonade_Almost_full"
  | "melvorTotH:Lemonade_Still_almost_full"
  | "melvorTotH:Lemonade_How_full_is_it_supposed_to_be"
  | "melvorTotH:Lemonade_Wait_this_might_be_half_full_now"
  | "melvorTotH:Lemonade_Haha_just_joking_hurry_up"
  | "melvorTotH:Lemonade_Okay_this_looks_pretty_full_now"
  | "melvorTotH:Lemonade_Now"
  | "melvorTotH:Lemonade_What_about_now"
  | "melvorTotH:Lemonade_YAY_ITS_FINALLY_FULL"
  | "melvorTotH:Lemonade_Oh_still_not_full"
  | "melvorTotH:Lemonade_Wait_for_it"
  | "melvorTotH:Lemonade_Wait_for_it2"
  | "melvorTotH:Golden_Key";
declare type EquipmentItemID =
  | WeaponItemID
  | (
      | "melvorD:Empty_Equipment"
      | "melvorD:Bronze_Helmet"
      | "melvorD:Bronze_Boots"
      | "melvorD:Bronze_Platelegs"
      | "melvorD:Bronze_Platebody"
      | "melvorD:Iron_Helmet"
      | "melvorD:Iron_Boots"
      | "melvorD:Iron_Platelegs"
      | "melvorD:Iron_Platebody"
      | "melvorD:Steel_Helmet"
      | "melvorD:Steel_Boots"
      | "melvorD:Steel_Platelegs"
      | "melvorD:Steel_Platebody"
      | "melvorD:Mithril_Helmet"
      | "melvorD:Mithril_Boots"
      | "melvorD:Mithril_Platelegs"
      | "melvorD:Mithril_Platebody"
      | "melvorD:Adamant_Helmet"
      | "melvorD:Adamant_Boots"
      | "melvorD:Adamant_Platelegs"
      | "melvorD:Adamant_Platebody"
      | "melvorD:Rune_Helmet"
      | "melvorD:Rune_Boots"
      | "melvorD:Rune_Platelegs"
      | "melvorD:Rune_Platebody"
      | "melvorD:Dragon_Helmet"
      | "melvorD:Dragon_Boots"
      | "melvorD:Dragon_Platelegs"
      | "melvorD:Dragon_Platebody"
      | "melvorD:Bronze_Shield"
      | "melvorD:Iron_Shield"
      | "melvorD:Steel_Shield"
      | "melvorD:Mithril_Shield"
      | "melvorD:Adamant_Shield"
      | "melvorD:Rune_Shield"
      | "melvorD:Dragon_Shield"
      | "melvorD:Black_Helmet"
      | "melvorD:Black_Boots"
      | "melvorD:Black_Platelegs"
      | "melvorD:Black_Platebody"
      | "melvorD:Black_Shield"
      | "melvorD:Bronze_Helmet_T_S"
      | "melvorD:Bronze_Boots_T_S"
      | "melvorD:Bronze_Platelegs_T_S"
      | "melvorD:Bronze_Platebody_T_S"
      | "melvorD:Bronze_Shield_T_S"
      | "melvorD:Iron_Helmet_T_S"
      | "melvorD:Iron_Boots_T_S"
      | "melvorD:Iron_Platelegs_T_S"
      | "melvorD:Iron_Platebody_T_S"
      | "melvorD:Iron_Shield_T_S"
      | "melvorD:Steel_Helmet_T_S"
      | "melvorD:Steel_Boots_T_S"
      | "melvorD:Steel_Platelegs_T_S"
      | "melvorD:Steel_Platebody_T_S"
      | "melvorD:Steel_Shield_T_S"
      | "melvorD:Black_Helmet_T_S"
      | "melvorD:Black_Boots_T_S"
      | "melvorD:Black_Platelegs_T_S"
      | "melvorD:Black_Platebody_T_S"
      | "melvorD:Black_Shield_T_S"
      | "melvorD:Mithril_Helmet_T_S"
      | "melvorD:Mithril_Boots_T_S"
      | "melvorD:Mithril_Platelegs_T_S"
      | "melvorD:Mithril_Platebody_T_S"
      | "melvorD:Mithril_Shield_T_S"
      | "melvorD:Adamant_Helmet_T_S"
      | "melvorD:Adamant_Boots_T_S"
      | "melvorD:Adamant_Platelegs_T_S"
      | "melvorD:Adamant_Platebody_T_S"
      | "melvorD:Adamant_Shield_T_S"
      | "melvorD:Rune_Helmet_T_S"
      | "melvorD:Rune_Boots_T_S"
      | "melvorD:Rune_Platelegs_T_S"
      | "melvorD:Rune_Platebody_T_S"
      | "melvorD:Rune_Shield_T_S"
      | "melvorD:Dragon_Helmet_T_S"
      | "melvorD:Dragon_Boots_T_S"
      | "melvorD:Dragon_Platelegs_T_S"
      | "melvorD:Dragon_Platebody_T_S"
      | "melvorD:Dragon_Shield_T_S"
      | "melvorD:Bronze_Helmet_T_G"
      | "melvorD:Bronze_Boots_T_G"
      | "melvorD:Bronze_Platelegs_T_G"
      | "melvorD:Bronze_Platebody_T_G"
      | "melvorD:Bronze_Shield_T_G"
      | "melvorD:Iron_Helmet_T_G"
      | "melvorD:Iron_Boots_T_G"
      | "melvorD:Iron_Platelegs_T_G"
      | "melvorD:Iron_Platebody_T_G"
      | "melvorD:Iron_Shield_T_G"
      | "melvorD:Steel_Helmet_T_G"
      | "melvorD:Steel_Boots_T_G"
      | "melvorD:Steel_Platelegs_T_G"
      | "melvorD:Steel_Platebody_T_G"
      | "melvorD:Steel_Shield_T_G"
      | "melvorD:Black_Helmet_T_G"
      | "melvorD:Black_Boots_T_G"
      | "melvorD:Black_Platelegs_T_G"
      | "melvorD:Black_Platebody_T_G"
      | "melvorD:Black_Shield_T_G"
      | "melvorD:Mithril_Helmet_T_G"
      | "melvorD:Mithril_Boots_T_G"
      | "melvorD:Mithril_Platelegs_T_G"
      | "melvorD:Mithril_Platebody_T_G"
      | "melvorD:Mithril_Shield_T_G"
      | "melvorD:Adamant_Helmet_T_G"
      | "melvorD:Adamant_Boots_T_G"
      | "melvorD:Adamant_Platelegs_T_G"
      | "melvorD:Adamant_Platebody_T_G"
      | "melvorD:Adamant_Shield_T_G"
      | "melvorD:Rune_Helmet_T_G"
      | "melvorD:Rune_Boots_T_G"
      | "melvorD:Rune_Platelegs_T_G"
      | "melvorD:Rune_Platebody_T_G"
      | "melvorD:Rune_Shield_T_G"
      | "melvorD:Dragon_Helmet_T_G"
      | "melvorD:Dragon_Boots_T_G"
      | "melvorD:Dragon_Platelegs_T_G"
      | "melvorD:Dragon_Platebody_T_G"
      | "melvorD:Dragon_Shield_T_G"
      | "melvorD:Amulet_of_Fishing"
      | "melvorD:Amulet_of_Strength"
      | "melvorD:Amulet_of_Accuracy"
      | "melvorD:Amulet_of_Defence"
      | "melvorD:Amulet_of_Glory"
      | "melvorD:Bronze_Arrows"
      | "melvorD:Iron_Arrows"
      | "melvorD:Steel_Arrows"
      | "melvorD:Mithril_Arrows"
      | "melvorD:Adamant_Arrows"
      | "melvorD:Rune_Arrows"
      | "melvorD:Dragon_Arrows"
      | "melvorD:Leather_Boots"
      | "melvorD:Leather_Cowl"
      | "melvorD:Leather_Vambraces"
      | "melvorD:Leather_Chaps"
      | "melvorD:Green_Dhide_Vambraces"
      | "melvorD:Green_Dhide_Chaps"
      | "melvorD:Green_Dhide_Body"
      | "melvorD:Blue_Dhide_Vambraces"
      | "melvorD:Blue_Dhide_Chaps"
      | "melvorD:Blue_Dhide_Body"
      | "melvorD:Red_Dhide_Vambraces"
      | "melvorD:Red_Dhide_Chaps"
      | "melvorD:Red_Dhide_Body"
      | "melvorD:Black_Dhide_Vambraces"
      | "melvorD:Black_Dhide_Chaps"
      | "melvorD:Black_Dhide_Body"
      | "melvorD:Gold_Topaz_Ring"
      | "melvorD:Cooking_Gloves"
      | "melvorD:Mining_Gloves"
      | "melvorD:Smithing_Gloves"
      | "melvorD:Gem_Gloves"
      | "melvorD:Cape_Of_Prat"
      | "melvorD:Obsidian_Cape"
      | "melvorD:Elite_Amulet_of_Strength"
      | "melvorD:Elite_Amulet_of_Accuracy"
      | "melvorD:Elite_Amulet_of_Defence"
      | "melvorD:Elite_Amulet_of_Glory"
      | "melvorD:Ancient_Helmet"
      | "melvorD:Ancient_Platelegs"
      | "melvorD:Ancient_Platebody"
      | "melvorD:Ancient_Shield"
      | "melvorD:Ancient_Helmet_T_S"
      | "melvorD:Ancient_Platelegs_T_S"
      | "melvorD:Ancient_Platebody_T_S"
      | "melvorD:Ancient_Shield_T_S"
      | "melvorD:Ancient_Helmet_T_G"
      | "melvorD:Ancient_Platelegs_T_G"
      | "melvorD:Ancient_Platebody_T_G"
      | "melvorD:Ancient_Shield_T_G"
      | "melvorD:Fire_Cape"
      | "melvorD:Rangers_Hat"
      | "melvorD:Ranger_Boots"
      | "melvorD:Amulet_of_Fury"
      | "melvorD:Amulet_of_Torture"
      | "melvorD:Amulet_of_Ranged"
      | "melvorD:Ice_Helmet"
      | "melvorD:Ice_Boots"
      | "melvorD:Ice_Platelegs"
      | "melvorD:Ice_Platebody"
      | "melvorD:Ice_Shield"
      | "melvorD:Ice_Arrows"
      | "melvorD:Amulet_of_Looting"
      | "melvorD:Green_Wizard_Hat"
      | "melvorD:Green_Wizard_Robes"
      | "melvorD:Green_Wizard_Bottoms"
      | "melvorD:Green_Wizard_Boots"
      | "melvorD:Blue_Wizard_Hat"
      | "melvorD:Blue_Wizard_Robes"
      | "melvorD:Blue_Wizard_Bottoms"
      | "melvorD:Blue_Wizard_Boots"
      | "melvorD:Red_Wizard_Hat"
      | "melvorD:Red_Wizard_Robes"
      | "melvorD:Red_Wizard_Bottoms"
      | "melvorD:Red_Wizard_Boots"
      | "melvorD:Black_Wizard_Hat"
      | "melvorD:Black_Wizard_Robes"
      | "melvorD:Black_Wizard_Bottoms"
      | "melvorD:Black_Wizard_Boots"
      | "melvorD:Ancient_Wizard_Hat"
      | "melvorD:Ancient_Wizard_Robes"
      | "melvorD:Ancient_Wizard_Bottoms"
      | "melvorD:Ancient_Wizard_Boots"
      | "melvorD:Attack_Skillcape"
      | "melvorD:Cooking_Skillcape"
      | "melvorD:Defence_Skillcape"
      | "melvorD:Farming_Skillcape"
      | "melvorD:Firemaking_Skillcape"
      | "melvorD:Fishing_Skillcape"
      | "melvorD:Hitpoints_Skillcape"
      | "melvorD:Mining_Skillcape"
      | "melvorD:Smithing_Skillcape"
      | "melvorD:Strength_Skillcape"
      | "melvorD:Woodcutting_Skillcape"
      | "melvorD:Bronze_Gloves"
      | "melvorD:Iron_Gloves"
      | "melvorD:Steel_Gloves"
      | "melvorD:Mithril_Gloves"
      | "melvorD:Adamant_Gloves"
      | "melvorD:Rune_Gloves"
      | "melvorD:Dragon_Gloves"
      | "melvorD:Amulet_of_Calculated_Promotion"
      | "melvorD:Aorpheats_Signet_Ring"
      | "melvorD:Pirates_Lost_Ring"
      | "melvorD:Barbarian_Gloves"
      | "melvorD:Ancient_Ring_Of_Skills"
      | "melvorD:Clue_Chasers_Insignia"
      | "melvorD:Green_Dhide_Vambraces_U"
      | "melvorD:Green_Dhide_Chaps_U"
      | "melvorD:Green_Dhide_Body_U"
      | "melvorD:Blue_Dhide_Vambraces_U"
      | "melvorD:Blue_Dhide_Chaps_U"
      | "melvorD:Blue_Dhide_Body_U"
      | "melvorD:Red_Dhide_Vambraces_U"
      | "melvorD:Red_Dhide_Chaps_U"
      | "melvorD:Red_Dhide_Body_U"
      | "melvorD:Black_Dhide_Vambraces_U"
      | "melvorD:Black_Dhide_Chaps_U"
      | "melvorD:Black_Dhide_Body_U"
      | "melvorD:Elite_Amulet_of_Ranged"
      | "melvorD:Amulet_of_Magic"
      | "melvorD:Elite_Amulet_of_Magic"
      | "melvorD:Bone_Necklace"
      | "melvorD:Fury_of_the_Elemental_Zodiac"
      | "melvorD:Red_Party_Hat"
      | "melvorD:Dragonfire_Shield"
      | "melvorD:Crown_of_Rhaelyx"
      | "melvorD:Enchanted_Cape"
      | "melvorD:Enchanted_Shield"
      | "melvorD:Purple_Party_Hat"
      | "melvorD:Ancient_Ring_Of_Mastery"
      | "melvorD:Santa_Hat"
      | "melvorD:Friendship_Bracelet"
      | "melvorD:Christmas_Coal"
      | "melvorD:Christmas_Sweater"
      | "melvorD:Christmas_Wreath"
      | "melvorD:Yellow_Party_Hat"
      | "melvorD:Cool_Glasses"
      | "melvorD:Enchanted_Topaz_Bolts"
      | "melvorD:Enchanted_Sapphire_Bolts"
      | "melvorD:Enchanted_Ruby_Bolts"
      | "melvorD:Enchanted_Emerald_Bolts"
      | "melvorD:Enchanted_Diamond_Bolts"
      | "melvorD:Enchanted_Jadestone_Bolts"
      | "melvorD:Poison_Ring"
      | "melvorD:Burning_Ring"
      | "melvorD:Frostburn_Ring"
      | "melvorD:Poison_Arrows"
      | "melvorD:Fire_Arrows"
      | "melvorD:Frost_Arrows"
      | "melvorD:Ring_Of_Balance"
      | "melvorD:Flying_Cape"
      | "melvorD:Amulet_Of_Healing"
      | "melvorD:One_Layer_Shield"
      | "melvorD:Warding_Shield"
      | "melvorD:Ultimate_Speed_Boots"
      | "melvorD:I_Cant_See_Helmet"
      | "melvorD:Almighty_Ring"
      | "melvorD:Punching_Bag_Platebody"
      | "melvorD:Precision_Gloves"
      | "melvorD:Heavy_Gloves"
      | "melvorD:Ultimate_Slapping_Gloves"
      | "melvorD:Amulet_Of_Burning_Leech"
      | "melvorD:Amulet_Of_Poison_Leech"
      | "melvorD:Magic_Crit_Amulet"
      | "melvorD:Melee_Crit_Amulet"
      | "melvorD:Bloodthirst_Amulet"
      | "melvorD:Dragon_Head_Helmet"
      | "melvorD:Stonewall_Shield"
      | "melvorD:Book_of_Eli"
      | "melvorF:Leather_Gloves"
      | "melvorF:Leather_Body"
      | "melvorF:Silver_Topaz_Ring"
      | "melvorF:Silver_Sapphire_Ring"
      | "melvorF:Silver_Ruby_Ring"
      | "melvorF:Silver_Emerald_Ring"
      | "melvorF:Silver_Diamond_Ring"
      | "melvorF:Gold_Sapphire_Ring"
      | "melvorF:Gold_Ruby_Ring"
      | "melvorF:Gold_Emerald_Ring"
      | "melvorF:Gold_Diamond_Ring"
      | "melvorF:Silver_Topaz_Necklace"
      | "melvorF:Silver_Sapphire_Necklace"
      | "melvorF:Silver_Ruby_Necklace"
      | "melvorF:Silver_Emerald_Necklace"
      | "melvorF:Silver_Diamond_Necklace"
      | "melvorF:Gold_Topaz_Necklace"
      | "melvorF:Gold_Sapphire_Necklace"
      | "melvorF:Gold_Ruby_Necklace"
      | "melvorF:Gold_Emerald_Necklace"
      | "melvorF:Gold_Diamond_Necklace"
      | "melvorF:Thieving_Gloves"
      | "melvorF:Crafting_Skillcape"
      | "melvorF:Fletching_Skillcape"
      | "melvorF:Magic_Skillcape"
      | "melvorF:Ranged_Skillcape"
      | "melvorF:Runecrafting_Skillcape"
      | "melvorF:Thieving_Skillcape"
      | "melvorF:Prayer_Skillcape"
      | "melvorF:Slayer_Helmet_Basic"
      | "melvorF:Slayer_Platebody_Basic"
      | "melvorF:Slayer_Helmet_Strong"
      | "melvorF:Slayer_Platebody_Strong"
      | "melvorF:Slayer_Helmet_Elite"
      | "melvorF:Slayer_Platebody_Elite"
      | "melvorF:Mirror_Shield"
      | "melvorF:Cape_of_Arrow_Preservation"
      | "melvorF:Magical_Ring"
      | "melvorF:Ancient_Arrow"
      | "melvorF:Slayer_Skillcape"
      | "melvorF:Slayer_Wizard_Hat_Basic"
      | "melvorF:Slayer_Wizard_Robes_Basic"
      | "melvorF:Slayer_Wizard_Hat_Strong"
      | "melvorF:Slayer_Wizard_Robes_Strong"
      | "melvorF:Slayer_Wizard_Hat_Elite"
      | "melvorF:Slayer_Wizard_Robes_Elite"
      | "melvorF:Slayer_Cowl_Basic"
      | "melvorF:Slayer_Leather_Body_Basic"
      | "melvorF:Slayer_Cowl_Strong"
      | "melvorF:Slayer_Leather_Body_Strong"
      | "melvorF:Slayer_Cowl_Elite"
      | "melvorF:Slayer_Leather_Body_Elite"
      | "melvorF:Hard_Leather_Gloves"
      | "melvorF:Hard_Leather_Boots"
      | "melvorF:Hard_Leather_Cowl"
      | "melvorF:Hard_Leather_Vambraces"
      | "melvorF:Hard_Leather_Body"
      | "melvorF:Hard_Leather_Chaps"
      | "melvorF:Chapeau_Noir"
      | "melvorF:Herblore_Skillcape"
      | "melvorF:Topaz_Bolts"
      | "melvorF:Sapphire_Bolts"
      | "melvorF:Ruby_Bolts"
      | "melvorF:Emerald_Bolts"
      | "melvorF:Diamond_Bolts"
      | "melvorF:Aeris_God_Helmet"
      | "melvorF:Aeris_God_Platelegs"
      | "melvorF:Aeris_God_Platebody"
      | "melvorF:Aeris_God_Boots"
      | "melvorF:Aeris_God_Gloves"
      | "melvorF:Glacia_God_Helmet"
      | "melvorF:Glacia_God_Platelegs"
      | "melvorF:Glacia_God_Platebody"
      | "melvorF:Glacia_God_Boots"
      | "melvorF:Glacia_God_Gloves"
      | "melvorF:Ancient_Dhide_Vambraces"
      | "melvorF:Ancient_Dhide_Chaps"
      | "melvorF:Ancient_Dhide_Body"
      | "melvorF:Ancient_Dhide_Vambraces_U"
      | "melvorF:Ancient_Dhide_Chaps_U"
      | "melvorF:Ancient_Dhide_Body_U"
      | "melvorF:Green_Dhide_Shield"
      | "melvorF:Blue_Dhide_Shield"
      | "melvorF:Red_Dhide_Shield"
      | "melvorF:Black_Dhide_Shield"
      | "melvorF:Ancient_Dhide_Shield"
      | "melvorF:Green_Dhide_Shield_U"
      | "melvorF:Blue_Dhide_Shield_U"
      | "melvorF:Red_Dhide_Shield_U"
      | "melvorF:Black_Dhide_Shield_U"
      | "melvorF:Ancient_Dhide_Shield_U"
      | "melvorF:Terran_God_Helmet"
      | "melvorF:Terran_God_Platelegs"
      | "melvorF:Terran_God_Platebody"
      | "melvorF:Terran_God_Boots"
      | "melvorF:Terran_God_Gloves"
      | "melvorF:Ragnar_God_Helmet"
      | "melvorF:Ragnar_God_Platelegs"
      | "melvorF:Ragnar_God_Platebody"
      | "melvorF:Ragnar_God_Boots"
      | "melvorF:Ragnar_God_Gloves"
      | "melvorF:Deadeye_Ring"
      | "melvorF:Deadeye_Amulet"
      | "melvorF:Warlock_Ring"
      | "melvorF:Warlock_Amulet"
      | "melvorF:Guardian_Ring"
      | "melvorF:Guardian_Amulet"
      | "melvorF:Fighter_Ring"
      | "melvorF:Fighter_Amulet"
      | "melvorF:Max_Skillcape"
      | "melvorF:Earth_Layered_Shield"
      | "melvorF:Skull_Cape"
      | "melvorF:Air_Acolyte_Wizard_Hat"
      | "melvorF:Air_Acolyte_Wizard_Robes"
      | "melvorF:Air_Acolyte_Wizard_Bottoms"
      | "melvorF:Air_Acolyte_Wizard_Boots"
      | "melvorF:Water_Acolyte_Wizard_Hat"
      | "melvorF:Water_Acolyte_Wizard_Robes"
      | "melvorF:Water_Acolyte_Wizard_Bottoms"
      | "melvorF:Water_Acolyte_Wizard_Boots"
      | "melvorF:Earth_Acolyte_Wizard_Hat"
      | "melvorF:Earth_Acolyte_Wizard_Robes"
      | "melvorF:Earth_Acolyte_Wizard_Bottoms"
      | "melvorF:Earth_Acolyte_Wizard_Boots"
      | "melvorF:Fire_Acolyte_Wizard_Hat"
      | "melvorF:Fire_Acolyte_Wizard_Robes"
      | "melvorF:Fire_Acolyte_Wizard_Bottoms"
      | "melvorF:Fire_Acolyte_Wizard_Boots"
      | "melvorF:Air_Adept_Wizard_Hat"
      | "melvorF:Air_Adept_Wizard_Robes"
      | "melvorF:Air_Adept_Wizard_Bottoms"
      | "melvorF:Air_Adept_Wizard_Boots"
      | "melvorF:Water_Adept_Wizard_Hat"
      | "melvorF:Water_Adept_Wizard_Robes"
      | "melvorF:Water_Adept_Wizard_Bottoms"
      | "melvorF:Water_Adept_Wizard_Boots"
      | "melvorF:Earth_Adept_Wizard_Hat"
      | "melvorF:Earth_Adept_Wizard_Robes"
      | "melvorF:Earth_Adept_Wizard_Bottoms"
      | "melvorF:Earth_Adept_Wizard_Boots"
      | "melvorF:Fire_Adept_Wizard_Hat"
      | "melvorF:Fire_Adept_Wizard_Robes"
      | "melvorF:Fire_Adept_Wizard_Bottoms"
      | "melvorF:Fire_Adept_Wizard_Boots"
      | "melvorF:Air_Expert_Wizard_Hat"
      | "melvorF:Air_Expert_Wizard_Robes"
      | "melvorF:Air_Expert_Wizard_Bottoms"
      | "melvorF:Air_Expert_Wizard_Boots"
      | "melvorF:Water_Expert_Wizard_Hat"
      | "melvorF:Water_Expert_Wizard_Robes"
      | "melvorF:Water_Expert_Wizard_Bottoms"
      | "melvorF:Water_Expert_Wizard_Boots"
      | "melvorF:Earth_Expert_Wizard_Hat"
      | "melvorF:Earth_Expert_Wizard_Robes"
      | "melvorF:Earth_Expert_Wizard_Bottoms"
      | "melvorF:Earth_Expert_Wizard_Boots"
      | "melvorF:Fire_Expert_Wizard_Hat"
      | "melvorF:Fire_Expert_Wizard_Robes"
      | "melvorF:Fire_Expert_Wizard_Bottoms"
      | "melvorF:Fire_Expert_Wizard_Boots"
      | "melvorF:Cape_of_Completion"
      | "melvorF:Desert_Hat"
      | "melvorF:Blazing_Lantern"
      | "melvorF:Climbing_Boots"
      | "melvorF:Miolite_Helmet"
      | "melvorF:Miolite_Boots"
      | "melvorF:Miolite_Platelegs"
      | "melvorF:Miolite_Platebody"
      | "melvorF:Miolite_Shield"
      | "melvorF:Gloves_of_Silence"
      | "melvorF:Shaman_Ring"
      | "melvorF:Book_of_Occults"
      | "melvorF:Elementalist_Gloves"
      | "melvorF:Sand_Treaders"
      | "melvorF:Desert_Wrappings"
      | "melvorF:Sandstorm_Ring"
      | "melvorF:Elder_Crown"
      | "melvorF:Tormented_Ring"
      | "melvorF:Recoil_Shield"
      | "melvorF:Wasteful_Ring"
      | "melvorF:Jadestone_Bolts"
      | "melvorF:Paladin_Gloves"
      | "melvorF:Priest_Hat"
      | "melvorF:Infernal_Cape"
      | "melvorF:Slayer_Helmet_Master"
      | "melvorF:Slayer_Platebody_Master"
      | "melvorF:Slayer_Cowl_Master"
      | "melvorF:Slayer_Leather_Body_Master"
      | "melvorF:Slayer_Wizard_Hat_Master"
      | "melvorF:Slayer_Wizard_Robes_Master"
      | "melvorF:Green_Party_Hat"
      | "melvorF:Hunters_Ring"
      | "melvorF:Agility_Skillcape"
      | "melvorF:Summoning_Familiar_Golbin_Thief"
      | "melvorF:Summoning_Familiar_Occultist"
      | "melvorF:Summoning_Familiar_Wolf"
      | "melvorF:Summoning_Familiar_Ent"
      | "melvorF:Summoning_Familiar_Mole"
      | "melvorF:Summoning_Familiar_Octopus"
      | "melvorF:Summoning_Familiar_Minotaur"
      | "melvorF:Summoning_Familiar_Centaur"
      | "melvorF:Summoning_Familiar_Witch"
      | "melvorF:Summoning_Familiar_Pig"
      | "melvorF:Summoning_Familiar_Crow"
      | "melvorF:Summoning_Familiar_Leprechaun"
      | "melvorF:Summoning_Familiar_Cyclops"
      | "melvorF:Summoning_Familiar_Yak"
      | "melvorF:Summoning_Familiar_Unicorn"
      | "melvorF:Summoning_Familiar_Dragon"
      | "melvorF:Summoning_Familiar_Monkey"
      | "melvorF:Summoning_Familiar_Salamander"
      | "melvorF:Summoning_Familiar_Bear"
      | "melvorF:Summoning_Familiar_Devil"
      | "melvorF:Summoning_Skillcape"
      | "melvorF:Necromancer_Hat"
      | "melvorF:Necromancer_Robes"
      | "melvorF:Necromancer_Bottoms"
      | "melvorF:Necromancer_Boots"
      | "melvorF:Boots_Of_Stealth"
      | "melvorF:Jeweled_Necklace"
      | "melvorF:Thievers_Cape"
      | "melvorF:Cooking_Apron"
      | "melvorF:Fishing_Hook"
      | "melvorF:Knights_Cape"
      | "melvorF:Whetstone"
      | "melvorF:Wizards_Scroll"
      | "melvorF:Prayer_Scroll"
      | "melvorF:Ring_Of_Wealth"
      | "melvorF:Absorbing_Shield"
      | "melvorF:Chefs_Hat"
      | "melvorF:Training_Shield"
      | "melvorF:Knights_Defender"
      | "melvorF:Cave_Giant_Boots"
      | "melvorF:Bobs_Gloves"
      | "melvorF:Golbin_Mask"
      | "melvorF:Fine_Coinpurse"
      | "melvorF:Lumberjacks_Top"
      | "melvorF:Miners_Helmet"
      | "melvorF:Sailors_Top"
      | "melvorF:Jesters_Hat"
      | "melvorF:Gold_Crested_Shield"
      | "melvorF:Book_Of_Scholars"
      | "melvorF:Amulet_Of_Incantation"
      | "melvorF:Thiefs_Moneysack"
      | "melvorF:Seed_Pouch"
      | "melvorF:Runecrafting_Pouch"
      | "melvorF:Alchemists_Bag"
      | "melvorF:Shield_Of_Melee_Power"
      | "melvorF:Shield_Of_Ranged_Power"
      | "melvorF:Shield_Of_Magic_Power"
      | "melvorF:Ring_Of_Power"
      | "melvorF:Throwing_Power_Gloves"
      | "melvorF:Natures_Blessing_Ring"
      | "melvorF:Scaled_Shield"
      | "melvorF:Poison_Virulence_Ring"
      | "melvorF:Poison_Virulence_Gloves"
      | "melvorF:Burning_Madness_Ring"
      | "melvorF:Burning_Madness_Gloves"
      | "melvorF:Spiked_Shell_Ring"
      | "melvorF:Spiked_Shell_Gloves"
      | "melvorF:Relentless_Fury_Ring"
      | "melvorF:Relentless_Fury_Gloves"
      | "melvorF:Ring_Of_Blade_Echoes"
      | "melvorF:Ring_Of_Barrage"
      | "melvorF:Ring_Of_Spirit_Power"
      | "melvorF:Astrology_Skillcape"
      | "melvorF:Woodcutters_Hat"
      | "melvorF:Woodcutters_Body"
      | "melvorF:Woodcutters_Leggings"
      | "melvorF:Woodcutters_Boots"
      | "melvorF:Burning_Mans_Hat"
      | "melvorF:Burning_Mans_Body"
      | "melvorF:Burning_Mans_Leggings"
      | "melvorF:Burning_Mans_Boots"
      | "melvorF:Fishermans_Hat"
      | "melvorF:Fishermans_Body"
      | "melvorF:Fishermans_Leggings"
      | "melvorF:Fishermans_Boots"
      | "melvorF:Miners_Hat"
      | "melvorF:Miners_Body"
      | "melvorF:Miners_Leggings"
      | "melvorF:Miners_Boots"
      | "melvorF:Blacksmiths_Hat"
      | "melvorF:Blacksmiths_Body"
      | "melvorF:Blacksmiths_Leggings"
      | "melvorF:Blacksmiths_Boots"
      | "melvorF:Fletchers_Hat"
      | "melvorF:Fletchers_Body"
      | "melvorF:Fletchers_Leggings"
      | "melvorF:Fletchers_Boots"
      | "melvorF:Crafters_Hat"
      | "melvorF:Crafters_Body"
      | "melvorF:Crafters_Leggings"
      | "melvorF:Crafters_Boots"
      | "melvorF:Runecrafters_Hat"
      | "melvorF:Runecrafters_Body"
      | "melvorF:Runecrafters_Leggings"
      | "melvorF:Runecrafters_Boots"
      | "melvorF:Potion_Makers_Hat"
      | "melvorF:Potion_Makers_Body"
      | "melvorF:Potion_Makers_Leggings"
      | "melvorF:Potion_Makers_Boots"
      | "melvorF:Performance_Enhancing_Hat"
      | "melvorF:Performance_Enhancing_Body"
      | "melvorF:Performance_Enhancing_Leggings"
      | "melvorF:Performance_Enhancing_Boots"
      | "melvorF:Star_Gazing_Hat"
      | "melvorF:Star_Gazing_Body"
      | "melvorF:Star_Gazing_Leggings"
      | "melvorF:Star_Gazing_Boots"
      | "melvorF:Skillers_Hat"
      | "melvorF:Skillers_Body"
      | "melvorF:Skillers_Leggings"
      | "melvorF:Skillers_Boots"
      | "melvorF:Warm_Beanie"
      | "melvorF:Pirate_Captain_Hat"
      | "melvorF:Prats_Hat"
      | "melvorF:Top_Hat"
      | "melvorF:Hunters_Hat"
      | "melvorF:Clown_Hat"
      | "melvorF:Township_Skillcape"
      | "melvorTotH:Corundum_Helmet"
      | "melvorTotH:Corundum_Boots"
      | "melvorTotH:Corundum_Platelegs"
      | "melvorTotH:Corundum_Platebody"
      | "melvorTotH:Corundum_Shield"
      | "melvorTotH:Corundum_Gloves"
      | "melvorTotH:Augite_Helmet"
      | "melvorTotH:Augite_Boots"
      | "melvorTotH:Augite_Platelegs"
      | "melvorTotH:Augite_Platebody"
      | "melvorTotH:Augite_Shield"
      | "melvorTotH:Augite_Gloves"
      | "melvorTotH:Meteorite_Helmet"
      | "melvorTotH:Meteorite_Platelegs"
      | "melvorTotH:Meteorite_Platebody"
      | "melvorTotH:Divine_Helmet"
      | "melvorTotH:Divine_Boots"
      | "melvorTotH:Divine_Platelegs"
      | "melvorTotH:Divine_Platebody"
      | "melvorTotH:Divine_Shield"
      | "melvorTotH:Divine_Gloves"
      | "melvorTotH:Corundum_Helmet_T_I"
      | "melvorTotH:Corundum_Boots_T_I"
      | "melvorTotH:Corundum_Platelegs_T_I"
      | "melvorTotH:Corundum_Platebody_T_I"
      | "melvorTotH:Corundum_Shield_T_I"
      | "melvorTotH:Corundum_Helmet_T_P"
      | "melvorTotH:Corundum_Boots_T_P"
      | "melvorTotH:Corundum_Platelegs_T_P"
      | "melvorTotH:Corundum_Platebody_T_P"
      | "melvorTotH:Corundum_Shield_T_P"
      | "melvorTotH:Augite_Helmet_T_I"
      | "melvorTotH:Augite_Boots_T_I"
      | "melvorTotH:Augite_Platelegs_T_I"
      | "melvorTotH:Augite_Platebody_T_I"
      | "melvorTotH:Augite_Shield_T_I"
      | "melvorTotH:Augite_Helmet_T_P"
      | "melvorTotH:Augite_Boots_T_P"
      | "melvorTotH:Augite_Platelegs_T_P"
      | "melvorTotH:Augite_Platebody_T_P"
      | "melvorTotH:Augite_Shield_T_P"
      | "melvorTotH:Divine_Helmet_T_I"
      | "melvorTotH:Divine_Boots_T_I"
      | "melvorTotH:Divine_Platelegs_T_I"
      | "melvorTotH:Divine_Platebody_T_I"
      | "melvorTotH:Divine_Shield_T_I"
      | "melvorTotH:Divine_Helmet_T_P"
      | "melvorTotH:Divine_Boots_T_P"
      | "melvorTotH:Divine_Platelegs_T_P"
      | "melvorTotH:Divine_Platebody_T_P"
      | "melvorTotH:Divine_Shield_T_P"
      | "melvorTotH:Meteorite_Woodcutting_Ring"
      | "melvorTotH:Meteorite_Woodcutting_Amulet"
      | "melvorTotH:Burning_Amulet_of_Gold"
      | "melvorTotH:Burning_Amulet_of_Stardust"
      | "melvorTotH:Burning_Amulet_of_Ash"
      | "melvorTotH:Burning_Amulet_of_Charcoal"
      | "melvorTotH:Burning_Amulet_of_XP"
      | "melvorTotH:Explorers_Map"
      | "melvorTotH:Necromancers_Crown"
      | "melvorTotH:Amulet_of_Prayers"
      | "melvorTotH:Adventurers_Backpack"
      | "melvorTotH:Hunters_Journal"
      | "melvorTotH:Crown_of_Madremonte"
      | "melvorTotH:Vampiric_Cloak"
      | "melvorTotH:Corundum_Arrows"
      | "melvorTotH:Augite_Arrows"
      | "melvorTotH:Divine_Arrows"
      | "melvorTotH:Ethereal_Arrows"
      | "melvorTotH:Onyx_Bolts"
      | "melvorTotH:Meteorite_Bolts"
      | "melvorTotH:Decay_Bolts"
      | "melvorTotH:Zephyte_Bolts"
      | "melvorTotH:Elderwood_Vambraces"
      | "melvorTotH:Elderwood_Vambraces_U"
      | "melvorTotH:Elderwood_Chaps"
      | "melvorTotH:Elderwood_Chaps_U"
      | "melvorTotH:Elderwood_Shield"
      | "melvorTotH:Elderwood_Shield_U"
      | "melvorTotH:Elderwood_Body"
      | "melvorTotH:Elderwood_Body_U"
      | "melvorTotH:Revenant_Vambraces"
      | "melvorTotH:Revenant_Vambraces_U"
      | "melvorTotH:Revenant_Chaps"
      | "melvorTotH:Revenant_Chaps_U"
      | "melvorTotH:Revenant_Shield"
      | "melvorTotH:Revenant_Shield_U"
      | "melvorTotH:Revenant_Body"
      | "melvorTotH:Revenant_Body_U"
      | "melvorTotH:Carrion_Vambraces"
      | "melvorTotH:Carrion_Vambraces_U"
      | "melvorTotH:Carrion_Chaps"
      | "melvorTotH:Carrion_Chaps_U"
      | "melvorTotH:Carrion_Shield"
      | "melvorTotH:Carrion_Shield_U"
      | "melvorTotH:Carrion_Body"
      | "melvorTotH:Carrion_Body_U"
      | "melvorTotH:Iridium_Onyx_Ring"
      | "melvorTotH:Palladium_Onyx_Ring"
      | "melvorTotH:Iridium_Oricha_Ring"
      | "melvorTotH:Palladium_Oricha_Ring"
      | "melvorTotH:Iridium_Cerulean_Ring"
      | "melvorTotH:Palladium_Cerulean_Ring"
      | "melvorTotH:Iridium_Runestone_Ring"
      | "melvorTotH:Palladium_Runestone_Ring"
      | "melvorTotH:Iridium_Zephyte_Ring"
      | "melvorTotH:Palladium_Zephyte_Ring"
      | "melvorTotH:Meteorite_Warrior_Ring"
      | "melvorTotH:Meteorite_Marksman_Ring"
      | "melvorTotH:Iridium_Onyx_Necklace"
      | "melvorTotH:Palladium_Onyx_Necklace"
      | "melvorTotH:Iridium_Oricha_Necklace"
      | "melvorTotH:Palladium_Oricha_Necklace"
      | "melvorTotH:Iridium_Cerulean_Necklace"
      | "melvorTotH:Palladium_Cerulean_Necklace"
      | "melvorTotH:Iridium_Runestone_Necklace"
      | "melvorTotH:Palladium_Runestone_Necklace"
      | "melvorTotH:Iridium_Zephyte_Necklace"
      | "melvorTotH:Palladium_Zephyte_Necklace"
      | "melvorTotH:Artisan_Pouch"
      | "melvorTotH:Kindling_Pouch"
      | "melvorTotH:Stamina_Pouch"
      | "melvorTotH:Spirit_Bag"
      | "melvorTotH:Chefs_Bag"
      | "melvorTotH:Summoners_Bag"
      | "melvorTotH:Poison_Master_Wizard_Hat"
      | "melvorTotH:Poison_Master_Wizard_Boots"
      | "melvorTotH:Poison_Master_Wizard_Bottoms"
      | "melvorTotH:Poison_Master_Wizard_Robes"
      | "melvorTotH:Infernal_Master_Wizard_Hat"
      | "melvorTotH:Infernal_Master_Wizard_Boots"
      | "melvorTotH:Infernal_Master_Wizard_Bottoms"
      | "melvorTotH:Infernal_Master_Wizard_Robes"
      | "melvorTotH:Lightning_Master_Wizard_Hat"
      | "melvorTotH:Lightning_Master_Wizard_Boots"
      | "melvorTotH:Lightning_Master_Wizard_Bottoms"
      | "melvorTotH:Lightning_Master_Wizard_Robes"
      | "melvorTotH:Poison_Legendary_Wizard_Hat"
      | "melvorTotH:Poison_Legendary_Wizard_Boots"
      | "melvorTotH:Poison_Legendary_Wizard_Bottoms"
      | "melvorTotH:Poison_Legendary_Wizard_Robes"
      | "melvorTotH:Infernal_Legendary_Wizard_Hat"
      | "melvorTotH:Infernal_Legendary_Wizard_Boots"
      | "melvorTotH:Infernal_Legendary_Wizard_Bottoms"
      | "melvorTotH:Infernal_Legendary_Wizard_Robes"
      | "melvorTotH:Lightning_Legendary_Wizard_Hat"
      | "melvorTotH:Lightning_Legendary_Wizard_Boots"
      | "melvorTotH:Lightning_Legendary_Wizard_Bottoms"
      | "melvorTotH:Lightning_Legendary_Wizard_Robes"
      | "melvorTotH:Poison_Mythical_Wizard_Hat"
      | "melvorTotH:Poison_Mythical_Wizard_Boots"
      | "melvorTotH:Poison_Mythical_Wizard_Bottoms"
      | "melvorTotH:Poison_Mythical_Wizard_Robes"
      | "melvorTotH:Infernal_Mythical_Wizard_Hat"
      | "melvorTotH:Infernal_Mythical_Wizard_Boots"
      | "melvorTotH:Infernal_Mythical_Wizard_Bottoms"
      | "melvorTotH:Infernal_Mythical_Wizard_Robes"
      | "melvorTotH:Lightning_Mythical_Wizard_Hat"
      | "melvorTotH:Lightning_Mythical_Wizard_Boots"
      | "melvorTotH:Lightning_Mythical_Wizard_Bottoms"
      | "melvorTotH:Lightning_Mythical_Wizard_Robes"
      | "melvorTotH:Summoning_Familiar_Eagle"
      | "melvorTotH:Summoning_Familiar_Owl"
      | "melvorTotH:Summoning_Familiar_Beaver"
      | "melvorTotH:Summoning_Familiar_Fox"
      | "melvorTotH:Summoning_Familiar_Lightning_Spirit"
      | "melvorTotH:Summoning_Familiar_Siren"
      | "melvorTotH:Summoning_Familiar_Spider"
      | "melvorTotH:Summoning_Familiar_Spectre"
      | "melvorTotH:Weakness_Finder_Cape"
      | "melvorTotH:Sharp_Fletcher_Gloves"
      | "melvorTotH:Perfect_Sight_Legs"
      | "melvorTotH:Bundled_Protection_Body"
      | "melvorTotH:Poison_Lifesteal_Amulet"
      | "melvorTotH:Weakness_Exploiter_Cape"
      | "melvorTotH:Toxic_Maker_Gloves"
      | "melvorTotH:Blacksmiths_Gloves"
      | "melvorTotH:Burning_Embers_Book"
      | "melvorTotH:Burning_Protection_Platelegs"
      | "melvorTotH:Ward_of_Flame_Platebody"
      | "melvorTotH:Blazing_Helmet"
      | "melvorTotH:Frost_Walker_Boots"
      | "melvorTotH:Cool_Winds_Gloves"
      | "melvorTotH:Freezing_Touch_Body"
      | "melvorTotH:Frostshield_Amulet"
      | "melvorTotH:Lightning_Amulet"
      | "melvorTotH:FrostSpark_Amulet"
      | "melvorTotH:Lightning_Boots"
      | "melvorTotH:Frostspark_Boots"
      | "melvorTotH:Lightning_Aura_Helmet"
      | "melvorTotH:Allure_Amulet"
      | "melvorTotH:Bleed_Burner_Cape"
      | "melvorTotH:Leviathan_Shield"
      | "melvorTotH:Gauntlets_of_Rage"
      | "melvorTotH:Ring_of_Curse_Protection"
      | "melvorTotH:Mask_of_Madness"
      | "melvorTotH:Mask_of_Torment"
      | "melvorTotH:Mask_of_Despair"
      | "melvorTotH:Voodoo_Trinket"
      | "melvorTotH:Hood_of_Shade_Summon"
      | "melvorTotH:Gloves_of_Greater_Shade_Summon"
      | "melvorTotH:Ring_of_Phantom_Summon"
      | "melvorTotH:Amulet_of_Curse_Totem_Summon"
      | "melvorTotH:Summoning_Scrolls"
      | "melvorTotH:Vorloran_Devastator_Gauntlets"
      | "melvorTotH:Vorloran_Devastator_Boots"
      | "melvorTotH:Vorloran_Devastator_Helmet"
      | "melvorTotH:Vorloran_Devastator_Platelegs"
      | "melvorTotH:Vorloran_Devastator_Platebody"
      | "melvorTotH:Vorloran_Watcher_Gauntlets"
      | "melvorTotH:Vorloran_Watcher_Boots"
      | "melvorTotH:Vorloran_Watcher_Helmet"
      | "melvorTotH:Vorloran_Watcher_Platelegs"
      | "melvorTotH:Vorloran_Watcher_Platebody"
      | "melvorTotH:Vorloran_Protector_Gauntlets"
      | "melvorTotH:Vorloran_Protector_Boots"
      | "melvorTotH:Vorloran_Protector_Helmet"
      | "melvorTotH:Vorloran_Protector_Platelegs"
      | "melvorTotH:Vorloran_Protector_Platebody"
      | "melvorTotH:Slayer_Helmet_Legendary"
      | "melvorTotH:Slayer_Platebody_Legendary"
      | "melvorTotH:Slayer_Cowl_Legendary"
      | "melvorTotH:Slayer_Leather_Body_Legendary"
      | "melvorTotH:Slayer_Wizard_Hat_Legendary"
      | "melvorTotH:Slayer_Wizard_Robes_Legendary"
      | "melvorTotH:Slayer_Helmet_Mythical"
      | "melvorTotH:Slayer_Platebody_Mythical"
      | "melvorTotH:Slayer_Cowl_Mythical"
      | "melvorTotH:Slayer_Leather_Body_Mythical"
      | "melvorTotH:Slayer_Wizard_Hat_Mythical"
      | "melvorTotH:Slayer_Wizard_Robes_Mythical"
      | "melvorTotH:Slayer_Torch"
      | "melvorTotH:Mystic_Lantern"
      | "melvorTotH:Book_of_the_Ancients"
      | "melvorTotH:Travellers_Compass"
      | "melvorTotH:Blood_Ring"
      | "melvorTotH:Portable_Rations"
      | "melvorTotH:Mortar_and_Pestle"
      | "melvorTotH:Blood_Vial"
      | "melvorTotH:Masquerade_Mask"
      | "melvorTotH:Superior_Agility_Skillcape"
      | "melvorTotH:Superior_Astrology_Skillcape"
      | "melvorTotH:Superior_Attack_Skillcape"
      | "melvorTotH:Superior_Cooking_Skillcape"
      | "melvorTotH:Superior_Crafting_Skillcape"
      | "melvorTotH:Superior_Defence_Skillcape"
      | "melvorTotH:Superior_Farming_Skillcape"
      | "melvorTotH:Superior_Firemaking_Skillcape"
      | "melvorTotH:Superior_Fishing_Skillcape"
      | "melvorTotH:Superior_Fletching_Skillcape"
      | "melvorTotH:Superior_Herblore_Skillcape"
      | "melvorTotH:Superior_Hitpoints_Skillcape"
      | "melvorTotH:Superior_Magic_Skillcape"
      | "melvorTotH:Superior_Mining_Skillcape"
      | "melvorTotH:Superior_Prayer_Skillcape"
      | "melvorTotH:Superior_Ranged_Skillcape"
      | "melvorTotH:Superior_Runecrafting_Skillcape"
      | "melvorTotH:Superior_Slayer_Skillcape"
      | "melvorTotH:Superior_Smithing_Skillcape"
      | "melvorTotH:Superior_Strength_Skillcape"
      | "melvorTotH:Superior_Summoning_Skillcape"
      | "melvorTotH:Superior_Thieving_Skillcape"
      | "melvorTotH:Superior_Township_Skillcape"
      | "melvorTotH:Superior_Woodcutting_Skillcape"
      | "melvorTotH:Superior_Max_Skillcape"
      | "melvorTotH:Shadow_Cloak"
      | "melvorTotH:Golden_Reel"
      | "melvorTotH:Burning_Reel"
      | "melvorTotH:Thieving_Shorts"
      | "melvorTotH:Meteorite_Spellcaster_Ring"
    );
declare type WeaponItemID =
  | "melvorD:Bronze_Dagger"
  | "melvorD:Bronze_Sword"
  | "melvorD:Bronze_Battleaxe"
  | "melvorD:Bronze_2H_Sword"
  | "melvorD:Iron_Dagger"
  | "melvorD:Iron_Sword"
  | "melvorD:Iron_Battleaxe"
  | "melvorD:Iron_2H_Sword"
  | "melvorD:Steel_Dagger"
  | "melvorD:Steel_Sword"
  | "melvorD:Steel_Battleaxe"
  | "melvorD:Steel_2H_Sword"
  | "melvorD:Mithril_Dagger"
  | "melvorD:Mithril_Sword"
  | "melvorD:Mithril_Battleaxe"
  | "melvorD:Mithril_2H_Sword"
  | "melvorD:Adamant_Dagger"
  | "melvorD:Adamant_Sword"
  | "melvorD:Adamant_Battleaxe"
  | "melvorD:Adamant_2H_Sword"
  | "melvorD:Rune_Dagger"
  | "melvorD:Rune_Sword"
  | "melvorD:Rune_Battleaxe"
  | "melvorD:Rune_2H_Sword"
  | "melvorD:Dragon_Dagger"
  | "melvorD:Dragon_Sword"
  | "melvorD:Dragon_Battleaxe"
  | "melvorD:Dragon_2H_Sword"
  | "melvorD:Black_Dagger"
  | "melvorD:Black_Sword"
  | "melvorD:Black_Battleaxe"
  | "melvorD:Black_2H_Sword"
  | "melvorD:Normal_Shortbow"
  | "melvorD:Oak_Shortbow"
  | "melvorD:Maple_Shortbow"
  | "melvorD:Yew_Shortbow"
  | "melvorD:Magic_Shortbow"
  | "melvorD:Maple_Longbow"
  | "melvorD:Magic_Longbow"
  | "melvorD:Ancient_Sword"
  | "melvorD:Ice_Dagger"
  | "melvorD:Ice_Sword"
  | "melvorD:Ice_Battleaxe"
  | "melvorD:Ice_2h_Sword"
  | "melvorD:Ice_Shortbow"
  | "melvorD:Ice_Longbow"
  | "melvorD:Redwood_Longbow"
  | "melvorD:Air_Battlestaff"
  | "melvorD:Water_Battlestaff"
  | "melvorD:Earth_Battlestaff"
  | "melvorD:Fire_Battlestaff"
  | "melvorD:Mystic_Air_Staff"
  | "melvorD:Bronze_Scimitar"
  | "melvorD:Iron_Scimitar"
  | "melvorD:Steel_Scimitar"
  | "melvorD:Black_Scimitar"
  | "melvorD:Mithril_Scimitar"
  | "melvorD:Adamant_Scimitar"
  | "melvorD:Rune_Scimitar"
  | "melvorD:Dragon_Scimitar"
  | "melvorD:Ancient_Longbow"
  | "melvorD:Magic_Wand_Basic"
  | "melvorD:Magic_Wand_Powerful"
  | "melvorD:Magic_Wand_Elite"
  | "melvorD:Sunset_Rapier"
  | "melvorD:Bronze_Throwing_Knife"
  | "melvorD:Iron_Throwing_Knife"
  | "melvorD:Steel_Throwing_Knife"
  | "melvorD:Mithril_Throwing_Knife"
  | "melvorD:Adamant_Throwing_Knife"
  | "melvorD:Rune_Throwing_Knife"
  | "melvorD:Dragon_Throwing_Knife"
  | "melvorD:Bobs_Rake"
  | "melvorD:Candy_Cane"
  | "melvorD:Slingshot"
  | "melvorD:Elerine_Longbow"
  | "melvorD:Elerine_Spear"
  | "melvorD:Mystery_Wand"
  | "melvorD:Burning_Wand"
  | "melvorD:Frostburn_Wand"
  | "melvorD:Sword_Of_Some_Reliability"
  | "melvorD:Tilted_Crossbow"
  | "melvorD:Impossible_Longbow"
  | "melvorD:Throwing_Dragon_Sword"
  | "melvorF:Willow_Shortbow"
  | "melvorF:Normal_Longbow"
  | "melvorF:Oak_Longbow"
  | "melvorF:Willow_Longbow"
  | "melvorF:Yew_Longbow"
  | "melvorF:Redwood_Shortbow"
  | "melvorF:Staff_of_Air"
  | "melvorF:Staff_of_Water"
  | "melvorF:Staff_of_Earth"
  | "melvorF:Staff_of_Fire"
  | "melvorF:Mystic_Water_Staff"
  | "melvorF:Mystic_Earth_Staff"
  | "melvorF:Mystic_Fire_Staff"
  | "melvorF:Dragon_Claw"
  | "melvorF:Ancient_Claw"
  | "melvorF:Ancient_2H_Sword"
  | "melvorF:Bronze_Crossbow"
  | "melvorF:Iron_Crossbow"
  | "melvorF:Steel_Crossbow"
  | "melvorF:Mithril_Crossbow"
  | "melvorF:Adamant_Crossbow"
  | "melvorF:Rune_Crossbow"
  | "melvorF:Dragon_Crossbow"
  | "melvorF:Ancient_Crossbow"
  | "melvorF:Bronze_Javelin"
  | "melvorF:Iron_Javelin"
  | "melvorF:Steel_Javelin"
  | "melvorF:Mithril_Javelin"
  | "melvorF:Adamant_Javelin"
  | "melvorF:Rune_Javelin"
  | "melvorF:Dragon_Javelin"
  | "melvorF:Ancient_Javelin"
  | "melvorF:Ancient_Throwing_Knife"
  | "melvorF:Aeris_Godsword"
  | "melvorF:Glacia_Godsword"
  | "melvorF:Terran_Godsword"
  | "melvorF:Ragnar_Godsword"
  | "melvorF:Stormsnap"
  | "melvorF:Big_Ron"
  | "melvorF:Confetti_Crossbow"
  | "melvorF:Slayer_Crossbow"
  | "melvorF:Twin_Exiles"
  | "melvorF:Cloudburst_Staff"
  | "melvorF:Air_Imbued_Wand"
  | "melvorF:Water_Imbued_Wand"
  | "melvorF:Earth_Imbued_Wand"
  | "melvorF:Fire_Imbued_Wand"
  | "melvorF:Miolite_Sceptre"
  | "melvorF:Desert_Sabre"
  | "melvorF:Desert_Shortbow"
  | "melvorF:Darksteel_Dagger"
  | "melvorF:Sanguine_Blade"
  | "melvorF:Infernal_Claw"
  | "melvorF:Tidal_Edge"
  | "melvorF:Ocean_Song"
  | "melvorF:Shockwave"
  | "melvorF:Almighty_Lute"
  | "melvorF:Chefs_Spoon"
  | "melvorF:War_Axe"
  | "melvorF:Warberd"
  | "melvorF:Natures_Call_Staff"
  | "melvorF:Natures_Wrath_Staff"
  | "melvorF:Poisoned_Shortbow"
  | "melvorF:Poisoned_Dagger"
  | "melvorF:Ultima_Godsword"
  | "melvorTotH:Corundum_Dagger"
  | "melvorTotH:Corundum_Sword"
  | "melvorTotH:Corundum_Battleaxe"
  | "melvorTotH:Corundum_2H_Sword"
  | "melvorTotH:Corundum_Scimitar"
  | "melvorTotH:Corundum_Throwing_Knife"
  | "melvorTotH:Augite_Dagger"
  | "melvorTotH:Augite_Sword"
  | "melvorTotH:Augite_Battleaxe"
  | "melvorTotH:Augite_2H_Sword"
  | "melvorTotH:Augite_Scimitar"
  | "melvorTotH:Augite_Throwing_Knife"
  | "melvorTotH:Meteorite_2H_Sword"
  | "melvorTotH:Divine_Dagger"
  | "melvorTotH:Divine_Sword"
  | "melvorTotH:Divine_Battleaxe"
  | "melvorTotH:Divine_2H_Sword"
  | "melvorTotH:Divine_Scimitar"
  | "melvorTotH:Divine_Throwing_Knife"
  | "melvorTotH:Potion_Stirrer"
  | "melvorTotH:Elderwood_Shortbow"
  | "melvorTotH:Elderwood_Longbow"
  | "melvorTotH:Revenant_Shortbow"
  | "melvorTotH:Revenant_Longbow"
  | "melvorTotH:Carrion_Shortbow"
  | "melvorTotH:Carrion_Longbow"
  | "melvorTotH:Corundum_Crossbow"
  | "melvorTotH:Augite_Crossbow"
  | "melvorTotH:Divine_Crossbow"
  | "melvorTotH:Meteorite_Crossbow"
  | "melvorTotH:Corundum_Javelin"
  | "melvorTotH:Augite_Javelin"
  | "melvorTotH:Divine_Javelin"
  | "melvorTotH:Meteorite_Javelin"
  | "melvorTotH:Poison_Staff"
  | "melvorTotH:Infernal_Staff"
  | "melvorTotH:Lightning_Staff"
  | "melvorTotH:Meteorite_Staff"
  | "melvorTotH:Despair_Wand"
  | "melvorTotH:Archaic_Wand"
  | "melvorTotH:Calamity_Wand"
  | "melvorTotH:Thorned_Power_Bow"
  | "melvorTotH:Heated_Fury_2H_Hammer"
  | "melvorTotH:Spectral_Ice_Sword"
  | "melvorTotH:Lightning_Strike_1H_Sword"
  | "melvorTotH:FrostSpark_1H_Sword"
  | "melvorTotH:Lightning_Coil_2H_Staff"
  | "melvorTotH:Torrential_Blast_Crossbow"
  | "melvorTotH:Royal_Toxins_Spear"
  | "melvorTotH:Ethereal_Longbow"
  | "melvorTotH:Ethereal_Staff"
  | "melvorTotH:Ethereal_Greataxe"
  | "melvorTotH:Feather_Storm_Crossbow"
  | "melvorTotH:Agile_Wings_Rapier"
  | "melvorTotH:Slicing_Maelstrom_Wand"
  | "melvorTotH:Dark_Blade_Defender"
  | "melvorTotH:Grappling_Hook";
declare type FoodItemID =
  | "melvorD:Empty_Food"
  | "melvorD:Shrimp"
  | "melvorD:Sardine"
  | "melvorD:Herring"
  | "melvorD:Trout"
  | "melvorD:Salmon"
  | "melvorD:Lobster"
  | "melvorD:Swordfish"
  | "melvorD:Crab"
  | "melvorD:Shark"
  | "melvorD:Cave_Fish"
  | "melvorD:Manta_Ray"
  | "melvorD:Whale"
  | "melvorD:Potatoes"
  | "melvorD:Onions"
  | "melvorD:Cabbage"
  | "melvorD:Tomatoes"
  | "melvorD:Sweetcorn"
  | "melvorD:Strawberries"
  | "melvorD:Watermelon"
  | "melvorD:Snape_Grass"
  | "melvorD:Carrot"
  | "melvorD:Raw_Magic_Fish"
  | "melvorD:Anglerfish"
  | "melvorD:Fanfish"
  | "melvorD:Seahorse"
  | "melvorD:Carp"
  | "melvorD:Lemonade"
  | "melvorD:Birthday_Cake"
  | "melvorD:Bread"
  | "melvorD:Beef"
  | "melvorD:Chicken"
  | "melvorD:Plain_Pizza_Slice"
  | "melvorD:Beef_Pie"
  | "melvorD:Meat_Pizza_Slice"
  | "melvorD:Basic_Soup"
  | "melvorD:Strawberry_Cupcake"
  | "melvorD:Hearty_Soup"
  | "melvorD:Cherry_Cupcake"
  | "melvorD:Cream_Corn_Soup"
  | "melvorD:Chicken_Soup"
  | "melvorD:Strawberry_Cake"
  | "melvorD:Carrot_Cake"
  | "melvorD:Shrimp_Perfect"
  | "melvorD:Sardine_Perfect"
  | "melvorD:Herring_Perfect"
  | "melvorD:Seahorse_Perfect"
  | "melvorD:Trout_Perfect"
  | "melvorD:Salmon_Perfect"
  | "melvorD:Lobster_Perfect"
  | "melvorD:Swordfish_Perfect"
  | "melvorD:Anglerfish_Perfect"
  | "melvorD:Fanfish_Perfect"
  | "melvorD:Crab_Perfect"
  | "melvorD:Carp_Perfect"
  | "melvorD:Shark_Perfect"
  | "melvorD:Cave_Fish_Perfect"
  | "melvorD:Manta_Ray_Perfect"
  | "melvorD:Whale_Perfect"
  | "melvorD:Bread_Perfect"
  | "melvorD:Beef_Perfect"
  | "melvorD:Chicken_Perfect"
  | "melvorD:Plain_Pizza_Slice_Perfect"
  | "melvorD:Beef_Pie_Perfect"
  | "melvorD:Meat_Pizza_Slice_Perfect"
  | "melvorD:Basic_Soup_Perfect"
  | "melvorD:Strawberry_Cupcake_Perfect"
  | "melvorD:Hearty_Soup_Perfect"
  | "melvorD:Cherry_Cupcake_Perfect"
  | "melvorD:Cream_Corn_Soup_Perfect"
  | "melvorD:Chicken_Soup_Perfect"
  | "melvorD:Strawberry_Cake_Perfect"
  | "melvorD:Carrot_Cake_Perfect"
  | "melvorD:Cherry"
  | "melvorD:Gingerbread_House"
  | "melvorD:Gingerbread_Man"
  | "melvorD:Edible_Candy_Cane"
  | "melvorF:Apple"
  | "melvorF:Apple_Pie"
  | "melvorF:Lemon_Cake"
  | "melvorF:Apple_Pie_Perfect"
  | "melvorF:Lemon_Cake_Perfect"
  | "melvorTotH:Lava_Fish"
  | "melvorTotH:Lava_Fish_Perfect"
  | "melvorTotH:Blue_Crab"
  | "melvorTotH:Blue_Crab_Perfect"
  | "melvorTotH:Magma_Fish"
  | "melvorTotH:Magma_Fish_Perfect"
  | "melvorTotH:Static_Jellyfish"
  | "melvorTotH:Static_Jellyfish_Perfect"
  | "melvorTotH:Magma_Eel"
  | "melvorTotH:Magma_Eel_Perfect"
  | "melvorTotH:Frost_Crab"
  | "melvorTotH:Frost_Crab_Perfect"
  | "melvorTotH:Frozen_Manta_Ray"
  | "melvorTotH:Frozen_Manta_Ray_Perfect"
  | "melvorTotH:Terrorfish"
  | "melvorTotH:Terrorfish_Perfect"
  | "melvorTotH:Mystic_Shark"
  | "melvorTotH:Mystic_Shark_Perfect"
  | "melvorTotH:Banana_Bread"
  | "melvorTotH:Banana_Bread_Perfect"
  | "melvorTotH:Mushroom_Soup"
  | "melvorTotH:Mushroom_Soup_Perfect"
  | "melvorTotH:Spicy_Chicken_Pizza"
  | "melvorTotH:Spicy_Chicken_Pizza_Perfect"
  | "melvorTotH:Beef_Mushroom_Stew"
  | "melvorTotH:Beef_Mushroom_Stew_Perfect"
  | "melvorTotH:Sandwich"
  | "melvorTotH:Sandwich_Perfect"
  | "melvorTotH:Pumpkin_Soup"
  | "melvorTotH:Pumpkin_Soup_Perfect"
  | "melvorTotH:Spicy_Shrimp_Soup"
  | "melvorTotH:Spicy_Shrimp_Soup_Perfect"
  | "melvorTotH:Fancy_Meat_Pizza"
  | "melvorTotH:Fancy_Meat_Pizza_Perfect"
  | "melvorTotH:Chicken_Cream_Mushroom_Soup"
  | "melvorTotH:Chicken_Cream_Mushroom_Soup_Perfect"
  | "melvorTotH:Chilli_Frost_Crab"
  | "melvorTotH:Chilli_Frost_Crab_Perfect"
  | "melvorTotH:Starfruit_Cake"
  | "melvorTotH:Starfruit_Cake_Perfect"
  | "melvorTotH:Pumpkin"
  | "melvorTotH:Chilli"
  | "melvorTotH:Mushrooms"
  | "melvorTotH:Starfruit"
  | "melvorTotH:Bananas"
  | "melvorTotH:Lemonade_Full";
declare type BoneItemID =
  | "melvorD:Bones"
  | "melvorD:Dragon_Bones"
  | "melvorD:Magic_Bones"
  | "melvorD:Big_Bones"
  | "melvorD:Raw_Skeleton_Fish"
  | "melvorF:Holy_Dust"
  | "melvorF:Ash"
  | "melvorF:Small_Urn_Enchanted"
  | "melvorF:Medium_Urn_Enchanted"
  | "melvorTotH:Large_Urn_Enchanted"
  | "melvorTotH:Infernal_Bones";
declare type PotionItemID =
  | "melvorF:Melee_Accuracy_Potion_I"
  | "melvorF:Melee_Accuracy_Potion_II"
  | "melvorF:Melee_Accuracy_Potion_III"
  | "melvorF:Melee_Accuracy_Potion_IV"
  | "melvorF:Melee_Strength_Potion_I"
  | "melvorF:Melee_Strength_Potion_II"
  | "melvorF:Melee_Strength_Potion_III"
  | "melvorF:Melee_Strength_Potion_IV"
  | "melvorF:Melee_Evasion_Potion_I"
  | "melvorF:Melee_Evasion_Potion_II"
  | "melvorF:Melee_Evasion_Potion_III"
  | "melvorF:Melee_Evasion_Potion_IV"
  | "melvorF:Ranged_Assistance_Potion_I"
  | "melvorF:Ranged_Assistance_Potion_II"
  | "melvorF:Ranged_Assistance_Potion_III"
  | "melvorF:Ranged_Assistance_Potion_IV"
  | "melvorF:Magic_Assistance_Potion_I"
  | "melvorF:Magic_Assistance_Potion_II"
  | "melvorF:Magic_Assistance_Potion_III"
  | "melvorF:Magic_Assistance_Potion_IV"
  | "melvorF:Regeneration_Potion_I"
  | "melvorF:Regeneration_Potion_II"
  | "melvorF:Regeneration_Potion_III"
  | "melvorF:Regeneration_Potion_IV"
  | "melvorF:Damage_Reduction_Potion_I"
  | "melvorF:Damage_Reduction_Potion_II"
  | "melvorF:Damage_Reduction_Potion_III"
  | "melvorF:Damage_Reduction_Potion_IV"
  | "melvorF:Bird_Nest_Potion_I"
  | "melvorF:Bird_Nest_Potion_II"
  | "melvorF:Bird_Nest_Potion_III"
  | "melvorF:Bird_Nest_Potion_IV"
  | "melvorF:Fishermans_Potion_I"
  | "melvorF:Fishermans_Potion_II"
  | "melvorF:Fishermans_Potion_III"
  | "melvorF:Fishermans_Potion_IV"
  | "melvorF:Controlled_Heat_Potion_I"
  | "melvorF:Controlled_Heat_Potion_II"
  | "melvorF:Controlled_Heat_Potion_III"
  | "melvorF:Controlled_Heat_Potion_IV"
  | "melvorF:Generous_Cook_Potion_I"
  | "melvorF:Generous_Cook_Potion_II"
  | "melvorF:Generous_Cook_Potion_III"
  | "melvorF:Generous_Cook_Potion_IV"
  | "melvorF:Perfect_Swing_Potion_I"
  | "melvorF:Perfect_Swing_Potion_II"
  | "melvorF:Perfect_Swing_Potion_III"
  | "melvorF:Perfect_Swing_Potion_IV"
  | "melvorF:Seeing_Gold_Potion_I"
  | "melvorF:Seeing_Gold_Potion_II"
  | "melvorF:Seeing_Gold_Potion_III"
  | "melvorF:Seeing_Gold_Potion_IV"
  | "melvorF:Gentle_Hands_Potion_I"
  | "melvorF:Gentle_Hands_Potion_II"
  | "melvorF:Gentle_Hands_Potion_III"
  | "melvorF:Gentle_Hands_Potion_IV"
  | "melvorF:Farming_Potion_I"
  | "melvorF:Farming_Potion_II"
  | "melvorF:Farming_Potion_III"
  | "melvorF:Farming_Potion_IV"
  | "melvorF:Fletching_Potion_I"
  | "melvorF:Fletching_Potion_II"
  | "melvorF:Fletching_Potion_III"
  | "melvorF:Fletching_Potion_IV"
  | "melvorF:Crafting_Potion_I"
  | "melvorF:Crafting_Potion_II"
  | "melvorF:Crafting_Potion_III"
  | "melvorF:Crafting_Potion_IV"
  | "melvorF:Elemental_Potion_I"
  | "melvorF:Elemental_Potion_II"
  | "melvorF:Elemental_Potion_III"
  | "melvorF:Elemental_Potion_IV"
  | "melvorF:Herblore_Potion_I"
  | "melvorF:Herblore_Potion_II"
  | "melvorF:Herblore_Potion_III"
  | "melvorF:Herblore_Potion_IV"
  | "melvorF:Ranged_Strength_Potion_I"
  | "melvorF:Ranged_Strength_Potion_II"
  | "melvorF:Ranged_Strength_Potion_III"
  | "melvorF:Ranged_Strength_Potion_IV"
  | "melvorF:Magic_Damage_Potion_I"
  | "melvorF:Magic_Damage_Potion_II"
  | "melvorF:Magic_Damage_Potion_III"
  | "melvorF:Magic_Damage_Potion_IV"
  | "melvorF:Diamond_Luck_Potion_I"
  | "melvorF:Diamond_Luck_Potion_II"
  | "melvorF:Diamond_Luck_Potion_III"
  | "melvorF:Diamond_Luck_Potion_IV"
  | "melvorF:Divine_Potion_I"
  | "melvorF:Divine_Potion_II"
  | "melvorF:Divine_Potion_III"
  | "melvorF:Divine_Potion_IV"
  | "melvorF:Lucky_Herb_Potion_I"
  | "melvorF:Lucky_Herb_Potion_II"
  | "melvorF:Lucky_Herb_Potion_III"
  | "melvorF:Lucky_Herb_Potion_IV"
  | "melvorF:Performance_Enhancing_Potion_I"
  | "melvorF:Performance_Enhancing_Potion_II"
  | "melvorF:Performance_Enhancing_Potion_III"
  | "melvorF:Performance_Enhancing_Potion_IV"
  | "melvorF:Necromancer_Potion_I"
  | "melvorF:Necromancer_Potion_II"
  | "melvorF:Necromancer_Potion_III"
  | "melvorF:Necromancer_Potion_IV"
  | "melvorF:Hinder_Potion_I"
  | "melvorF:Hinder_Potion_II"
  | "melvorF:Hinder_Potion_III"
  | "melvorF:Hinder_Potion_IV"
  | "melvorF:Famished_Potion_I"
  | "melvorF:Famished_Potion_II"
  | "melvorF:Famished_Potion_III"
  | "melvorF:Famished_Potion_IV"
  | "melvorF:Lethal_Toxins_Potion_I"
  | "melvorF:Lethal_Toxins_Potion_II"
  | "melvorF:Lethal_Toxins_Potion_III"
  | "melvorF:Lethal_Toxins_Potion_IV"
  | "melvorF:Secret_Stardust_Potion_I"
  | "melvorF:Secret_Stardust_Potion_II"
  | "melvorF:Secret_Stardust_Potion_III"
  | "melvorF:Secret_Stardust_Potion_IV"
  | "melvorTotH:Area_Control_Potion_I"
  | "melvorTotH:Area_Control_Potion_II"
  | "melvorTotH:Area_Control_Potion_III"
  | "melvorTotH:Area_Control_Potion_IV"
  | "melvorTotH:Adaptive_Defence_Potion_I"
  | "melvorTotH:Adaptive_Defence_Potion_II"
  | "melvorTotH:Adaptive_Defence_Potion_III"
  | "melvorTotH:Adaptive_Defence_Potion_IV"
  | "melvorTotH:Slayer_Bounty_Potion_I"
  | "melvorTotH:Slayer_Bounty_Potion_II"
  | "melvorTotH:Slayer_Bounty_Potion_III"
  | "melvorTotH:Slayer_Bounty_Potion_IV"
  | "melvorTotH:Holy_Bulwark_Potion_I"
  | "melvorTotH:Holy_Bulwark_Potion_II"
  | "melvorTotH:Holy_Bulwark_Potion_III"
  | "melvorTotH:Holy_Bulwark_Potion_IV"
  | "melvorTotH:Adaptive_Accuracy_Potion_I"
  | "melvorTotH:Adaptive_Accuracy_Potion_II"
  | "melvorTotH:Adaptive_Accuracy_Potion_III"
  | "melvorTotH:Adaptive_Accuracy_Potion_IV"
  | "melvorTotH:Reaper_Potion_I"
  | "melvorTotH:Reaper_Potion_II"
  | "melvorTotH:Reaper_Potion_III"
  | "melvorTotH:Reaper_Potion_IV"
  | "melvorTotH:Penetration_Potion_I"
  | "melvorTotH:Penetration_Potion_II"
  | "melvorTotH:Penetration_Potion_III"
  | "melvorTotH:Penetration_Potion_IV"
  | "melvorTotH:Critical_Strike_Potion_I"
  | "melvorTotH:Critical_Strike_Potion_II"
  | "melvorTotH:Critical_Strike_Potion_III"
  | "melvorTotH:Critical_Strike_Potion_IV"
  | "melvorTotH:Alchemic_Practice_Potion_I"
  | "melvorTotH:Alchemic_Practice_Potion_II"
  | "melvorTotH:Alchemic_Practice_Potion_III"
  | "melvorTotH:Alchemic_Practice_Potion_IV"
  | "melvorTotH:Gem_Detector_Potion_I"
  | "melvorTotH:Gem_Detector_Potion_II"
  | "melvorTotH:Gem_Detector_Potion_III"
  | "melvorTotH:Gem_Detector_Potion_IV"
  | "melvorTotH:Star_Seeker_Potion_I"
  | "melvorTotH:Star_Seeker_Potion_II"
  | "melvorTotH:Star_Seeker_Potion_III"
  | "melvorTotH:Star_Seeker_Potion_IV"
  | "melvorTotH:Traps_Potion_I"
  | "melvorTotH:Traps_Potion_II"
  | "melvorTotH:Traps_Potion_III"
  | "melvorTotH:Traps_Potion_IV"
  | "melvorTotH:Blacksmith_Potion_I"
  | "melvorTotH:Blacksmith_Potion_II"
  | "melvorTotH:Blacksmith_Potion_III"
  | "melvorTotH:Blacksmith_Potion_IV"
  | "melvorTotH:Enkindled_Yields_Potion_I"
  | "melvorTotH:Enkindled_Yields_Potion_II"
  | "melvorTotH:Enkindled_Yields_Potion_III"
  | "melvorTotH:Enkindled_Yields_Potion_IV"
  | "melvorTotH:Alt_Magic_Potion_I"
  | "melvorTotH:Alt_Magic_Potion_II"
  | "melvorTotH:Alt_Magic_Potion_III"
  | "melvorTotH:Alt_Magic_Potion_IV"
  | "melvorTotH:Multicooker_Potion_I"
  | "melvorTotH:Multicooker_Potion_II"
  | "melvorTotH:Multicooker_Potion_III"
  | "melvorTotH:Multicooker_Potion_IV"
  | "melvorTotH:Deadly_Toxins_Potion";
declare type ReadableItemID =
  | "melvorD:Message_In_A_Bottle"
  | "melvorD:Futures_Prophecy"
  | "melvorF:Unknown_Evil"
  | "melvorF:New_Dawn"
  | "melvorF:Merchants_Permit"
  | "melvorF:Beginning_Of_The_End"
  | "melvorF:Impending_Darkness";
declare type OpenableItemID =
  | "melvorD:Frozen_Chest"
  | "melvorD:Chest_of_Witwix"
  | "melvorD:Bird_Nest"
  | "melvorD:Treasure_Chest"
  | "melvorD:Egg_Chest"
  | "melvorD:Pirate_Booty"
  | "melvorD:Elite_Chest"
  | "melvorD:Spider_Chest"
  | "melvorD:Standard_Chest"
  | "melvorD:Bandit_Chest"
  | "melvorD:Christmas_Present_Yellow"
  | "melvorD:Christmas_Present_Blue"
  | "melvorD:Christmas_Present_Green"
  | "melvorD:Christmas_Present_White"
  | "melvorD:Christmas_Present_Purple"
  | "melvorD:Christmas_Present_General"
  | "melvorD:Locked_Chest"
  | "melvorD:Magic_Chest"
  | "melvorF:Herb_Sack"
  | "melvorF:Elder_Chest"
  | "melvorF:Crate_Of_Basic_Supplies"
  | "melvorF:Crate_Of_Food"
  | "melvorF:Stack_Of_Bones"
  | "melvorF:Pile_Of_Logs"
  | "melvorF:Pile_Of_Ores"
  | "melvorF:Chest_Of_Gems"
  | "melvorF:Air_Chest"
  | "melvorF:Water_Chest"
  | "melvorF:Earth_Chest"
  | "melvorF:Fire_Chest"
  | "melvorF:Scroll_of_Aeris"
  | "melvorF:Scroll_of_Glacia"
  | "melvorF:Scroll_of_Terran"
  | "melvorF:Scroll_of_Ragnar"
  | "melvorF:Miolite_Chest"
  | "melvorTotH:Raven_Nest"
  | "melvorTotH:Generous_Fire_Spirit"
  | "melvorTotH:Golden_Chest"
  | "melvorTotH:Crate_of_Lost_Supplies"
  | "melvorTotH:Ancient_Chest"
  | "melvorTotH:Burning_Chest"
  | "melvorTotH:Static_Chest"
  | "melvorTotH:Webbed_Chest"
  | "melvorTotH:Cursed_Chest"
  | "melvorTotH:Bone_Chest"
  | "melvorTotH:Exotic_Herb_Sack"
  | "melvorTotH:Lost_Chest";
declare type TokenItemID =
  | "melvorD:Mastery_Token_Cooking"
  | "melvorD:Mastery_Token_Farming"
  | "melvorD:Mastery_Token_Firemaking"
  | "melvorD:Mastery_Token_Fishing"
  | "melvorD:Mastery_Token_Mining"
  | "melvorD:Mastery_Token_Smithing"
  | "melvorD:Mastery_Token_Woodcutting"
  | "melvorF:Mastery_Token_Crafting"
  | "melvorF:Mastery_Token_Fletching"
  | "melvorF:Mastery_Token_Runecrafting"
  | "melvorF:Mastery_Token_Thieving"
  | "melvorF:Mastery_Token_Herblore"
  | "melvorF:Bank_Slot_Token"
  | "melvorF:Mastery_Token_Agility"
  | "melvorF:Mastery_Token_Summoning"
  | "melvorF:Mastery_Token_Astrology";
declare type CompostItemID = "melvorD:Compost" | "melvorD:Weird_Gloop";
declare type SkillID =
  | "melvorD:Attack"
  | "melvorD:Strength"
  | "melvorD:Defence"
  | "melvorD:Hitpoints"
  | "melvorD:Ranged"
  | "melvorD:Magic"
  | "melvorD:Prayer"
  | "melvorD:Slayer"
  | "melvorD:Woodcutting"
  | "melvorD:Fishing"
  | "melvorD:Firemaking"
  | "melvorD:Cooking"
  | "melvorD:Mining"
  | "melvorD:Smithing"
  | "melvorD:Thieving"
  | "melvorD:Farming"
  | "melvorD:Fletching"
  | "melvorD:Crafting"
  | "melvorD:Runecrafting"
  | "melvorD:Herblore"
  | "melvorD:Agility"
  | "melvorD:Summoning"
  | "melvorD:Astrology"
  | "melvorD:Township";
declare type PlayerModifierData = PlayerModifierData1 & {
  /**
   * +${value}% Chance To Double Loot in Combat
   */
  increasedChanceToDoubleLootCombat?: number;
  /**
   * +${value}% Slayer Coins
   */
  increasedSlayerCoins?: number;
  /**
   * +${value}% Global GP (except Item Sales)
   */
  increasedGPGlobal?: number;
  /**
   * +${value}% GP From Monsters
   */
  increasedGPFromMonsters?: number;
  /**
   * +${value} GP From Monsters
   */
  increasedGPFromMonstersFlat?: number;
  /**
   * +${value}% GP From Thieving
   */
  increasedGPFromThieving?: number;
  /**
   * +${value} GP From Thieving
   */
  increasedGPFromThievingFlat?: number;
  /**
   * +${value}% GP From Agility
   */
  increasedGPFromAgility?: number;
  /**
   * -${value}% GP From Agility
   */
  decreasedGPFromAgility?: number;
  /**
   * +${value}% Damage To Bosses
   */
  increasedDamageToBosses?: number;
  /**
   * +${value}% Damage To Slayer Tasks
   */
  increasedDamageToSlayerTasks?: number;
  /**
   * +${value}% Damage To Slayer Area Monsters
   */
  increasedDamageToSlayerAreaMonsters?: number;
  /**
   * +${value}% Damage To Combat Area Monsters
   */
  increasedDamageToCombatAreaMonsters?: number;
  /**
   * +${value}% Damage To Dungeon Monsters
   */
  increasedDamageToDungeonMonsters?: number;
  /**
   * +${value}% Damage To All Monsters
   */
  increasedDamageToAllMonsters?: number;
  /**
   * +${value}% Auto Eat Efficiency
   */
  increasedAutoEatEfficiency?: number;
  /**
   * +${value}% Auto Eat Threshold
   */
  increasedAutoEatThreshold?: number;
  /**
   * +${value}% Auto Eat HP Limit
   */
  increasedAutoEatHPLimit?: number;
  /**
   * +${value}% Food Healing Value
   */
  increasedFoodHealingValue?: number;
  /**
   * +${value}% Chance To Preserve Prayer Points
   */
  increasedChanceToPreservePrayerPoints?: number;
  /**
   * -${value} Prayer Point Cost for Prayers
   */
  increasedFlatPrayerCostReduction?: number;
  /**
   * +${value}% Ammo Preservation
   */
  increasedAmmoPreservation?: number;
  /**
   * +${value}% Rune Preservation
   */
  increasedRunePreservation?: number;
  /**
   * +${value} Hidden ${skillName} Level
   */
  increasedHiddenSkillLevel?: SkillModDataArray;
  /**
   * +${value}% Flat Slayer Area Effect Negation
   */
  increasedSlayerAreaEffectNegationFlat?: number;
  /**
   * -${value}s Monster Respawn Timer
   */
  decreasedMonsterRespawnTimer?: number;
  /**
   * -${value}% Chance To Double Loot in Combat
   */
  decreasedChanceToDoubleLootCombat?: number;
  /**
   * -${value}% Slayer Coins
   */
  decreasedSlayerCoins?: number;
  /**
   * -${value}% Global GP (except Item Sales)
   */
  decreasedGPGlobal?: number;
  /**
   * -${value}% GP From Monsters
   */
  decreasedGPFromMonsters?: number;
  /**
   * -${value} GP From Monsters
   */
  decreasedGPFromMonstersFlat?: number;
  /**
   * -${value}% Damage To Bosses
   */
  decreasedDamageToBosses?: number;
  /**
   * -${value}% Damage To Slayer Tasks
   */
  decreasedDamageToSlayerTasks?: number;
  /**
   * -${value}% Damage To Slayer Area Monsters
   */
  decreasedDamageToSlayerAreaMonsters?: number;
  /**
   * -${value}% Damage To Combat Area Monsters
   */
  decreasedDamageToCombatAreaMonsters?: number;
  /**
   * -${value}% Damage To Dungeon Monsters
   */
  decreasedDamageToDungeonMonsters?: number;
  /**
   * -${value}% Damage To All Monsters
   */
  decreasedDamageToAllMonsters?: number;
  /**
   * -${value}% Auto Eat Efficiency
   */
  decreasedAutoEatEfficiency?: number;
  /**
   * -${value}% Auto Eat Threshold
   */
  decreasedAutoEatThreshold?: number;
  /**
   * -${value}% Auto Eat HP Limit
   */
  decreasedAutoEatHPLimit?: number;
  /**
   * -${value}% Food Healing Value
   */
  decreasedFoodHealingValue?: number;
  /**
   * -${value}% Chance To Preserve Prayer Points
   */
  decreasedChanceToPreservePrayerPoints?: number;
  /**
   * +${value} Prayer Point Cost for Prayers
   */
  decreasedFlatPrayerCostReduction?: number;
  /**
   * -${value}% Ammo Preservation
   */
  decreasedAmmoPreservation?: number;
  /**
   * -${value}% Rune Preservation
   */
  decreasedRunePreservation?: number;
  /**
   * -${value} Hidden ${skillName} Level
   */
  decreasedHiddenSkillLevel?: SkillModDataArray;
  /**
   * +${value}s Monster Respawn Timer
   */
  increasedMonsterRespawnTimer?: number;
  /**
   * -${value}% Flat Slayer Area Effect Negation
   */
  decreasedSlayerAreaEffectNegationFlat?: number;
  /**
   * +${value}% GP From Sales
   */
  increasedGPFromSales?: number;
  /**
   * +${value} Bank Space
   */
  increasedBankSpace?: number;
  /**
   * +${value} Bank Space from Shop
   */
  increasedBankSpaceShop?: number;
  /**
   * +${value}% Chance To Preserve Potion Charge
   */
  increasedChanceToPreservePotionCharge?: number;
  /**
   * -${value}% GP From Sales
   */
  decreasedGPFromSales?: number;
  /**
   * -${value} Bank Space
   */
  decreasedBankSpace?: number;
  /**
   * -${value} Bank Space from Shop
   */
  decreasedBankSpaceShop?: number;
  /**
   * -${value}% Chance To Preserve Potion Charge
   */
  decreasedChanceToPreservePotionCharge?: number;
  /**
   * -${value}s ${skillName} Interval
   */
  decreasedSkillInterval?: SkillModDataArray;
  /**
   * -${value}% ${skillName} Interval
   */
  decreasedSkillIntervalPercent?: SkillModDataArray;
  /**
   * +${value}% Global Mastery XP
   */
  increasedGlobalMasteryXP?: number;
  /**
   * +${value}% Global Skill XP
   */
  increasedGlobalSkillXP?: number;
  /**
   * -${value}% Global Skill XP
   */
  decreasedGlobalSkillXP?: number;
  /**
   * +${value}% ${skillName} Mastery XP
   */
  increasedMasteryXP?: SkillModDataArray;
  /**
   * +${value}% ${skillName} Skill XP
   */
  increasedSkillXP?: SkillModDataArray;
  /**
   * +${value} Mining Node HP
   */
  increasedMiningNodeHP?: number;
  /**
   * +${value}s ${skillName} Interval
   */
  increasedSkillInterval?: SkillModDataArray;
  /**
   * +${value}% ${skillName} Interval
   */
  increasedSkillIntervalPercent?: SkillModDataArray;
  /**
   * -${value}% Global Mastery XP
   */
  decreasedGlobalMasteryXP?: number;
  /**
   * -${value}% ${skillName} Mastery XP
   */
  decreasedMasteryXP?: SkillModDataArray;
  /**
   * -${value}% ${skillName} Skill XP
   */
  decreasedSkillXP?: SkillModDataArray;
  /**
   * -${value} Mining Node HP
   */
  decreasedMiningNodeHP?: number;
  /**
   * -${value}% GP From Thieving
   */
  decreasedGPFromThieving?: number;
  /**
   * -${value} GP From Thieving
   */
  decreasedGPFromThievingFlat?: number;
  /**
   * ${value} Dungeon Equipment Swapping
   */
  dungeonEquipmentSwapping?: number;
  /**
   * +${value} Equipment Sets
   */
  increasedEquipmentSets?: number;
  /**
   * ${value} Auto Slayer Unlocked
   */
  autoSlayerUnlocked?: number;
  /**
   * +${value} Tree Cut Limit
   */
  increasedTreeCutLimit?: number;
  /**
   * +${value}% Chance to Preserve Resources in Skills
   */
  increasedGlobalPreservationChance?: number;
  /**
   * -${value}% Chance to Preserve Resources in Skills
   */
  decreasedGlobalPreservationChance?: number;
  /**
   * +${value}% Farming Yield
   */
  increasedFarmingYield?: number;
  /**
   * -${value}% Farming Yield
   */
  decreasedFarmingYield?: number;
  /**
   * +${value}% Slayer Task Length/Qty
   */
  increasedSlayerTaskLength?: number;
  /**
   * -${value}% Slayer Task Length/Qty
   */
  decreasedSlayerTaskLength?: number;
  /**
   * +${value}% Chance to Double Items in ${skillName}
   */
  increasedChanceToDoubleItemsSkill?: SkillModDataArray;
  /**
   * -${value}% Chance to Double Items in ${skillName}
   */
  decreasedChanceToDoubleItemsSkill?: SkillModDataArray;
  /**
   * +${value}% Chance to Double Items Globally
   */
  increasedChanceToDoubleItemsGlobal?: number;
  /**
   * -${value}% Chance to Double Items Globally
   */
  decreasedChanceToDoubleItemsGlobal?: number;
  /**
   * +${value}% Chance to Preserve Resources in ${skillName}
   */
  increasedSkillPreservationChance?: SkillModDataArray;
  /**
   * -${value}% Chance to Preserve Resources in ${skillName}
   */
  decreasedSkillPreservationChance?: SkillModDataArray;
  /**
   * +${value}% Chance to Double Ores in Mining
   */
  increasedChanceToDoubleOres?: number;
  /**
   * -${value}% Chance to Double Ores in Mining
   */
  decreasedChanceToDoubleOres?: number;
  /**
   * -${value}% Golbin Raid Wave Skip Cost
   */
  golbinRaidWaveSkipCostReduction?: number;
  /**
   * +${value}% Maximum Ammo in Golbin Raid
   */
  golbinRaidIncreasedMaximumAmmo?: number;
  /**
   * +${value}% Maximum Runes in Golbin Raid
   */
  golbinRaidIncreasedMaximumRunes?: number;
  /**
   * +${value} Minimum Food in Golbin Raid
   */
  golbinRaidIncreasedMinimumFood?: number;
  /**
   * +${value} Prayer Levels in Golbin Raid
   */
  golbinRaidIncreasedPrayerLevel?: number;
  /**
   * +${value} Starting Prayer Points in Golbin Raid
   */
  golbinRaidIncreasedPrayerPointsStart?: number;
  /**
   * +${value} Prayer Points per Wave in Golbin Raid
   */
  golbinRaidIncreasedPrayerPointsWave?: number;
  /**
   * +${value}% Starting Runes in Golbin Raid
   */
  golbinRaidIncreasedStartingRuneCount?: number;
  /**
   * Unlocked Passive Slot in Golbin Raid
   */
  golbinRaidPassiveSlotUnlocked?: number;
  /**
   * Unlocked Prayer in Golbin Raid
   */
  golbinRaidPrayerUnlocked?: number;
  /**
   * Start with ${value} in Golbin Raid
   */
  golbinRaidStartingWeapon?: number;
  /**
   * +${value} Charges per Potion
   */
  increasedPotionChargesFlat?: number;
  /**
   * -${value} Charges per Potion
   */
  decreasedPotionChargesFlat?: number;
  /**
   * +${value}% Chance for Bird Nests to drop in Woodcutting
   */
  increasedBirdNestDropRate?: number;
  /**
   * -${value}% Chance for Bird Nests to drop in Woodcutting
   */
  decreasedBirdNestDropRate?: number;
  /**
   * +${value}% Chance to deal no Damage to an Ore or Essence Mining Node
   */
  increasedChanceNoDamageMining?: number;
  /**
   * -${value}% Chance to deal no Damage to an Ore or Essence Mining Node
   */
  decreasedChanceNoDamageMining?: number;
  /**
   * +${value}% Chance to receive a Gold Bar when Smithing Silver Bars
   */
  increasedSeeingGoldChance?: number;
  /**
   * -${value}% Chance to receive a Gold Bar when Smithing Silver Bars
   */
  decreasedSeeingGoldChance?: number;
  /**
   * +${value}% Chance to Double Farming Yield
   */
  increasedChanceDoubleHarvest?: number;
  /**
   * -${value}% Chance to Double Farming Yield
   */
  decreasedChanceDoubleHarvest?: number;
  /**
   * +${value}% Chance to receive random Elemental Runes from Runecrafting when creating Runes
   */
  increasedChanceForElementalRune?: number;
  /**
   * -${value}% Chance to receive random Elemental Runes from Runecrafting when creating Runes
   */
  decreasedChanceForElementalRune?: number;
  /**
   * +${value} Elemental Runes received from Runecrafting when creating Runes
   */
  increasedElementalRuneGain?: number;
  /**
   * -${value} Elemental Runes received from Runecrafting when creating Runes
   */
  decreasedElementalRuneGain?: number;
  /**
   * +${value}% Chance to receive a Random Tier of the same Potion in Herblore
   */
  increasedChanceRandomPotionHerblore?: number;
  /**
   * -${value}% Chance to receive a Random Tier of the same Potion in Herblore
   */
  decreasedChanceRandomPotionHerblore?: number;
  /**
   * Bonfires in Firemaking require no logs to light. Automatically relights Bonfires when depleted
   */
  freeBonfires?: number;
  /**
   * +${value}% Alt. Magic Skill XP
   */
  increasedAltMagicSkillXP?: number;
  /**
   * -${value}% Alt. Magic Skill XP
   */
  decreasedAltMagicSkillXP?: number;
  /**
   * +${value}% chance to convert combat seed drops to herbs
   */
  increasedChanceToConvertSeedDrops?: number;
  /**
   * +${value}% Movement Speed
   */
  aprilFoolsIncreasedMovementSpeed?: number;
  /**
   * -${value}% Movement Speed
   */
  aprilFoolsDecreasedMovementSpeed?: number;
  /**
   * +${value}% Rune cost for Teleportation Spells
   */
  aprilFoolsIncreasedTeleportCost?: number;
  /**
   * -${value}% Rune cost for Teleportation Spells
   */
  aprilFoolsDecreasedTeleportCost?: number;
  /**
   * +${value} days next Major Update has been delayed
   */
  aprilFoolsIncreasedUpdateDelay?: number;
  /**
   * -${value} days next Major Update has been delayed
   */
  aprilFoolsDecreasedUpdateDelay?: number;
  /**
   * +${value} Lemon Gang reputation points
   */
  aprilFoolsIncreasedLemonGang?: number;
  /**
   * -${value} Lemon Gang reputation points
   */
  aprilFoolsDecreasedLemonGang?: number;
  /**
   * +${value} Carrot Gang reputation points
   */
  aprilFoolsIncreasedCarrotGang?: number;
  /**
   * -${value} Carrot Gang reputation points
   */
  aprilFoolsDecreasedCarrotGang?: number;
  /**
   * +${value} GP Gained on successful Enemy Hit
   */
  increasedGPOnEnemyHit?: number;
  /**
   * -${value} GP Gained on successful Enemy Hit
   */
  decreasedGPOnEnemyHit?: number;
  /**
   * Create +${value} Additional Runes of the same type in Runecrafting
   */
  increasedAdditionalRunecraftCountRunes?: number;
  /**
   * Create -${value} Additional Runes of the same type in Runecrafting
   */
  decreasedAdditionalRunecraftCountRunes?: number;
  /**
   * +${value}% of enemy's highest evasion rating as GP on kill
   */
  increasedGPFromMonstersFlatBasedOnEvasion?: number;
  /**
   * +${value}% of melee damage dealt gained as GP
   */
  increasedGPPerMeleeDamage?: number;
  /**
   * +${value}% of ranged damage dealt gained as GP
   */
  increasedGPPerRangedDamage?: number;
  /**
   * +${value}% of magic damage dealt gained as GP
   */
  increasedGPPerMagicDamage?: number;
  /**
   * +${value}% GP from Slayer Task monsters
   */
  increasedGPFromSlayerTaskMonsters?: number;
  /**
   * +${value} GP gained per your damage reduction when hit by an enemy (Procs once per Enemy Attack Turn)
   */
  increasedGPWhenHitBasedOnDR?: number;
  /**
   * +${value}% of passively regenerated health gained as GP
   */
  increasedGPOnRegenBasedOnHPGain?: number;
  /**
   * +${value}% GP from burning Monsters
   */
  increasedGPFromBurningMonsters?: number;
  /**
   * x${value} the effects of the Occultist Familiar when you are at full hp
   */
  summoningSynergy_1_2?: number;
  /**
   * +${value} Magic Defence Bonus
   */
  increasedFlatMagicDefenceBonus?: number;
  /**
   * -${value}% Slayer Task monster Accuracy Rating
   */
  decreasedSlayerTaskMonsterAccuracy?: number;
  /**
   * Gain Melee and Ranged Defence Bonus equal to damage reduction. (e.g. 50% damage reduction grants +50 melee and ranged defence bonus)
   */
  increasedMeleeRangedDefenceBonusBasedOnDR?: number;
  /**
   * +${value}% hitpoint regeneration when the enemy has more combined evasion ratings than the player
   */
  increasedHPRegenWhenEnemyHasMoreEvasion?: number;
  /**
   * +${value} Melee, Ranged and Magic Defence Bonuses when burning
   */
  summoningSynergy_1_15?: number;
  /**
   * +${value}% of lifesteal healing gained as Slayer Coins
   */
  increasedSCfromLifesteal?: number;
  /**
   * Heal for ${value}% of your damage reduction on attacking an enemy (once per turn)
   */
  increasedHealingOnAttackBasedOnDR?: number;
  /**
   * +${value}% Lifesteal for Summoning attacks
   */
  increasedSummoningAttackLifesteal?: number;
  /**
   * +${value}% chance to receive a gem per Woodcutting action
   */
  increasedWoodcuttingGemChance?: number;
  /**
   * +${value}% Special Item chance in Fishing
   */
  increasedBonusFishingSpecialChance?: number;
  /**
   * +${value}% chance to receive +1 cooked food. Cannot be doubled
   */
  summoningSynergy_3_9?: number;
  /**
   * +${value}% chance to preserve resources in Runecrafting when making staves
   */
  increasedRunecraftingStavePreservation?: number;
  /**
   * +${value} Bird Nest when thieving the lumberjack, but gain no GP
   */
  summoningSynergy_Ent_Leprechaun?: number;
  /**
   * +${value}% chance for Silver or Gold Jewelry to drop instead of a Bird's Nest from Woodcutting
   */
  increasedWoodcuttingJewelryChance?: number;
  /**
   * +${value}% chance to receive +1 log from Woodcutting or +1 item from Smithing
   */
  summoningSynergy_3_17?: number;
  /**
   * +${value} minimum Bird Nests recieved from Woodcutting when the Bird Nest Potion is active
   */
  increasedMinimumBirdNestsWhenPotionActive?: number;
  /**
   * +${value}% of Woodcutting XP gained as Firemaking XP, but chance to double logs is halved
   */
  summoningSynergy_3_19?: number;
  /**
   * +${value}% chance to get a second gem (that can be a different type) when receiving a gem from Mining
   */
  summoningSynergy_4_5?: number;
  /**
   * -${value}% Cooking success chance cap
   */
  decreasedCookingSuccessCap?: number;
  /**
   * x${value} Rune Essence received from Mining
   */
  doubleRuneEssenceMining?: number;
  /**
   * +${value}% chance to receive a gem while thieving the Miner
   */
  summoningSynergy_Mole_Leprechaun?: number;
  /**
   * x${value} Gold and Silver Ore recieved from Mining
   */
  doubleSilverGoldMining?: number;
  /**
   * +${value}% chance to recieve the bar version of an ore when Mining
   */
  increasedMiningBarChance?: number;
  /**
   * +${value} Mining node HP when using Perfect Swing Potions
   */
  increasedMiningNodeHPWithPerfectSwing?: number;
  /**
   * +${value}% chance to receive a Diamond when burning a log in Firemaking
   */
  summoningSynergy_4_19?: number;
  /**
   * +${value}% chance to gain 1 cooked version of a fish when Fishing
   */
  increasedFishingCookedChance?: number;
  /**
   * +${value} base quantity when creating Combination runes that require Water Runes in Runecrafting
   */
  increasedRunecraftingWaterComboRunes?: number;
  /**
   * +50% Thieving Interval and +2 base item quantity when thieving the Fisherman
   */
  summoningSynergy_Octopus_Leprechaun?: number;
  /**
   * +${value}% chance to gain a random gem when creating jewelry in Crafting
   */
  increasedCraftingJewelryRandomGemChance?: number;
  /**
   * +${value}% chance to preserve resources in Smithing when making Dragon Gear
   */
  increasedSmithingDragonGearPreservation?: number;
  /**
   * +${value}% Fisherman's Potion charges
   */
  increasedFishermansPotionCharges?: number;
  /**
   * +${value} stab, slash, block, and melee strength bonus when fighting a ranged enemy
   */
  summoningSynergy_6_7?: number;
  /**
   * +${value}% of Magic Maximum Hit added to Minimum Hit when fighting Slayer Task monsters
   */
  increasedMagicMinHitBasedOnMaxHitSlayerTask?: number;
  /**
   * +${value}% of Melee Maximum Hit added to Minimum Hit when fighting Slayer Task monsters
   */
  increasedMeleeMaxHitBasedOnMaxHitSlayerTask?: number;
  /**
   * +${value}% damage reduction when fighting a ranged enemy
   */
  summoningSynergy_6_13?: number;
  /**
   * +${value}% of Melee max hit as flat hitpoint regeneration
   */
  increasedFlatHPRegenBasedOnMeleeMaxHit?: number;
  /**
   * x${value} the effects of the Minotaur Familiar when the enemy is burning
   */
  summoningSynergy_6_15?: number;
  /**
   * +${value} Ranged Accuracy and Strength Bonus when fighting a magic enemy
   */
  summoningSynergy_7_8?: number;
  /**
   * +${value}% of Ranged Maximum Hit added to Minimum Hit when fighting Slayer Task monsters
   */
  increasedRangedMaxHitBasedOnMaxHitSlayerTask?: number;
  /**
   * +${value}% damage reduction when fighting a magic enemy
   */
  summoningSynergy_7_13?: number;
  /**
   * +${value}% of Ranged max hit as flat hitpoints regeneration
   */
  increasedFlatHPRegenBasedOnRangedMaxHit?: number;
  /**
   * +${value}% chance to apply burn when attacking with Ranged
   */
  increasedChanceToApplyBurnWithRanged?: number;
  /**
   * +${value}% of Magic Damage Dealt against Slayer Task monsters gained as Slayer Coins
   */
  increasedSlayerCoinsPerMagicDamageSlayerTask?: number;
  /**
   * +${value}% damage reduction when fighting a melee enemy
   */
  summoningSynergy_8_13?: number;
  /**
   * +${value}% of Magic max hit as flat hitpoints regeneration
   */
  increasedFlatHPRegenBasedOnMagicMaxHit?: number;
  /**
   * +${value}% chance to preserve resources when Runecrafting runes
   */
  increasedRunecraftingEssencePreservation?: number;
  /**
   * Take no damage when stunned by the Chef in Thieving
   */
  thievingChefNoDamage?: number;
  /**
   * -${value} Dragonhide costs when Crafting (Cannot be reduced below 1)
   */
  decreasedFlatCraftingDragonhideCost?: number;
  /**
   * -${value}s Skill Interval for Cooking & Smithing
   */
  summoningSynergy_9_17?: number;
  /**
   * +${value}% Generous Cook Potion charges
   */
  increasedGenerousCookPotionCharges?: number;
  /**
   * 0
   */
  summoningSynergy_9_19?: number;
  /**
   * +${value} Rune Essence gained when Thieving the Miner
   */
  increasedRuneEssenceThievingMiner?: number;
  /**
   * +${value}% chance to double items in Crafting when making Leather or Dragonhide armour
   */
  increasedChanceToDoubleLeatherDragonhideCrafting?: number;
  /**
   * +${value}% Smithing & Runecrafting Preservation Chance
   */
  summoningSynergy_10_17?: number;
  /**
   * Gain a chance to receive random combination runes when recieving random elemental runes equal to the chance to receive random elemental runes from Runecrafting
   */
  giveRandomComboRunesRunecrafting?: number;
  /**
   * +${value} Fire Runes gained when Runecrafting elemental runes
   */
  increasedFireRunesWhenMakingElementalRunes?: number;
  /**
   * Automatically sell Common Drops from Thieving for ${value}x their base sale price
   */
  increasedThievingAutoSellPrice?: number;
  /**
   * +${value}% chance to receive a random bar when gaining a Common Drop from Thieving the Miner
   */
  increasedRandomBarChanceThievingMiner?: number;
  /**
   * +${value}% chance to receive a Herb Sack when gaining a Common Drop from Thieving the Farmer
   */
  increasedHerbSackChanceThievingFarmer?: number;
  /**
   * +50% chance to gain 100% GP, +35% chance to gain 4x items and +15% chance to gain no items or gp from Thieving
   */
  summoningSynergy_Leprechaun_Devil?: number;
  /**
   * +${value}% Damage Reduction when fighting a Slayer Task monster
   */
  increasedDamageReductionAgainstSlayerTasks?: number;
  /**
   * +${value}% Hitpoint Regeneration when fighting Slayer Task monsters
   */
  increasedHitpointRegenerationAgainstSlayerTasks?: number;
  /**
   * +${value}% hitpoint regeneration when below 75% of max hitpoints
   */
  summoningSynergy_13_14?: number;
  /**
   * +${value}% chance to preserve resources in Crafting when making jewelry
   */
  increasedCraftingJewelryPreservation?: number;
  /**
   * +${value}% Crafting Potion charges
   */
  increasedCraftingPotionCharges?: number;
  /**
   * +${value}% of Log base sale price granted as GP when Burnt in Firemaking
   */
  increasedFiremakingLogGP?: number;
  /**
   * x2 Silver and Gold bars recieved from Smithing when using Seeing Gold Potions
   */
  doubleSilverGoldSmithingWithSeeingGold?: number;
  /**
   * -${value} Coal Ore Cost when Smithing
   */
  decreasedFlatSmithingCoalCost?: number;
  /**
   * +${value}% Firemaking XP and +100% bonfire duration when using Controlled Heat Potions
   */
  summoningSynergy_Bear_Devil?: number;
  /**
   * +${value}% Chance to gain +1 additional resource in ${skillName}. Cannot be doubled
   */
  increasedChanceAdditionalSkillResource?: SkillModDataArray;
  /**
   * -${value}% Chance to gain +1 additional resource in ${skillName}. Cannot be doubled
   */
  decreasedChanceAdditionalSkillResource?: SkillModDataArray;
  /**
   * +${value}% Melee Strength Bonus from Equipment
   */
  increasedMeleeStrengthBonus?: number;
  /**
   * +${value}% Ranged Strength Bonus from Equipment
   */
  increasedRangedStrengthBonus?: number;
  /**
   * +${value}% Magic Damage Bonus from Equipment
   */
  increasedMagicDamageBonus?: number;
  /**
   * -${value}% Melee Strength Bonus from Equipment
   */
  decreasedMeleeStrengthBonus?: number;
  /**
   * -${value}% Ranged Strength Bonus from Equipment
   */
  decreasedRangedStrengthBonus?: number;
  /**
   * -${value}% Magic Damage Bonus from Equipment
   */
  decreasedMagicDamageBonus?: number;
  /**
   * +${value}% Agility Obstacle Build Costs
   */
  increasedAgilityObstacleCost?: number;
  /**
   * -${value}% Agility Obstacle Build Costs
   */
  decreasedAgilityObstacleCost?: number;
  /**
   * 0
   */
  decreasedSecondaryFoodBurnChance?: number;
  /**
   * Composting crops in Farming is free
   */
  freeCompost?: number;
  /**
   * +${value}% Chance to preserve Compost or Weird Gloop applied to Farming Plots when harvesting
   */
  increasedCompostPreservationChance?: number;
  /**
   * ${value}% increased chance to receive Global Rare Items, Mastery Tokens, Bird Nests from Woodcutting, Gems from Mining, and Coal from Firemaking
   */
  increasedOffItemChance?: number;
  /**
   * +${value}% chance to receive coal when burning logs in Firemaking
   */
  increasedFiremakingCoalChance?: number;
  /**
   * x${value} Items received from ${skillName}
   */
  doubleItemsSkill?: SkillModDataArray;
  /**
   * +${value}% Chance to receive gems from Mining (Does not work for Rune Essence)
   */
  increasedMiningGemChance?: number;
  /**
   * x${value} Ores received from Mining
   */
  doubleOresMining?: number;
  /**
   * +${value} Coal Ore per Ore Mined. (Item doubling does not apply)
   */
  increasedBonusCoalMining?: number;
  /**
   * -${value}% Coal Costs for Smithing
   */
  decreasedSmithingCoalCost?: number;
  /**
   * if equipped, something special might drop while training Skills.
   */
  allowSignetDrops?: number;
  /**
   * 1% chance to receive ${value} Coal when completing a dungeon
   */
  bonusCoalOnDungeonCompletion?: number;
  /**
   * +${value}% to effective Mastery Pool progress
   */
  increasedMasteryPoolProgress?: number;
  /**
   * Rune providing items provide ${value}x as many runes
   */
  increasedRuneProvision?: number;
  /**
   * Bypass Slayer Area item requirements for areas that require less than level 100 Slayer
   */
  bypassSlayerItems?: number;
  /**
   * Items are not lost on death
   */
  itemProtection?: number;
  /**
   * +${value}% redemption threshold
   */
  increasedRedemptionThreshold?: number;
  /**
   * +${value}% of max hitpoints healed on redemption
   */
  increasedRedemptionPercent?: number;
  /**
   * Combat loot is automatically collected
   */
  autoLooting?: number;
  /**
   * Bones are automatically buried for ${value}% of their Prayer Point value
   */
  autoBurying?: number;
  /**
   * The Protect Item Prayer costs nothing
   */
  freeProtectItem?: number;
  /**
   * +${value} Shard Cost when creating Familiars in Summoning
   */
  increasedSummoningShardCost?: number;
  /**
   * -${value} Shard Cost when creating Familiars in Summoning
   */
  decreasedSummoningShardCost?: number;
  /**
   * +${value} Base Quantity for Summoning Tablet Creation
   */
  increasedSummoningCreationCharges?: number;
  /**
   * -${value} Base Quantity for Summoning Tablet Creation
   */
  decreasedSummoningCreationCharges?: number;
  /**
   * +${value}% Chance to preserve Summoning Charges
   */
  increasedSummoningChargePreservation?: number;
  /**
   * -${value}% Chance to preserve Summoning Charges
   */
  decreasedSummoningChargePreservation?: number;
  /**
   * -${value}% Prayer Point Cost for Prayers
   */
  decreasedPrayerCost?: number;
  /**
   * +${value}% Prayer Point Cost for Prayers
   */
  increasedPrayerCost?: number;
  /**
   * +${value}% GP per damage dealt for every 1M GP owned
   */
  increasedGPMultiplierPer1MGP?: number;
  /**
   * +${value}% maximum gp per damage dealt
   */
  increasedGPMultiplierCap?: number;
  /**
   * +${value}% minimum gp per damage dealt
   */
  increasedGPMultiplierMin?: number;
  /**
   * Magic Curses and Auroras can be used without a Magic weapon
   */
  allowAttackAugmentingMagic?: number;
  /**
   * ${value} Auto Equip Food Unlocked
   */
  autoEquipFoodUnlocked?: number;
  /**
   * ${value} Auto Swap Food Unlocked
   */
  autoSwapFoodUnlocked?: number;
  /**
   * +${value}% chance to successfully Cook an item
   */
  increasedChanceSuccessfulCook?: number;
  /**
   * -${value}% chance to successfully Cook an item
   */
  decreasedChanceSuccessfulCook?: number;
  /**
   * +${value}% Global Perfect Cook chance
   */
  increasedChancePerfectCookGlobal?: number;
  /**
   * -${value}% Global Perfect Cook chance
   */
  decreasedChancePerfectCookGlobal?: number;
  /**
   * +${value}% Perfect Cook chance for items cooked on Cooking Fire
   */
  increasedChancePerfectCookFire?: number;
  /**
   * -${value}% Perfect Cook chance for items cooked on Cooking Fire
   */
  decreasedChancePerfectCookFire?: number;
  /**
   * +${value}% Perfect Cook chance for items cooked on Furnace
   */
  increasedChancePerfectCookFurnace?: number;
  /**
   * -${value}% Perfect Cook chance for items cooked on Furnace
   */
  decreasedChancePerfectCookFurnace?: number;
  /**
   * +${value}% Perfect Cook chance for items cooked on Pot
   */
  increasedChancePerfectCookPot?: number;
  /**
   * -${value}% Perfect Cook chance for items cooked on Pot
   */
  decreasedChancePerfectCookPot?: number;
  /**
   * +${value} Stealth while Thieving
   */
  increasedThievingStealth?: number;
  /**
   * -${value} Stealth while Thieving
   */
  decreasedThievingStealth?: number;
  /**
   * +${value}% Rune Preservation for Alt. Magic Spells
   */
  increasedAltMagicRunePreservation?: number;
  /**
   * -${value}% Rune Preservation for Alt. Magic Spells
   */
  decreasedAltMagicRunePreservation?: number;
  /**
   * +${value}% minimum GP from Thieving
   */
  increasedMinThievingGP?: number;
  /**
   * -${value}% minimum GP from Thieving
   */
  decreasedMinThievingGP?: number;
  /**
   * +${value}% chance to receive Special Items from Fishing
   */
  increasedFishingSpecialChance?: number;
  /**
   * -${value}% chance to receive Special Items from Fishing
   */
  decreasedFishingSpecialChance?: number;
  /**
   * -${value} seed cost to plant Allotments in Farming
   */
  decreasedAllotmentSeedCost?: number;
  /**
   * +${value} seed cost to plant Allotments in Farming
   */
  increasedAllotmentSeedCost?: number;
  /**
   * +${value}% Summoning Max Hit
   */
  increasedSummoningMaxHit?: number;
  /**
   * -${value}% Summoning Max Hit
   */
  decreasedSummoningMaxHit?: number;
  /**
   * Grants Mastery Pool XP equal to ${value}% of the maximum Mastery Pool XP for the respective skill
   */
  masteryToken?: SkillModDataArray;
  /**
   * +${value}% chance to receive a Diamond per action in Firemaking (Cannot be doubled)
   */
  increasedChanceForDiamondFiremaking?: number;
  /**
   * -${value}% chance to receive a Diamond per action in Firemaking (Cannot be doubled)
   */
  decreasedChanceForDiamondFiremaking?: number;
  /**
   * +${value}% chance to apply poison when hitting with a Melee or Ranged attack
   */
  increasedNonMagicPoisonChance?: number;
  /**
   * +${value}% Chance to Preserve Food when eaten
   */
  increasedChanceToPreserveFood?: number;
  /**
   * No description
   */
  allowLootContainerStacking?: number;
  /**
   * No description
   */
  infiniteLootContainer?: number;
  /**
   * +${value} to base drop quantity of Stardust and Golden Stardust from Astrology
   */
  increasedBaseStardustDropQty?: number;
  /**
   * +${value}% GP from Firemaking
   */
  increasedGPFromFiremaking?: number;
  /**
   * -${value}% GP from Firemaking
   */
  decreasedGPFromFiremaking?: number;
  /**
   * Big Ol Ron is active
   */
  bigRon?: number;
  /**
   * +${value}% Woodcutting XP added as Firemaking XP
   */
  increasedWoodcuttingXPAddedAsFiremakingXP?: number;
  /**
   * +${value} Coal Ore when failing to Cook Food
   */
  coalGainedOnCookingFailure?: number;
  /**
   * Chance to double Logs while Woodcutting is halved
   */
  halvedWoodcuttingDoubleChance?: number;
  /**
   * +${value} harvest quantity from Farming (Cannot be doubled or multiplied)
   */
  increasedFlatFarmingYield?: number;
  /**
   * -${value}% Woodcutting XP added as Firemaking XP
   */
  decreasedWoodcuttingXPAddedAsFiremakingXP?: number;
  /**
   * +${value}% chance to receive +1 Ore in Mining (Cannot be doubled)
   */
  increasedChanceForOneExtraOre?: number;
  /**
   * -${value}% chance to receive +1 Ore in Mining (Cannot be doubled)
   */
  decreasedChanceForOneExtraOre?: number;
  /**
   * +${value}% chance to receive a Quality Superior Gem while Mining Gem Veins or Meteorite Ore
   */
  increasedChanceForQualitySuperiorGem?: number;
  /**
   * -${value}% chance to receive a Quality Superior Gem while Mining Gem Veins or Meteorite Ore
   */
  decreasedChanceForQualitySuperiorGem?: number;
  /**
   * +${value} Meteorite Ore gained when Mining Meteorite Veins
   */
  increasedMeteoriteOre?: number;
  /**
   * +${value}% chance to receive an Ash drop while Woodcutting
   */
  increasedChanceForAshInWoodcutting?: number;
  /**
   * -${value}% chance to receive an Ash drop while Woodcutting
   */
  decreasedChanceForAshInWoodcutting?: number;
  /**
   * +${value}% chance to receive Ash per burn in Firemaking
   */
  increasedChanceForAshInFiremaking?: number;
  /**
   * -${value}% chance to receive Ash per burn in Firemaking
   */
  decreasedChanceForAshInFiremaking?: number;
  /**
   * +${value}% chance to receive Stardust when burning Magic Logs in Firemaking
   */
  increasedChanceForStardustInFiremaking?: number;
  /**
   * -${value}% chance to receive Stardust when burning Magic Logs in Firemaking
   */
  decreasedChanceForStardustInFiremaking?: number;
  /**
   * +${value}% chance to receive +1 Fish in Fishing (Cannot be doubled)
   */
  increasedChanceForOneExtraFish?: number;
  /**
   * -${value}% chance to receive +1 Fish in Fishing (Cannot be doubled)
   */
  decreasedChanceForOneExtraFish?: number;
  /**
   * Quantity of logs produced by Woodcutting is doubled
   */
  doubleLogProduction?: number;
  /**
   * -${value} harvest quantity from Farming (Cannot be doubled or multiplied)
   */
  decreasedFlatFarmingYield?: number;
  /**
   * +${value}% GP from Agility Obstacles that contain a negative modifier
   */
  increasedGPFromNegativeObstacles?: number;
  /**
   * -${value}% GP from Agility Obstacles that contain a negative modifier
   */
  decreasedGPFromNegativeObstacles?: number;
  /**
   * +${value}% Agility Skill XP from Obstacles that contain a negative modifier
   */
  increasedXPFromNegativeObstacles?: number;
  /**
   * -${value}% Agility Skill XP from Obstacles that contain a negative modifier
   */
  decreasedXPFromNegativeObstacles?: number;
  /**
   * +${value}% Agility Mastery XP from Obstacles that contain a negative modifier
   */
  increasedMasteryXPFromNegativeObstacles?: number;
  /**
   * -${value}% Agility Mastery XP from Obstacles that contain a negative modifier
   */
  decreasedMasteryXPFromNegativeObstacles?: number;
  /**
   * +${value}% chance to locate Golden Stardust in Astrology
   */
  increasedChanceGoldenStardust?: number;
  /**
   * -${value}% chance to locate Golden Stardust in Astrology
   */
  decreasedChanceGoldenStardust?: number;
  /**
   * +${value}% chance to locate Stardust in Astrology
   */
  increasedChanceStardust?: number;
  /**
   * -${value}% chance to locate Stardust in Astrology
   */
  decreasedChanceStardust?: number;
  /**
   * -${value}% Thieving Stun Interval
   */
  decreasedThievingStunIntervalPercent?: number;
  /**
   * +${value}% Thieving Stun Interval
   */
  increasedThievingStunIntervalPercent?: number;
  /**
   * -${value}% Interval for all Non-Combat Skills
   */
  decreasedGlobalSkillIntervalPercent?: number;
  /**
   * +${value}% Interval for all Non-Combat Skills
   */
  increasedGlobalSkillIntervalPercent?: number;
  /**
   * +${value}% chance to gain Arrow Shafts when cutting Trees (Cannot be Doubled)
   */
  increasedChanceForArrowShaftsWoodcutting?: number;
  /**
   * -${value}% chance to gain Arrow Shafts when cutting Trees (Cannot be Doubled)
   */
  decreasedChanceForArrowShaftsWoodcutting?: number;
  /**
   * -${value}% Item cost reduction for equipped Summoning Tablets (Excludes Shard Cost)
   */
  decreasedNonShardCostForEquippedTablets?: number;
  /**
   * +${value}% Item cost reduction for equipped Summoning Tablets (Excludes Shard Cost)
   */
  increasedNonShardCostForEquippedTablets?: number;
  /**
   * -${value}% Passive Cook Interval
   */
  decreasedPassiveCookInterval?: number;
  /**
   * +${value}% Passive Cook Interval
   */
  increasedPassiveCookInterval?: number;
  /**
   * +${value}% Resource Preservation cap in ${skillName}
   */
  increasedSkillPreservationCap?: SkillModDataArray;
  /**
   * -${value}% Resource Preservation cap in ${skillName}
   */
  decreasedSkillPreservationCap?: SkillModDataArray;
  /**
   * +${value}% Salamander Tablets made in Summoning
   */
  increasedSalamanderCreationCharges?: number;
  /**
   * -${value}% Salamander Tablet made in Summoning
   */
  decreasedSalamanderCreationCharges?: number;
  /**
   * -${value}% Resource Cost for Javelins in Fletching
   */
  decreasedJavelinResourceCost?: number;
  /**
   * +${value}% Resource Cost for Javelins in Fletching
   */
  increasedJavelinResourceCost?: number;
  /**
   * +${value} base Javelins produced per action in Fletching
   */
  increasedJavelinProduction?: number;
  /**
   * -${value} base Javelins produced per action in Fletching
   */
  decreasedJavelinProduction?: number;
  /**
   * +${value}% chance for +3 Javelins produced per action in Fletching (Cannot be doubled)
   */
  increasedChanceExtraJavelins?: number;
  /**
   * -${value}% chance for +3 Javelins produced per action in Fletching (Cannot be doubled)
   */
  decreasedChanceExtraJavelins?: number;
  /**
   * +${value}% chance for +1 Meteorite Ore in Mining (Cannot be doubled)
   */
  increasedChanceExtraMeteoriteOre?: number;
  /**
   * -${value}% chance for +1 Meteorite Ore in Mining (Cannot be doubled)
   */
  decreasedChanceExtraMeteoriteOre?: number;
  /**
   * +${value}% chance for +5 Arrows produced per action in Fletching (Cannot be doubled)
   */
  increasedChanceExtraArrows?: number;
  /**
   * -${value}% chance for +5 Arrows produced per action in Fletching (Cannot be doubled)
   */
  decreasedChanceExtraArrows?: number;
  /**
   * +${value}% chance for +2 Unstrung Bows produced per action in Fletching (Cannot be doubled)
   */
  increasedChanceExtraUnstrungBows?: number;
  /**
   * -${value}% chance for +2 Unstrung Bows produced per action in Fletching (Cannot be doubled)
   */
  decreasedChanceExtraUnstrungBows?: number;
  /**
   * +${value}% chance for Items produced in Fletching to be converted to GP equal to 150% Base Sale price
   */
  increasedChanceItemToGoldFletching?: number;
  /**
   * -${value}% chance for Items produced in Fletching to be converted to GP equal to 150% Base Sale price
   */
  decreasedChanceItemToGoldFletching?: number;
  /**
   * +${value} Base Quantity for Leprechaun Tablet Creation in Summoning
   */
  increasedLeprechaunCreationCharges?: number;
  /**
   * -${value} Base Quantity for Leprechaun Tablet Creation in Summoning
   */
  decreasedLeprechaunCreationCharges?: number;
  /**
   * +${value}% GP from Agility per active Obstacle
   */
  increasedGPFromAgilityPerActiveObstacle?: number;
  /**
   * -${value}% GP from Agility per active Obstacle
   */
  decreasedGPFromAgilityPerActiveObstacle?: number;
  /**
   * +${value}% chance for +1 Crossbow produced per action in Fletching (Cannot be doubled)
   */
  increasedChanceExtraCrossbows?: number;
  /**
   * -${value}% chance for +1 Crossbow produced per action in Fletching (Cannot be doubled)
   */
  decreasedChanceExtraCrossbows?: number;
  /**
   * No longer receive Golden Stardust from Astrology
   */
  disableGoldenStardustDrops?: number;
  /**
   * +${value} Bolts produced per action in Fletching
   */
  increasedBoltProduction?: number;
  /**
   * -${value} Bolts produced per action in Fletching
   */
  decreasedBoltProduction?: number;
  /**
   * -${value}s Fletching Interval when making Arrows
   */
  decreasedFletchingIntervalWithArrows?: number;
  /**
   * +${value}s Fletching Interval when making Arrows
   */
  increasedFletchingIntervalWithArrows?: number;
  /**
   * +${value} Base Quantity for Cyclops Tablet Creation in Summoning
   */
  increasedCyclopsCreationCharges?: number;
  /**
   * -${value} Base Quantity for Cyclops Tablet Creation in Summoning
   */
  decreasedCyclopsCreationCharges?: number;
  /**
   * +${value}% Item Alchemy Item sale price conversion
   */
  increasedGPFromItemAlchemy?: number;
  /**
   * +${value}% chance to receive Charcoal per burn in Firemaking
   */
  increasedChanceForCharcoalInFiremaking?: number;
  /**
   * -${value}% chance to receive Charcoal per burn in Firemaking
   */
  decreasedChanceForCharcoalInFiremaking?: number;
  /**
   * +${value}% chance to receive Thieving Area Unique Item
   */
  increasedThievingAreaUniqueChance?: number;
  /**
   * -${value}% chance to receive Thieving Area Unique Item
   */
  decreasedThievingAreaUniqueChance?: number;
  /**
   * +${value}% chance to locate a Meteorite in Astrology
   */
  increasedChanceToFindMeteorite?: number;
  /**
   * +${value} chance to find a Mushroom in Woodcutting (Cannot be doubled)
   */
  increasedChanceToFindMushroomWoodcutting?: number;
  /**
   * +${value} chance to avoid the stun interval and stun damage in Thieving when pickpocket attempt fails
   */
  increasedChanceToAvoidThievingStuns?: number;
  /**
   * +${value} chance to receive an additional Perfect Item from Cooking (Cannot be doubled)
   */
  increasedChanceAdditionalPerfectItem?: number;
  /**
   * +${value}% chance to receive Stardust when cutting Magic Logs in Woodcutting (Quantity equal to Logs received)
   */
  increasedChanceStardustCuttingMagicLogs?: number;
  /**
   * +${value} Township Population Cap
   */
  increasedTownshipPopulationCap?: number;
  /**
   * -${value} Township Population Cap
   */
  decreasedTownshipPopulationCap?: number;
  /**
   * +${value}% Township Happiness
   */
  increasedTownshipHappiness?: number;
  /**
   * -${value}% Township Happiness
   */
  decreasedTownshipHappiness?: number;
  /**
   * +${value}% Township Education
   */
  increasedTownshipEducation?: number;
  /**
   * -${value}% Township Education
   */
  decreasedTownshipEducation?: number;
  /**
   * +${value}% Township Health
   */
  increasedTownshipHealth?: number;
  /**
   * -${value}% Township Health
   */
  decreasedTownshipHealth?: number;
  /**
   * +${value}% Township GP Production
   */
  increasedTownshipGPProduction?: number;
  /**
   * -${value}% Township GP Production
   */
  decreasedTownshipGPProduction?: number;
  /**
   * +${value}% Township Max Storage
   */
  increasedTownshipMaxStorage?: number;
  /**
   * -${value}% Township Max Storage
   */
  decreasedTownshipMaxStorage?: number;
  /**
   * +${value}% Township Food Production
   */
  increasedTownshipFoodProduction?: number;
  /**
   * -${value}% Township Food Production
   */
  decreasedTownshipFoodProduction?: number;
  /**
   * +${value}% Township Wood Production
   */
  increasedTownshipWoodProduction?: number;
  /**
   * -${value}% Township Wood Production
   */
  decreasedTownshipWoodProduction?: number;
  /**
   * +${value}% Township Ore Production
   */
  increasedTownshipOreProduction?: number;
  /**
   * -${value}% Township Ore Production
   */
  decreasedTownshipOreProduction?: number;
  /**
   * +${value}% Township Stone Production
   */
  increasedTownshipStoneProduction?: number;
  /**
   * -${value}% Township Stone Production
   */
  decreasedTownshipStoneProduction?: number;
  /**
   * +${value}% Township Coal Production
   */
  increasedTownshipCoalProduction?: number;
  /**
   * -${value}% Township Coal Production
   */
  decreasedTownshipCoalProduction?: number;
  /**
   * +${value}% Township Bar Production
   */
  increasedTownshipBarProduction?: number;
  /**
   * -${value}% Township Bar Production
   */
  decreasedTownshipBarProduction?: number;
  /**
   * +${value}% Township Herb Production
   */
  increasedTownshipHerbProduction?: number;
  /**
   * -${value}% Township Herb Production
   */
  decreasedTownshipHerbProduction?: number;
  /**
   * +${value}% Township Rune Essence Production
   */
  increasedTownshipRuneEssenceProduction?: number;
  /**
   * -${value}% Township Rune Essence Production
   */
  decreasedTownshipRuneEssenceProduction?: number;
  /**
   * +${value}% Township Leather Production
   */
  increasedTownshipLeatherProduction?: number;
  /**
   * -${value}% Township Leather Production
   */
  decreasedTownshipLeatherProduction?: number;
  /**
   * +${value}% Township Potion Production
   */
  increasedTownshipPotionProduction?: number;
  /**
   * -${value}% Township Potion Production
   */
  decreasedTownshipPotionProduction?: number;
  /**
   * +${value}% Township Plank Production
   */
  increasedTownshipPlankProduction?: number;
  /**
   * -${value}% Township Plank Production
   */
  decreasedTownshipPlankProduction?: number;
  /**
   * +${value}% Township Clothing Production
   */
  increasedTownshipClothingProduction?: number;
  /**
   * -${value}% Township Clothing Production
   */
  decreasedTownshipClothingProduction?: number;
  /**
   * +${value}% Township Building Cost
   */
  increasedTownshipBuildingCost?: number;
  /**
   * -${value}% Township Building Cost (Capped at -80%)
   */
  decreasedTownshipBuildingCost?: number;
  /**
   * +${value}% Township Building Production in Grasslands Biome
   */
  increasedTownshipGrasslandsProduction?: number;
  /**
   * -${value}% Township Building Production in Grasslands Biome
   */
  decreasedTownshipGrasslandsProduction?: number;
  /**
   * +${value}% Township Building Production in Forest Biome
   */
  increasedTownshipForestProduction?: number;
  /**
   * -${value}% Township Building Production in Forest Biome
   */
  decreasedTownshipForestProduction?: number;
  /**
   * +${value}% Township Building Production in Desert Biome
   */
  increasedTownshipDesertProduction?: number;
  /**
   * -${value}% Township Building Production in Desert Biome
   */
  decreasedTownshipDesertProduction?: number;
  /**
   * +${value}% Township Building Production in Water Biome
   */
  increasedTownshipWaterProduction?: number;
  /**
   * -${value}% Township Building Production in Water Biome
   */
  decreasedTownshipWaterProduction?: number;
  /**
   * +${value}% Township Building Production in Swamp Biome
   */
  increasedTownshipSwampProduction?: number;
  /**
   * -${value}% Township Building Production in Swamp Biome
   */
  decreasedTownshipSwampProduction?: number;
  /**
   * +${value}% Township Building Production in Arid Plains Biome
   */
  increasedTownshipAridPlainsProduction?: number;
  /**
   * -${value}% Township Building Production in Arid Plains Biome
   */
  decreasedTownshipAridPlainsProduction?: number;
  /**
   * +${value}% Township Building Production in Mountains Biome
   */
  increasedTownshipMountainsProduction?: number;
  /**
   * -${value}% Township Building Production in Mountains Biome
   */
  decreasedTownshipMountainsProduction?: number;
  /**
   * +${value}% Township Building Production in Valley Biome
   */
  increasedTownshipValleyProduction?: number;
  /**
   * -${value}% Township Building Production in Valley Biome
   */
  decreasedTownshipValleyProduction?: number;
  /**
   * +${value}% Township Building Production in Jungle Biome
   */
  increasedTownshipJungleProduction?: number;
  /**
   * -${value}% Township Building Production in Jungle Biome
   */
  decreasedTownshipJungleProduction?: number;
  /**
   * +${value}% Township Building Production in Snowlands Biome
   */
  increasedTownshipSnowlandsProduction?: number;
  /**
   * -${value}% Township Building Production in Snowlands Biome
   */
  decreasedTownshipSnowlandsProduction?: number;
  /**
   * +${value}% Township Production for Fishing Dock buildings
   */
  increasedTownshipFishingDockProduction?: number;
  /**
   * -${value}% Township Production for Fishing Dock buildings
   */
  decreasedTownshipFishingDockProduction?: number;
  /**
   * +${value}% Township Production for Magic Emporium buildings
   */
  increasedTownshipMagicEmporiumProduction?: number;
  /**
   * -${value}% Township Production for Magic Emporium buildings
   */
  decreasedTownshipMagicEmporiumProduction?: number;
  /**
   * +${value}% Township Production for Orchard buildings
   */
  increasedTownshipOrchardProduction?: number;
  /**
   * -${value}% Township Production for Orchard buildings
   */
  decreasedTownshipOrchardProduction?: number;
  /**
   * +${value}% Township Production for Farm buildings
   */
  increasedTownshipFarmProduction?: number;
  /**
   * -${value}% Township Production for Farm buildings
   */
  decreasedTownshipFarmProduction?: number;
  /**
   * +${value}% Township Production for Woodcutting buildings
   */
  increasedTownshipWoodcuttingProduction?: number;
  /**
   * -${value}% Township Production for Woodcutting buildings
   */
  decreasedTownshipWoodcuttingProduction?: number;
  /**
   * +${value}% Township Production for Blacksmith buildings
   */
  increasedTownshipBlacksmithProduction?: number;
  /**
   * -${value}% Township Production for Blacksmith buildings
   */
  decreasedTownshipBlacksmithProduction?: number;
  /**
   * +${value}% Township Citizen Tax Rate (Max 80%)
   */
  increasedTownshipTaxPerCitizen?: number;
  /**
   * -${value}% Township Citizen Tax Rate
   */
  decreasedTownshipTaxPerCitizen?: number;
  /**
   * Hunting is forbidden in Township
   */
  townshipDisableHunting?: number;
  /**
   * +${value}% Township Resource Generation
   */
  increasedTownshipResourceProduction?: number;
  /**
   * -${value}% Township Resource Generation
   */
  decreasedTownshipResourceProduction?: number;
  /**
   * +${value}% Township Coal Usage
   */
  increasedTownshipCoalUsage?: number;
  /**
   * -${value}% Township Coal Usage
   */
  decreasedTownshipCoalUsage?: number;
  /**
   * +${value}% Township Building Happiness Penalties
   */
  increasedTownshipBuildingHappinessPenalties?: number;
  /**
   * -${value}% Township Building Happiness Penalties
   */
  decreasedTownshipBuildingHappinessPenalties?: number;
  /**
   * +${value} Ash per burn in Firemaking (Cannot be doubled)
   */
  increasedAdditionalAshInFiremaking?: number;
  /**
   * -${value} Ash per burn in Firemaking (Cannot be doubled)
   */
  decreasedAdditionalAshInFiremaking?: number;
  /**
   * +${value}% ${skillName} Mastery XP per maxed Star in Deedree constellation in Astrology
   */
  increasedSkillMasteryXPPerDeedree?: SkillModDataArray;
  /**
   * +${value}% ${skillName} Mastery XP per maxed Star in Ameria constellation in Astrology
   */
  increasedSkillMasteryXPPerAmeria?: SkillModDataArray;
  /**
   * +${value}% ${skillName} Mastery XP per maxed Star in Vale constellation in Astrology
   */
  increasedSkillMasteryXPPerVale?: SkillModDataArray;
  /**
   * +${value}% ${skillName} Mastery XP per maxed Star in Qimican constellation in Astrology
   */
  increasedSkillMasteryXPPerQimican?: SkillModDataArray;
  /**
   * +${value}% ${skillName} Mastery XP per maxed Star in Ko constellation in Astrology
   */
  increasedSkillMasteryXPPerKo?: SkillModDataArray;
  /**
   * +${value}% ${skillName} Mastery XP per maxed Star in Arachi constellation in Astrology
   */
  increasedSkillMasteryXPPerArachi?: SkillModDataArray;
  /**
   * +${value}% ${skillName} Mastery XP per maxed Star in Iridan constellation in Astrology
   */
  increasedSkillMasteryXPPerIridan?: SkillModDataArray;
  /**
   * +${value}% ${skillName} Mastery XP per maxed Star in Hyden constellation in Astrology
   */
  increasedSkillMasteryXPPerHyden?: SkillModDataArray;
  /**
   * +${value}% ${skillName} Mastery XP per maxed Star in Syllia constellation in Astrology
   */
  increasedSkillMasteryXPPerSyllia?: SkillModDataArray;
  /**
   * +${value}% Township Citizen Food Usage
   */
  increasedTownshipFoodUsage?: number;
  /**
   * -${value}% Township Citizen Food Usage
   */
  decreasedTownshipFoodUsage?: number;
  /**
   * +${value}% chance to find a Lost Chest while Fishing (This is separate to the Special Fishing Chance)
   */
  increasedChanceToFindLostChest?: number;
  /**
   * +${value}% chance to preserve Consumable Slot charges
   */
  increasedChanceToPreserveConsumable?: number;
  /**
   * +${value}% Township Dead Storage
   */
  increasedTownshipDeadStorage?: number;
  /**
   * -${value}% Township Dead Storage
   */
  decreasedTownshipDeadStorage?: number;
  /**
   * When creating Lethal Toxins Potions in Herblore, gain +${value} Deadly Toxins Potion(s) as an additional Potion (Cannot be doubled)
   */
  increasedDeadlyToxinsFromHerblore?: number;
  /**
   * +${value} Base Quantity when creating equipped Summoning Tablets
   */
  increasedSummoningCreationChargesForEquippedTablets?: number;
  /**
   * -${value}% Summoning Interval for equipped Summoning Tablets
   */
  decreasedSummoningIntervalPercentForEquippedTablets?: number;
  /**
   * +${value} minimum Bird Nest's recieved from Woodcutting
   */
  increasedMinBirdNestQuantity?: number;
  /**
   * +${value}% Chance to find gem veins when Mining
   */
  increasedGemVeinChance?: number;
  /**
   * -${value}% Chance to find gem veins when Mining
   */
  decreasedGemVeinChance?: number;
  /**
   * +${value}% Chance to gain +1 additional bar in Smithing (Cannot be doubled)
   */
  increasedChanceAdditionalBarSmithing?: number;
  /**
   * +{value} Base Quantity when creating Bolts in Fletching
   */
  increasedFletchingBoltQuantity?: number;
  /**
   * +${value}% Agility Pillar build costs
   */
  increasedAgilityPillarCost?: number;
  /**
   * -${value}% Agility Pillar build costs
   */
  decreasedAgilityPillarCost?: number;
  /**
   * +${value}% Non-Combat Skill XP
   */
  increasedNonCombatSkillXP?: number;
  /**
   * -${value}% Non-Combat Skill XP
   */
  decreasedNonCombatSkillXP?: number;
  /**
   * +${value} Melee Defence Bonus
   */
  increasedFlatMeleeDefenceBonus?: number;
  /**
   * +${value} Ranged Defence Bonus
   */
  increasedFlatRangedDefenceBonus?: number;
  /**
   * +${value} Stab Attack Bonus
   */
  increasedFlatStabAttackBonus?: number;
  /**
   * +${value} Slash Attack Bonus
   */
  increasedFlatSlashAttackBonus?: number;
  /**
   * +${value} Block Attack Bonus
   */
  increasedFlatBlockAttackBonus?: number;
  /**
   * +${value} Ranged Attack Bonus
   */
  increasedFlatRangedAttackBonus?: number;
  /**
   * +${value} Magic Attack Bonus
   */
  increasedFlatMagicAttackBonus?: number;
  /**
   * +${value} Melee Strength Bonus
   */
  increasedFlatMeleeStrengthBonus?: number;
  /**
   * +${value} Ranged Strength Bonus
   */
  increasedFlatRangedStrengthBonus?: number;
  /**
   * Item Cost reduction is disabled when making Salamander Tablets in Summoning (Excludes Shard Cost)
   */
  disableSalamanderItemReduction?: number;
  /**
   * -${value}% Summoning Interval when making Octopus Tablets
   */
  decreasedSummoningIntervalForOctopus?: number;
  /**
   * +${value}% Mastery Pool XP Cap
   */
  increasedMasteryPoolCap?: number;
  /**
   * Bypass All Slayer Area item requirements
   */
  bypassAllSlayerItems?: number;
  /**
   * When hit by an Enemy, gain +5% Damage Reduction for 1 Enemy Turn (Does not Stack)
   */
  increased5DROnBeingHit?: number;
  /**
   * Magic Curses can be used without a Magic weapon
   */
  allowNonMagicCurses?: number;
  /**
   * +${value} Township Trader GP Limit per visit (Max 100M)
   */
  increasedTownshipTraderStock?: number;
  [k: string]: unknown;
};
declare type PlayerModifierData1 = CombatModifierBase;
declare type SkillModDataArray = {
  /**
   * The ID of the Skill the modifier should apply to
   */
  skillID: SkillID;
  /**
   * The value of the modifier
   */
  value: number;
  [k: string]: unknown;
}[];
declare type CombatModifierData = CombatModifierBase;
/**
 * Data for constructing an ItemEffect object
 */
declare type ItemEffectData = ItemEffectData1 & {
  /**
   * Data for the effect associated
   */
  effectData: EffectData;
  [k: string]: unknown;
};
declare type ItemEffectData1 = IDData;
declare type EffectData =
  | SlowEffectData
  | BurnEffectData
  | PoisonEffectData
  | FrostBurnEffectData
  | AttackStackingEffectData
  | AfflictionEffectData
  | CustomEffectData
  | CurseEffectData
  | DeadlyPoisonEffectData;
/**
 * The Percentage chance that the effect should proc
 */
declare type EffectChance = number;
declare type StackingEffectID =
  | "melvorF:MarkOfDeath"
  | "melvorTotH:GhostlyTerror"
  | "melvorTotH:DecayingShots"
  | "melvorTotH:ReduceDR"
  | "melvorTotH:DarkBlade"
  | "melvorTotH:EvasionDown"
  | "melvorTotH:EtheralEffect"
  | "melvorTotH:RevenantWeakness"
  | "melvorTotH:Carrion";
/**
 * Defines a custom effect that is not specified by a standard type
 */
declare type CustomEffectData = CustomEffectData1 & {
  effectType: "Custom";
  [k: string]: unknown;
};
declare type CustomEffectData1 = AnyEffectData;
declare type AnyEffectData =
  | ModifierEffectData
  | SleepEffect
  | StunEffect
  | DOTEffect
  | ReflexiveEffectData
  | CompoundEffect
  | ComboEffect;
declare type CharacterType = "Target" | "Attacker";
declare type StunFlavour = "Stun" | "Freeze";
declare type DOTType = "Burn" | "Bleed" | "Poison" | "Regen" | "DeadlyPoison";
declare type Damage = RolledDamage | FixedDamage;
declare type RolledDamage = RolledDamage1 & {
  /**
   * Determines if the damage should roll between a minimum and maximum value
   */
  roll: true;
  /**
   * The method to compute the minimum damage dealt
   */
  minRoll: RollType;
  /**
   * The magnitude of the minimum damage. Effect depends on the value of minRoll
   */
  minPercent: number;
  [k: string]: unknown;
};
declare type RolledDamage1 = BaseDamage;
declare type RollType =
  | "MaxHit"
  | "MinHit"
  | "CurrentHP"
  | "MaxHP"
  | "DamageDealt"
  | "MagicScaling"
  | "Fixed"
  | "One"
  | "Rend"
  | "Poisoned"
  | "Bleeding"
  | "PoisonMax35"
  | "PoisonMin35"
  | "PoisonFixed100"
  | "BurnFixed100"
  | "BurnMaxHit100"
  | "CursedFixed100"
  | "MaxHitDR"
  | "MaxHitScaledByHP"
  | "MaxHitScaledByHP2x"
  | "FixedPlusMaxHit50"
  | "HPUnder90"
  | "PoisonedMaxHit";
declare type FixedDamage = FixedDamage1 & {
  /**
   * Determines if the damage should roll between a minimum and maximum value
   */
  roll: false;
  [k: string]: unknown;
};
declare type FixedDamage1 = BaseDamage;
declare type CurseID =
  | "melvorF:BlindingI"
  | "melvorF:SoulSplitI"
  | "melvorF:WeakeningI"
  | "melvorF:AnguishI"
  | "melvorF:BlindingII"
  | "melvorF:SoulSplitII"
  | "melvorF:WeakeningII"
  | "melvorF:Confusion"
  | "melvorF:AnguishII"
  | "melvorF:BlindingIII"
  | "melvorF:SoulSplitIII"
  | "melvorF:WeakeningIII"
  | "melvorF:AnguishIII"
  | "melvorF:Decay"
  | "melvorTotH:Madness"
  | "melvorTotH:Torment"
  | "melvorTotH:Despair";
declare type AnyItemData =
  | ItemData
  | EquipmentItemData
  | WeaponItemData
  | FoodItemData
  | BoneItemData
  | PotionItemData
  | ReadableItemData
  | OpenableItemData
  | TokenItemData
  | CompostItemData;
declare type ItemData = ItemData1 & {
  itemType: "Item";
  [k: string]: unknown;
};
declare type ItemData1 = BaseItemData;
declare type BaseItemData = BaseItemData1 & {
  /**
   * The display name for the item
   */
  name: string;
  /**
   * Category for item, utilized for searching
   */
  category: string;
  /**
   * Type for item, utilized for searching
   */
  type: string;
  /**
   * URI of the item's image
   */
  media: string;
  /**
   * Optional. If present, provides the URI for an animated image of the item
   */
  mediaAnimation?: string;
  /**
   * URI of an alternative image for the item
   */
  altMedia?: string;
  /**
   * Determines if the item should not count for item completion
   */
  ignoreCompletion: boolean;
  /**
   * Determines if the item should be obtainable by clicking on it in the item log
   */
  obtainFromItemLog: boolean;
  /**
   * Determines if the item should only show up in the Golbin Raid Minigame
   */
  golbinRaidExclusive: boolean;
  /**
   * Optional. If present, the item will use this description instead of the default autogenerated one.
   */
  customDescription?: string;
  /**
   * Base sale price for the item
   */
  sellsFor: number;
  [k: string]: unknown;
};
declare type BaseItemData1 = IDData;
declare type EquipmentItemData = EquipmentItemData1 & {
  itemType: "Equipment";
  [k: string]: unknown;
};
declare type EquipmentItemData1 = BaseEquipmentItemData;
declare type BaseEquipmentItemData = BaseEquipmentItemData1 & {
  /**
   * Classification for the tier of item. Currently only effects which items can be converted to Clothing in township
   */
  tier: string;
  /**
   * The valid equipment slots that this item can be equipped to.
   *
   * @minItems 1
   */
  validSlots: [SlotTypes, ...SlotTypes[]];
  /**
   * Equipment slots that will also be occupied by this item, in addition to one of the validSlots. Typical usecase is to make a weapon 2-Handed
   */
  occupiesSlots: SlotTypes[];
  /**
   * Array of requirements that are needed in order to equip this item
   */
  equipRequirements: AnyRequirementData[];
  /**
   * Equipment stats that are provided by this item. Do not apply if item is in the Passive slot.
   */
  equipmentStats: EquipStatPair[];
  /**
   * Optional. Modifiers that are provided to the Player when the item is equipped.
   */
  modifiers?: PlayerModifierData1;
  /**
   * Optional. Modifiers that are provided to Enemies/Monsters when the item is equipped.
   */
  enemyModifiers?: CombatModifierData;
  /**
   * Optional. An array of Conditional Modifiers that are provided when the item is equipped.
   *
   * @minItems 1
   */
  conditionalModifiers?: [ConditionalModifierData, ...ConditionalModifierData[]];
  /**
   * Optional. An array of Special Attack IDs that are provided when the item is equipped.
   *
   * @minItems 1
   */
  specialAttacks?: [SpecialAttackID, ...SpecialAttackID[]];
  /**
   * Optional. If present with the specialAttacks property, overrides their default chances to happen. Must be the same length as specialAttacks.
   *
   * @minItems 1
   */
  overrideSpecialChances?: [number, ...number[]];
  /**
   * Optional. An array of ItemEffect IDs that are provided in combat by this item.
   *
   * @minItems 1
   */
  fightEffects?: [ItemEffectID, ...ItemEffectID[]];
  /**
   * Optional. An array of runes that are provided by this item.
   *
   * @minItems 1
   */
  providedRunes?: [AnyItemQuantity, ...AnyItemQuantity[]];
  /**
   * Only required if one of the validSlots for this item is Quiver. Specifies the types of weapons this item can supply with ammunition.
   */
  ammoType?: AmmoType;
  /**
   * Optional. Only utilized if this item participates in the Item Charges subsystem. Specifies an array of GameEventMatchers, which on a successful match will consume a single item charge.
   *
   * @minItems 1
   */
  consumesChargesOn?: [GameEventMatcherData, ...GameEventMatcherData[]];
  /**
   * Optional. Specifies an array of GameEventMatchers, which on a successful match will consume one of the equipped item. Best utilized for the Quiver, Summon1, Summon2, and Consumable slots.
   *
   * @minItems 1
   */
  consumesOn?: [GameEventMatcherData, ...GameEventMatcherData[]];
  /**
   * Optional. If present, specifies that an item in the bank will be consumed if a successful GameEvent matches
   */
  consumesItemOn?: {
    /**
     * The ID of the item in the bank to be consumed
     */
    itemID: AnyItemID;
    /**
     * The percentage chance that the item is consumed when an event matches
     */
    chance: number;
    /**
     * Specifies an array of GameEventMatchers, which on a successful match will roll to consume an item from the bank.
     *
     * @minItems 1
     */
    matchers: [GameEventMatcherData, ...GameEventMatcherData[]];
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
declare type BaseEquipmentItemData1 = BaseItemData1;
declare type SlotTypes =
  | "Helmet"
  | "Platebody"
  | "Platelegs"
  | "Boots"
  | "Weapon"
  | "Shield"
  | "Amulet"
  | "Ring"
  | "Gloves"
  | "Quiver"
  | "Cape"
  | "Passive"
  | "Summon1"
  | "Summon2"
  | "Consumable";
declare type AnyRequirementData =
  | SkillLevelRequirementData
  | AllSkillLevelRequirementData
  | DungeonRequirementData
  | CompletionRequirementData
  | ShopPurchaseRequirementData
  | SlayerItemRequirementData
  | SlayerTaskRequirement
  | ItemFoundRequirementData
  | MonsterKilledRequirementData
  | TownshipTaskCompletionRequirement
  | TownshipBuildingRequirementData;
declare type DungeonID =
  | "melvorD:Chicken_Coop"
  | "melvorD:Undead_Graveyard"
  | "melvorD:Spider_Forest"
  | "melvorD:Frozen_Cove"
  | "melvorD:Deep_Sea_Ship"
  | "melvorD:Volcanic_Cave"
  | "melvorD:Bandit_Base"
  | "melvorD:Hall_of_Wizards"
  | "melvorF:Air_God_Dungeon"
  | "melvorF:Water_God_Dungeon"
  | "melvorF:Earth_God_Dungeon"
  | "melvorF:Fire_God_Dungeon"
  | "melvorF:Dragons_Den"
  | "melvorF:Miolite_Caves"
  | "melvorF:Infernal_Stronghold"
  | "melvorF:Into_the_Mist"
  | "melvorF:Impending_Darkness"
  | "melvorTotH:Ancient_Sanctuary"
  | "melvorTotH:Underground_Lava_Lake"
  | "melvorTotH:Lightning_Region"
  | "melvorTotH:Lair_of_the_Spider_Queen"
  | "melvorTotH:Cursed_Forest"
  | "melvorTotH:Necromancers_Palace"
  | "melvorTotH:Throne_of_the_Herald";
/**
 * Valid Namespace name
 */
declare type Namespace = ("melvorBaseGame" | "melvorTrue" | "melvorD" | "melvorF" | "melvorTotH") | string;
declare type ShopPurchaseID =
  | "melvorD:Extra_Bank_Slot"
  | "melvorD:Auto_Eat_Tier_I"
  | "melvorD:Auto_Eat_Tier_II"
  | "melvorD:Auto_Eat_Tier_III"
  | "melvorD:Extra_Equipment_Set_I"
  | "melvorD:Dungeon_Equipment_Swapping"
  | "melvorD:Multi_Tree"
  | "melvorD:AutoEquipFood"
  | "melvorD:AutoSwapFood"
  | "melvorD:Iron_Axe"
  | "melvorD:Steel_Axe"
  | "melvorD:Black_Axe"
  | "melvorD:Mithril_Axe"
  | "melvorD:Adamant_Axe"
  | "melvorD:Rune_Axe"
  | "melvorD:Dragon_Axe"
  | "melvorD:Iron_Fishing_Rod"
  | "melvorD:Steel_Fishing_Rod"
  | "melvorD:Black_Fishing_Rod"
  | "melvorD:Mithril_Fishing_Rod"
  | "melvorD:Adamant_Fishing_Rod"
  | "melvorD:Rune_Fishing_Rod"
  | "melvorD:Dragon_Fishing_Rod"
  | "melvorD:Iron_Pickaxe"
  | "melvorD:Steel_Pickaxe"
  | "melvorD:Black_Pickaxe"
  | "melvorD:Mithril_Pickaxe"
  | "melvorD:Adamant_Pickaxe"
  | "melvorD:Rune_Pickaxe"
  | "melvorD:Dragon_Pickaxe"
  | "melvorD:Normal_Cooking_Fire"
  | "melvorD:Oak_Cooking_Fire"
  | "melvorD:Willow_Cooking_Fire"
  | "melvorD:Teak_Cooking_Fire"
  | "melvorD:Maple_Cooking_Fire"
  | "melvorD:Mahogany_Cooking_Fire"
  | "melvorD:Yew_Cooking_Fire"
  | "melvorD:Magic_Cooking_Fire"
  | "melvorD:Redwood_Cooking_Fire"
  | "melvorD:Basic_Furnace"
  | "melvorD:Strong_Furnace"
  | "melvorD:Magic_Furnace"
  | "melvorD:Basic_Pot"
  | "melvorD:Strong_Pot"
  | "melvorD:Magic_Pot"
  | "melvorD:Cooking"
  | "melvorD:Mining"
  | "melvorD:Smithing"
  | "melvorD:Gem"
  | "melvorD:Attack_Skillcape"
  | "melvorD:Cooking_Skillcape"
  | "melvorD:Defence_Skillcape"
  | "melvorD:Farming_Skillcape"
  | "melvorD:Firemaking_Skillcape"
  | "melvorD:Fishing_Skillcape"
  | "melvorD:Hitpoints_Skillcape"
  | "melvorD:Mining_Skillcape"
  | "melvorD:Smithing_Skillcape"
  | "melvorD:Strength_Skillcape"
  | "melvorD:Woodcutting_Skillcape"
  | "melvorD:Bag_of_Flour"
  | "melvorD:Cheese"
  | "melvorD:Cream"
  | "melvorD:Feathers"
  | "melvorD:Compost"
  | "melvorD:Weird_Gloop"
  | "melvorD:Bowstring"
  | "melvorD:Red_Party_Hat"
  | "melvorD:SkipCostReduction"
  | "melvorD:FoodBonus"
  | "melvorD:AmmoBonus"
  | "melvorD:RuneBonus"
  | "melvorD:PrayerUnlock"
  | "melvorD:PrayerLevel"
  | "melvorD:WaveCompletionPrayerPoints"
  | "melvorD:StartingPrayerPoints"
  | "melvorD:PassiveUnlock"
  | "melvorD:YellowPartyHat"
  | "melvorD:Preston"
  | "melvorD:Jerry"
  | "melvorD:FasterSpawns"
  | "melvorD:GolbinCrate"
  | "melvorF:Extra_Equipment_Set_II"
  | "melvorF:Extra_Equipment_Set_III"
  | "melvorF:LootContainerStacking"
  | "melvorF:Perpetual_Haste"
  | "melvorF:Expanded_Knowledge"
  | "melvorF:Master_of_Nature"
  | "melvorF:Art_of_Control"
  | "melvorF:Auto_Slayer"
  | "melvorF:Map_To_The_Unhallowed_Wasteland"
  | "melvorF:Basic_Resupply"
  | "melvorF:Standard_Resupply"
  | "melvorF:Generous_Resupply"
  | "melvorF:Mirror_Shield"
  | "melvorF:Magical_Ring"
  | "melvorF:Blazing_Lantern"
  | "melvorF:Desert_Hat"
  | "melvorF:Climbing_Boots"
  | "melvorF:Confetti_Crossbow"
  | "melvorF:Skull_Cape"
  | "melvorF:Green_Party_Hat"
  | "melvorF:Necromancer_Hat"
  | "melvorF:Necromancer_Boots"
  | "melvorF:Necromancer_Bottoms"
  | "melvorF:Necromancer_Robes"
  | "melvorF:Slayer_Helmet_Basic"
  | "melvorF:Slayer_Platebody_Basic"
  | "melvorF:Slayer_Cowl_Basic"
  | "melvorF:Slayer_Leather_Body_Basic"
  | "melvorF:Slayer_Wizard_Hat_Basic"
  | "melvorF:Slayer_Wizard_Robes_Basic"
  | "melvorF:Slayer_Upgrade_Kit_Strong"
  | "melvorF:Slayer_Upgrade_Kit_Elite"
  | "melvorF:Slayer_Upgrade_Kit_Master"
  | "melvorF:Thieving"
  | "melvorF:Max_Skillcape"
  | "melvorF:Agility_Skillcape"
  | "melvorF:Astrology_Skillcape"
  | "melvorF:Crafting_Skillcape"
  | "melvorF:Fletching_Skillcape"
  | "melvorF:Herblore_Skillcape"
  | "melvorF:Magic_Skillcape"
  | "melvorF:Prayer_Skillcape"
  | "melvorF:Ranged_Skillcape"
  | "melvorF:Runecrafting_Skillcape"
  | "melvorF:Slayer_Skillcape"
  | "melvorF:Summoning_Skillcape"
  | "melvorF:Thieving_Skillcape"
  | "melvorF:Township_Skillcape"
  | "melvorF:Cape_of_Completion"
  | "melvorF:Leather"
  | "melvorF:Green_Dragonhide"
  | "melvorF:Blue_Dragonhide"
  | "melvorF:Red_Dragonhide"
  | "melvorF:Summoning_Shard_Red"
  | "melvorF:Summoning_Shard_Green"
  | "melvorF:Summoning_Shard_Blue"
  | "melvorF:Summoning_Shard_Silver"
  | "melvorF:Summoning_Shard_Gold"
  | "melvorF:Summoning_Shard_Black"
  | "melvorF:Woodcutters_Hat"
  | "melvorF:Woodcutters_Body"
  | "melvorF:Woodcutters_Leggings"
  | "melvorF:Woodcutters_Boots"
  | "melvorF:Burning_Mans_Hat"
  | "melvorF:Burning_Mans_Body"
  | "melvorF:Burning_Mans_Leggings"
  | "melvorF:Burning_Mans_Boots"
  | "melvorF:Fishermans_Hat"
  | "melvorF:Fishermans_Body"
  | "melvorF:Fishermans_Leggings"
  | "melvorF:Fishermans_Boots"
  | "melvorF:Miners_Hat"
  | "melvorF:Miners_Body"
  | "melvorF:Miners_Leggings"
  | "melvorF:Miners_Boots"
  | "melvorF:Blacksmiths_Hat"
  | "melvorF:Blacksmiths_Body"
  | "melvorF:Blacksmiths_Leggings"
  | "melvorF:Blacksmiths_Boots"
  | "melvorF:Fletchers_Hat"
  | "melvorF:Fletchers_Body"
  | "melvorF:Fletchers_Leggings"
  | "melvorF:Fletchers_Boots"
  | "melvorF:Crafters_Hat"
  | "melvorF:Crafters_Body"
  | "melvorF:Crafters_Leggings"
  | "melvorF:Crafters_Boots"
  | "melvorF:Runecrafters_Hat"
  | "melvorF:Runecrafters_Body"
  | "melvorF:Runecrafters_Leggings"
  | "melvorF:Runecrafters_Boots"
  | "melvorF:Potion_Makers_Hat"
  | "melvorF:Potion_Makers_Body"
  | "melvorF:Potion_Makers_Leggings"
  | "melvorF:Potion_Makers_Boots"
  | "melvorF:Performance_Enhancing_Hat"
  | "melvorF:Performance_Enhancing_Body"
  | "melvorF:Performance_Enhancing_Leggings"
  | "melvorF:Performance_Enhancing_Boots"
  | "melvorF:Star_Gazing_Hat"
  | "melvorF:Star_Gazing_Body"
  | "melvorF:Star_Gazing_Leggings"
  | "melvorF:Star_Gazing_Boots"
  | "melvorF:Marcy"
  | "melvorF:Roger"
  | "melvorF:Ace"
  | "melvorF:Layla"
  | "melvorF:MisterFuzzbutt"
  | "melvorF:OctaviusLepidus"
  | "melvorF:Warm_Beanie"
  | "melvorF:Pirate_Captain_Hat"
  | "melvorF:Prats_Hat"
  | "melvorF:Top_Hat"
  | "melvorF:Hunters_Hat"
  | "melvorF:Clown_Hat"
  | "melvorTotH:Corundum_Axe"
  | "melvorTotH:Augite_Axe"
  | "melvorTotH:Meteorite_Axe"
  | "melvorTotH:Divine_Axe"
  | "melvorTotH:Corundum_Pickaxe"
  | "melvorTotH:Augite_Pickaxe"
  | "melvorTotH:Meteorite_Pickaxe"
  | "melvorTotH:Divine_Pickaxe"
  | "melvorTotH:Corundum_Fishing_Rod"
  | "melvorTotH:Augite_Fishing_Rod"
  | "melvorTotH:Meteorite_Fishing_Rod"
  | "melvorTotH:Divine_Fishing_Rod"
  | "melvorTotH:SpruceCookingFire"
  | "melvorTotH:ElderWoodCookingFire"
  | "melvorTotH:CarrionCookingFire"
  | "melvorTotH:IridiumPot"
  | "melvorTotH:PalladiumPot"
  | "melvorTotH:DivinePot"
  | "melvorTotH:CorundumFurnace"
  | "melvorTotH:AugiteFurnace"
  | "melvorTotH:DivineFurnace"
  | "melvorTotH:Labyrinth_Solution"
  | "melvorTotH:Linden_Boat"
  | "melvorTotH:Golden_Compass"
  | "melvorTotH:Golden_Key"
  | "melvorTotH:Slayer_Torch"
  | "melvorTotH:Mystic_Lantern"
  | "melvorTotH:Slayer_Upgrade_Kit_Legendary"
  | "melvorTotH:Slayer_Upgrade_Kit_Mythical"
  | "melvorTotH:Superior_Max_Skillcape"
  | "melvorTotH:Superior_Agility_Skillcape"
  | "melvorTotH:Superior_Attack_Skillcape"
  | "melvorTotH:Superior_Astrology_Skillcape"
  | "melvorTotH:Superior_Cooking_Skillcape"
  | "melvorTotH:Superior_Crafting_Skillcape"
  | "melvorTotH:Superior_Defence_Skillcape"
  | "melvorTotH:Superior_Farming_Skillcape"
  | "melvorTotH:Superior_Firemaking_Skillcape"
  | "melvorTotH:Superior_Fishing_Skillcape"
  | "melvorTotH:Superior_Fletching_Skillcape"
  | "melvorTotH:Superior_Herblore_Skillcape"
  | "melvorTotH:Superior_Hitpoints_Skillcape"
  | "melvorTotH:Superior_Magic_Skillcape"
  | "melvorTotH:Superior_Mining_Skillcape"
  | "melvorTotH:Superior_Prayer_Skillcape"
  | "melvorTotH:Superior_Ranged_Skillcape"
  | "melvorTotH:Superior_Runecrafting_Skillcape"
  | "melvorTotH:Superior_Slayer_Skillcape"
  | "melvorTotH:Superior_Smithing_Skillcape"
  | "melvorTotH:Superior_Strength_Skillcape"
  | "melvorTotH:Superior_Summoning_Skillcape"
  | "melvorTotH:Superior_Thieving_Skillcape"
  | "melvorTotH:Superior_Township_Skillcape"
  | "melvorTotH:Superior_Woodcutting_Skillcape"
  | "melvorTotH:ClassyRock"
  | "melvorTotH:CuteRock"
  | "melvorTotH:RoyalRock"
  | "melvorTotH:ElfRock"
  | "melvorTotH:MagicRock"
  | "melvorTotH:PartyRock";
/**
 * The tier of a slayer task
 */
declare type SlayerTier = "Easy" | "Normal" | "Hard" | "Elite" | "Master" | "Legendary" | "Mythical";
declare type MonsterID =
  | "melvorD:BlackKnight"
  | "melvorD:HillGiant"
  | "melvorD:MossGiant"
  | "melvorD:GiantCrab"
  | "melvorD:Tentacle"
  | "melvorD:Seagull"
  | "melvorD:ConfusedPirate"
  | "melvorD:FrozenMammoth"
  | "melvorD:FrozenArcher"
  | "melvorD:WetMonster"
  | "melvorD:MoistMonster"
  | "melvorD:SweatyMonster"
  | "melvorD:Golbin"
  | "melvorD:RangedGolbin"
  | "melvorD:Chicken"
  | "melvorD:Cow"
  | "melvorD:Chick"
  | "melvorD:MummaChicken"
  | "melvorD:Pirate"
  | "melvorD:PirateCaptain"
  | "melvorD:TheKraken"
  | "melvorD:Bat"
  | "melvorD:BigBat"
  | "melvorD:TheEye"
  | "melvorD:ResurrectedEye"
  | "melvorD:PratTheProtectorOfSecrets"
  | "melvorD:MalcsTheGuardianOfMelvor"
  | "melvorD:Spider"
  | "melvorD:BrownSpider"
  | "melvorD:EvilSpider"
  | "melvorD:SpiderKing"
  | "melvorD:IceMonster"
  | "melvorD:IceTroll"
  | "melvorD:Ice"
  | "melvorD:ProtectorofIce"
  | "melvorD:FirstMate"
  | "melvorD:ZombieHand"
  | "melvorD:Zombie"
  | "melvorD:ZombieLeader"
  | "melvorD:Ghost"
  | "melvorD:GreenDragon"
  | "melvorD:BlueDragon"
  | "melvorD:RedDragon"
  | "melvorD:BlackDragon"
  | "melvorD:JuniorFarmer"
  | "melvorD:AdultFarmer"
  | "melvorD:MasterFarmer"
  | "melvorD:Wizard"
  | "melvorD:SteelKnight"
  | "melvorD:MithrilKnight"
  | "melvorD:AdamantKnight"
  | "melvorD:RuneKnight"
  | "melvorD:BanditTrainee"
  | "melvorD:Bandit"
  | "melvorD:BanditLeader"
  | "melvorD:DarkWizard"
  | "melvorD:MasterWizard"
  | "melvorD:ElderWizard"
  | "melvorD:Skeleton"
  | "melvorD:Leech"
  | "melvorD:ViciousSerpent"
  | "melvorD:FireSpirit"
  | "melvorD:Plant"
  | "melvorD:ElerineArcher"
  | "melvorD:ElerineWarrior"
  | "melvorD:ElerineMage"
  | "melvorF:RandomITM"
  | "melvorF:Mummy"
  | "melvorF:Statue"
  | "melvorF:StoneSnake"
  | "melvorF:UndeadWerewolf"
  | "melvorF:Vampire"
  | "melvorF:FierceDevil"
  | "melvorF:ManyEyedMonster"
  | "melvorF:StrangeEyedMonster"
  | "melvorF:LotsofEyes"
  | "melvorF:Eyes"
  | "melvorF:Griffin"
  | "melvorF:Pegasus"
  | "melvorF:Fairy"
  | "melvorF:Valkyrie"
  | "melvorF:Angel"
  | "melvorF:HolyArcher"
  | "melvorF:GooMonster"
  | "melvorF:GreenGooMonster"
  | "melvorF:PurpleGooMonster"
  | "melvorF:ScatteredGooMonster"
  | "melvorF:RagingHornedElite"
  | "melvorF:SeethingHornedElite"
  | "melvorF:DarkHornedElite"
  | "melvorF:AirGuard"
  | "melvorF:AirMonster"
  | "melvorF:AirGolem"
  | "melvorF:Aleron"
  | "melvorF:Voltaire"
  | "melvorF:Aeris"
  | "melvorF:WaterGuard"
  | "melvorF:WaterMonster"
  | "melvorF:WaterGolem"
  | "melvorF:Lissia"
  | "melvorF:Murtia"
  | "melvorF:Glacia"
  | "melvorF:EarthGuard"
  | "melvorF:EarthMonster"
  | "melvorF:EarthGolem"
  | "melvorF:Mistral"
  | "melvorF:Ophidia"
  | "melvorF:Terran"
  | "melvorF:FireGuard"
  | "melvorF:FireMonster"
  | "melvorF:FireGolem"
  | "melvorF:Pyra"
  | "melvorF:Ignis"
  | "melvorF:Ragnar"
  | "melvorF:ElderDragon"
  | "melvorF:FuriousHornedElite"
  | "melvorF:MioliteSprig"
  | "melvorF:MioliteTrio"
  | "melvorF:MioliteWarden"
  | "melvorF:MioliteMonarch"
  | "melvorF:Druid"
  | "melvorF:Thief"
  | "melvorF:Shaman"
  | "melvorF:Necromancer"
  | "melvorF:Elementalist"
  | "melvorF:TurkulRiders"
  | "melvorF:TurkulArchers"
  | "melvorF:TurkulThrowers"
  | "melvorF:TurkulGiant"
  | "melvorF:TurkulGeneral"
  | "melvorF:SandBeast"
  | "melvorF:RancoraSpider"
  | "melvorF:ElderVampire"
  | "melvorF:CursedMaiden"
  | "melvorF:BountyHunter"
  | "melvorF:ChaoticGreaterDragon"
  | "melvorF:HuntingGreaterDragon"
  | "melvorF:WickedGreaterDragon"
  | "melvorF:Umbora"
  | "melvorF:Rokken"
  | "melvorF:Kutul"
  | "melvorF:Paladin"
  | "melvorF:Priest"
  | "melvorF:WanderingBard"
  | "melvorF:Cerberus"
  | "melvorF:FearfulEye"
  | "melvorF:RedDevil"
  | "melvorF:Phoenix"
  | "melvorF:Incendius"
  | "melvorF:PratTheGuardianOfSecrets"
  | "melvorF:MalcsTheLeaderOfDragons"
  | "melvorF:MysteriousFigurePhase1"
  | "melvorF:MysteriousFigurePhase2"
  | "melvorF:Ahrenia"
  | "melvorF:SuperiorEyedMonster"
  | "melvorF:EyeOfFear"
  | "melvorF:Bane"
  | "melvorF:NoxiousSerpent"
  | "melvorF:VenomousSnake"
  | "melvorF:GiantMoth"
  | "melvorF:LegaranWurm"
  | "melvorF:CursedLich"
  | "melvorF:SpikedRedClaw"
  | "melvorF:GreaterSkeletalDragon"
  | "melvorF:BaneInstrumentOfFear"
  | "melvorTotH:RandomSpiderLair"
  | "melvorTotH:HungryPlant"
  | "melvorTotH:PoisonToad"
  | "melvorTotH:Kongamato"
  | "melvorTotH:Conda"
  | "melvorTotH:Alraune"
  | "melvorTotH:Morellia"
  | "melvorTotH:BurningSnake"
  | "melvorTotH:InfernalGolem"
  | "melvorTotH:MagicFireDemon"
  | "melvorTotH:Manticore"
  | "melvorTotH:GretYun"
  | "melvorTotH:Trogark"
  | "melvorTotH:LargeIceTroll"
  | "melvorTotH:FrostGolem"
  | "melvorTotH:PolarBear"
  | "melvorTotH:SpectralIceWolf"
  | "melvorTotH:IceHydra"
  | "melvorTotH:LightningSpirit"
  | "melvorTotH:LightningMonkey"
  | "melvorTotH:LightningGolem"
  | "melvorTotH:RaZu"
  | "melvorTotH:Siren"
  | "melvorTotH:MonsterCroc"
  | "melvorTotH:Leviathan"
  | "melvorTotH:TwinSeaDragonSerpent"
  | "melvorTotH:ScouterSpider"
  | "melvorTotH:TrapperSpider"
  | "melvorTotH:WickedSpider"
  | "melvorTotH:BasherSpider"
  | "melvorTotH:EnforcerSpider"
  | "melvorTotH:GuardianSpider"
  | "melvorTotH:SpiderQueen"
  | "melvorTotH:ShadowBeast"
  | "melvorTotH:PlagueDoctor"
  | "melvorTotH:Cockatrice"
  | "melvorTotH:GoliathWerewolf"
  | "melvorTotH:TreeGiant"
  | "melvorTotH:TreeSpirit"
  | "melvorTotH:CursedSpirit"
  | "melvorTotH:LadyDarkheart"
  | "melvorTotH:Phantom"
  | "melvorTotH:Banshee"
  | "melvorTotH:Spectre"
  | "melvorTotH:CursedSkeletonWarrior"
  | "melvorTotH:Beholder"
  | "melvorTotH:DarkKnight"
  | "melvorTotH:Fiozor"
  | "melvorTotH:Torvair"
  | "melvorTotH:Arctair"
  | "melvorTotH:Harkair"
  | "melvorTotH:VorloranDevastator"
  | "melvorTotH:VorloranWatcher"
  | "melvorTotH:VorloranProtector"
  | "melvorTotH:GuardianoftheHerald"
  | "melvorTotH:TheHeraldPhase1"
  | "melvorTotH:TheHeraldPhase2"
  | "melvorTotH:TheHeraldPhase3";
declare type TownshipBuildingID =
  | "melvorF:Blacksmiths_Smithy"
  | "melvorF:Magic_Emporium"
  | "melvorF:Hunters_Cabin"
  | "melvorF:Fishermans_Dock"
  | "melvorF:Herbalist"
  | "melvorF:Miners_Pit"
  | "melvorF:Town_Hall"
  | "melvorF:Storehouse"
  | "melvorF:Woodcutters_Camp"
  | "melvorF:Carpenters_Workshop"
  | "melvorF:Farmland"
  | "melvorF:Farmers_Market"
  | "melvorF:Gatherers_Hut"
  | "melvorF:School"
  | "melvorF:Large_School"
  | "melvorF:Academy"
  | "melvorF:Gardens"
  | "melvorF:Tavern"
  | "melvorF:Cemetery"
  | "melvorF:Blacksmiths_Workshop"
  | "melvorF:Hunters_Lodge"
  | "melvorF:Fishermans_Pier"
  | "melvorF:Infirmary"
  | "melvorF:Miners_Field"
  | "melvorF:Logging_Camp"
  | "melvorF:Carpenters_Factory"
  | "melvorF:Plantation"
  | "melvorF:Gatherers_Lodge"
  | "melvorF:Blacksmiths_Forge"
  | "melvorF:Hunters_Villa"
  | "melvorF:Fishermans_Port"
  | "melvorF:Healing_Centre"
  | "melvorF:Miners_Quarry"
  | "melvorF:Forestry_Camp"
  | "melvorF:Carpenters_Foundry"
  | "melvorF:Mill"
  | "melvorF:Gatherers_Villa"
  | "melvorF:Warehouse"
  | "melvorF:Repository"
  | "melvorF:Tailor"
  | "melvorF:Clothier"
  | "melvorF:Outfitter"
  | "melvorF:Prats_Hats"
  | "melvorF:Malcs_Cats"
  | "melvorF:Statues"
  | "melvorF:Chapel"
  | "melvorF:Library"
  | "melvorF:Trading_Post"
  | "melvorF:Orchard"
  | "melvorF:Basic_Shelter"
  | "melvorF:Wooden_Hut"
  | "melvorF:House"
  | "melvorF:Cottage"
  | "melvorF:Large_Cottage"
  | "melvorTotH:Lemvor_Lemon_Stall"
  | "melvorTotH:Blacksmiths_Estate"
  | "melvorTotH:Hunters_Estate"
  | "melvorTotH:Fishermans_Estate"
  | "melvorTotH:Hospital"
  | "melvorTotH:Miners_Estate"
  | "melvorTotH:Forestry_Estate"
  | "melvorTotH:Carpenters_Estate"
  | "melvorTotH:Farming_Estate"
  | "melvorTotH:Gatherers_Estate"
  | "melvorTotH:Clothier_Estate"
  | "melvorTotH:Large_Repository"
  | "melvorTotH:Large_Academy"
  | "melvorTotH:Cool_Rocks"
  | "melvorTotH:Manor"
  | "melvorTotH:Estate";
declare type EquipStatKey =
  | "attackSpeed"
  | "stabAttackBonus"
  | "slashAttackBonus"
  | "blockAttackBonus"
  | "rangedAttackBonus"
  | "magicAttackBonus"
  | "meleeStrengthBonus"
  | "rangedStrengthBonus"
  | "magicDamageBonus"
  | "meleeDefenceBonus"
  | "rangedDefenceBonus"
  | "magicDefenceBonus"
  | "damageReduction"
  | "summoningMaxhit";
declare type AnyConditionData =
  | CombatCondition
  | ItemInBankConditionData
  | ItemChargeConditionData
  | EveryConditionData
  | SomeConditionData
  | FightingBossCondition
  | EquipStatCompareCondition;
declare type CombatCondition =
  | HitpointsCondition
  | DOTCondition
  | ModifierEffectCondition
  | AttackTypeCondition
  | IsFightingCondition
  | StunnedCondition
  | SleepingCondition;
/**
 * Compares the hitpoints percent of the specified character with value
 */
declare type HitpointsCondition = HitpointsCondition1 & {
  type: "Hitpoints";
  [k: string]: unknown;
};
declare type HitpointsCondition1 = ValueCondition;
declare type Comparison = "==" | "!=" | ">" | "<" | "<=" | ">=";
/**
 * Requires that character has a DOT of the specified type
 */
declare type DOTCondition = DOTCondition1 & {
  type: "DOT";
  /**
   * The DOT subtype that must be on the character
   */
  dotType: DOTType;
  [k: string]: unknown;
};
declare type DOTCondition1 = BooleanCondition;
/**
 * Requires that character has a Modifier Effect of the specified type
 */
declare type ModifierEffectCondition = ModifierEffectCondition1 & {
  type: "Effect";
  /**
   * Specifies the modifier effect that must be on the character.
   */
  effectType: "Slow" | "Frostburn";
  [k: string]: unknown;
};
declare type ModifierEffectCondition1 = BooleanCondition;
/**
 * Requires that the character and their target have the specified Combat Styles
 */
declare type AttackTypeCondition = AttackTypeCondition1 & {
  type: "CombatType";
  /**
   * The combat style that the character must use
   */
  thisAttackType: AttackType | "any";
  /**
   * The combat style that the character's target must use
   */
  targetAttackType: AttackType | "any";
  [k: string]: unknown;
};
declare type AttackTypeCondition1 = BooleanCondition;
declare type AttackType = "melee" | "ranged" | "magic";
/**
 * Requires that the player is fighting something
 */
declare type IsFightingCondition = IsFightingCondition1 & {
  type: "IsFighting";
  [k: string]: unknown;
};
declare type IsFightingCondition1 = BooleanCondition;
/**
 * Requires that the specified character is stunned/frozen
 */
declare type StunnedCondition = StunnedCondition1 & {
  type: "IsStunned";
  /**
   * Optional. If present, the stun flavour on the character must match, otherwise matches both stuns and freezes
   */
  flavour?: StunFlavour;
  [k: string]: unknown;
};
declare type StunnedCondition1 = BooleanCondition;
/**
 * Requires that the specified character is sleeping
 */
declare type SleepingCondition = SleepingCondition1 & {
  type: "IsSleeping";
  [k: string]: unknown;
};
declare type SleepingCondition1 = BooleanCondition;
/**
 * Compares the quantity of the specified item in the bank with value
 */
declare type ItemInBankConditionData = ItemInBankConditionData1 & {
  type: "BankItem";
  /**
   * The ID of the item that must be present in the bank
   */
  itemID: AnyItemID;
  [k: string]: unknown;
};
declare type ItemInBankConditionData1 = ValueCondition;
/**
 * Compares the quantity of item charges of the equipment item with value
 */
declare type ItemChargeConditionData = ItemChargeConditionData1 & {
  type: "ItemCharge";
  /**
   * The ID of the equipment item that has charges
   */
  itemID: EquipmentItemID;
  [k: string]: unknown;
};
declare type ItemChargeConditionData1 = ValueCondition;
/**
 * Requires that the Player is fighting a Boss monster
 */
declare type FightingBossCondition = FightingBossCondition1 & {
  type: "FightingBoss";
  [k: string]: unknown;
};
declare type FightingBossCondition1 = BooleanCondition;
declare type SpecialAttackID =
  | "melvorD:Normal"
  | "melvorD:BruteForce"
  | "melvorD:LifeLeech"
  | "melvorD:FrozenWind"
  | "melvorD:SunsetStab"
  | "melvorD:PiercingArrow"
  | "melvorD:Volley"
  | "melvorD:RazorSharpClaws"
  | "melvorD:Dragonbreath"
  | "melvorD:FrozenShot"
  | "melvorD:XmasDeath"
  | "melvorD:XmasKill"
  | "melvorD:Frostburn"
  | "melvorD:LesserDragonbreath"
  | "melvorD:Venom"
  | "melvorD:RapidFire"
  | "melvorD:Fleetness"
  | "melvorD:PebbleShot"
  | "melvorD:OnTheHunt"
  | "melvorD:Onslaught"
  | "melvorD:TopazShots"
  | "melvorD:SapphireShots"
  | "melvorD:RubyShots"
  | "melvorD:EmeraldShots"
  | "melvorD:DiamondShots"
  | "melvorD:JadestoneShots"
  | "melvorD:PoisonMelee"
  | "melvorD:BurnMelee"
  | "melvorD:FrostburnMelee"
  | "melvorD:PoisonRanged"
  | "melvorD:BurnRanged"
  | "melvorD:FrostburnRanged"
  | "melvorD:Burn"
  | "melvorD:FrostburnPlayer"
  | "melvorD:TripleDamage"
  | "melvorD:NoDamage"
  | "melvorD:TiltedShot"
  | "melvorD:UnlimitedSlappingPower"
  | "melvorD:Firebreathing"
  | "melvorD:StoneBarrier"
  | "melvorD:ImpossibleShot"
  | "melvorD:Heal"
  | "melvorF:DoubleSwipe"
  | "melvorF:TripleSwipe"
  | "melvorF:Flurry"
  | "melvorF:IcePrison"
  | "melvorF:Infernum"
  | "melvorF:CrushingBlow"
  | "melvorF:Stormsnap"
  | "melvorF:DualAttack"
  | "melvorF:FreezeRay"
  | "melvorF:SlicingWinds"
  | "melvorF:IcicleVolley"
  | "melvorF:Ignite"
  | "melvorF:Gust"
  | "melvorF:Frostbite"
  | "melvorF:Quake"
  | "melvorF:Incinerate"
  | "melvorF:ImpairingShot"
  | "melvorF:DrowsySpores"
  | "melvorF:Quicksand"
  | "melvorF:Sandblast"
  | "melvorF:Sandstorm"
  | "melvorF:DeadlyCut"
  | "melvorF:Rend"
  | "melvorF:QuadSwipe"
  | "melvorF:TidalWave"
  | "melvorF:OceanSong"
  | "melvorF:Shockwave"
  | "melvorF:Barrage"
  | "melvorF:WindBlade"
  | "melvorF:Whirlwind"
  | "melvorF:Tornado"
  | "melvorF:Cyclone"
  | "melvorF:IcyChill"
  | "melvorF:FrozenSpears"
  | "melvorF:IceBreak"
  | "melvorF:FlashFreeze"
  | "melvorF:Winterland"
  | "melvorF:FrigidWaves"
  | "melvorF:StoneWall"
  | "melvorF:Charge"
  | "melvorF:Boulder"
  | "melvorF:GraspingRoots"
  | "melvorF:SeismicSlam"
  | "melvorF:Fireball"
  | "melvorF:BurningClaws"
  | "melvorF:ScorchingRay"
  | "melvorF:MeteorShower"
  | "melvorF:Cataclysm"
  | "melvorF:Spores"
  | "melvorF:DrowsySporesEnemy"
  | "melvorF:GreaterSandstorm"
  | "melvorF:Webshot"
  | "melvorF:Drain"
  | "melvorF:CurseofFear"
  | "melvorF:HunterExpertise"
  | "melvorF:GreaterDragonbreath"
  | "melvorF:ChaoticSlam"
  | "melvorF:Agility"
  | "melvorF:Confusion"
  | "melvorF:Elusiveness"
  | "melvorF:RapidOnslaught"
  | "melvorF:ShockwaveEnemy"
  | "melvorF:CurseoftheDeep"
  | "melvorF:BurningTrail"
  | "melvorF:InfernalVolley"
  | "melvorF:TailWhip"
  | "melvorF:PenetratingClaws"
  | "melvorF:Inferno"
  | "melvorF:Sealing"
  | "melvorF:MarkofDeath"
  | "melvorF:CursedEdge"
  | "melvorF:ReapandReturn"
  | "melvorF:ConcealedDanger"
  | "melvorF:Shadowstep"
  | "melvorF:ShadowBurst"
  | "melvorF:IntotheMist"
  | "melvorF:FallenLight"
  | "melvorF:InfinityDragonbreath"
  | "melvorF:LesserSandstorm"
  | "melvorF:ElementalImpactBurn"
  | "melvorF:ElementalImpactStun"
  | "melvorF:ElementalImpactFreeze"
  | "melvorF:ElementalImpactFrostburn"
  | "melvorF:BurningFireball"
  | "melvorF:FragileMind"
  | "melvorF:UnknownThreat"
  | "melvorF:MistWalk"
  | "melvorF:Suffocate"
  | "melvorF:PoisonBreath"
  | "melvorF:ToxicBite"
  | "melvorF:NoxiousPowder"
  | "melvorF:PenetratingSpikeShot"
  | "melvorF:ToxicNeedles"
  | "melvorF:Burrow"
  | "melvorF:CursedFlames"
  | "melvorF:CursedFrostShards"
  | "melvorF:CursedTether"
  | "melvorF:CrushingClaws"
  | "melvorF:Cleave"
  | "melvorF:SavageSpike"
  | "melvorF:BoneCrush"
  | "melvorF:SpikedTailWhip"
  | "melvorF:Desecration"
  | "melvorF:DoubleEdged"
  | "melvorF:SwiftAttack"
  | "melvorF:PoisonedHit"
  | "melvorF:BladeEchoes"
  | "melvorF:BarragePlayer"
  | "melvorF:SpiritPower"
  | "melvorF:CrushingDoubleSlash"
  | "melvorF:NaturesCall"
  | "melvorF:NaturesWrath"
  | "melvorF:Ram"
  | "melvorF:HornShots"
  | "melvorF:OverwhelmingPower"
  | "melvorTotH:MeteorShot"
  | "melvorTotH:Bind"
  | "melvorTotH:LureTrap"
  | "melvorTotH:SharpWing"
  | "melvorTotH:FerociousBite"
  | "melvorTotH:PoisonousFangs"
  | "melvorTotH:DeadlyWrap"
  | "melvorTotH:Efflorescence"
  | "melvorTotH:ThornedRoots"
  | "melvorTotH:RazorWind"
  | "melvorTotH:PoisonBulbs"
  | "melvorTotH:SeekingRoots"
  | "melvorTotH:FullBloom"
  | "melvorTotH:PoisonBite"
  | "melvorTotH:Smother"
  | "melvorTotH:FlameBarrage"
  | "melvorTotH:SmolderingBlow"
  | "melvorTotH:LavaWave"
  | "melvorTotH:Explosion"
  | "melvorTotH:FlameRush"
  | "melvorTotH:FatalSpike"
  | "melvorTotH:GreaterFireball"
  | "melvorTotH:Headbutt"
  | "melvorTotH:MasterOfHeat"
  | "melvorTotH:MegaFireball"
  | "melvorTotH:BurningFury"
  | "melvorTotH:WardOfFlame"
  | "melvorTotH:UnleashedPower"
  | "melvorTotH:FrozenClub"
  | "melvorTotH:RollingSnowball"
  | "melvorTotH:ChillingWinds"
  | "melvorTotH:IceShards"
  | "melvorTotH:FreezingRoar"
  | "melvorTotH:SpectralClones"
  | "melvorTotH:IceBlast"
  | "melvorTotH:FreezingBreath"
  | "melvorTotH:IceReanimation"
  | "melvorTotH:ElectricBall"
  | "melvorTotH:RapidStaticStrikes"
  | "melvorTotH:FocusedStaticPunch"
  | "melvorTotH:ShockBlast"
  | "melvorTotH:LightningStrike"
  | "melvorTotH:ElectricCharge"
  | "melvorTotH:LightningBreath"
  | "melvorTotH:Thunderbolt"
  | "melvorTotH:Allure"
  | "melvorTotH:Drown"
  | "melvorTotH:Predator"
  | "melvorTotH:CrushingJaws"
  | "melvorTotH:SpikesFromBelow"
  | "melvorTotH:SpikedSlam"
  | "melvorTotH:WaterDance"
  | "melvorTotH:TorrentialDragonbreath"
  | "melvorTotH:GiantBubble"
  | "melvorTotH:Tsunami"
  | "melvorTotH:WebTrap"
  | "melvorTotH:DeadlyBite"
  | "melvorTotH:SharpSlice"
  | "melvorTotH:FatalBite"
  | "melvorTotH:CaughtInTheWeb"
  | "melvorTotH:Surrounded"
  | "melvorTotH:ShadowBite"
  | "melvorTotH:HarmfulConcoction"
  | "melvorTotH:DiseaseSwarm"
  | "melvorTotH:Lifedrain"
  | "melvorTotH:DecayingShots"
  | "melvorTotH:CrushingSmash"
  | "melvorTotH:Entangle"
  | "melvorTotH:TreeSlam"
  | "melvorTotH:Regrowth"
  | "melvorTotH:CurseOfMadness"
  | "melvorTotH:SilenceOfTheForest"
  | "melvorTotH:CurseOfTorment"
  | "melvorTotH:Soulburn"
  | "melvorTotH:CurseOfDespair"
  | "melvorTotH:DevourerOfTheCursed"
  | "melvorTotH:EtheralShots"
  | "melvorTotH:WeakeningShot"
  | "melvorTotH:GhostlyTerror"
  | "melvorTotH:BlindingFear"
  | "melvorTotH:SpinningAxe"
  | "melvorTotH:Anguish"
  | "melvorTotH:ConfusedTouch"
  | "melvorTotH:BlindingBeams"
  | "melvorTotH:PetrifyingGlare"
  | "melvorTotH:ShadeSummon"
  | "melvorTotH:GreaterShadeSummon"
  | "melvorTotH:BladeShadow"
  | "melvorTotH:Darkblade"
  | "melvorTotH:PhantomSummon"
  | "melvorTotH:CurseTotemSummon"
  | "melvorTotH:FeatherStorm"
  | "melvorTotH:FeatherBarrier"
  | "melvorTotH:FeatherLance"
  | "melvorTotH:AgileWings"
  | "melvorTotH:RapidParry"
  | "melvorTotH:FullCharge"
  | "melvorTotH:WindBarrier"
  | "melvorTotH:FeatherTornado"
  | "melvorTotH:AggressiveOnslaught"
  | "melvorTotH:Battlecry"
  | "melvorTotH:UnstoppableForce"
  | "melvorTotH:Sunder"
  | "melvorTotH:ChronoCurse"
  | "melvorTotH:Alacrity"
  | "melvorTotH:DejaVu"
  | "melvorTotH:TouchOfAffliction"
  | "melvorTotH:ShardsOfMillennia"
  | "melvorTotH:PowerOfTheMist"
  | "melvorTotH:UnisonOfFireAndEarth"
  | "melvorTotH:UnisonOfAirAndWater"
  | "melvorTotH:SealedFate"
  | "melvorTotH:SlicingMaelstrom"
  | "melvorTotH:PoisonPods"
  | "melvorTotH:GiantFireball"
  | "melvorTotH:ThunderStrike"
  | "melvorTotH:MeteorShowerArchaic"
  | "melvorTotH:TsunamiArchaic"
  | "melvorTotH:NaturesBloom"
  | "melvorTotH:InfernalPower"
  | "melvorTotH:Soulash"
  | "melvorTotH:DragonStormCall"
  | "melvorTotH:SlicingMaelstromArchaic"
  | "melvorTotH:BurningEmbers"
  | "melvorTotH:MeteorSwing"
  | "melvorTotH:Reduction"
  | "melvorTotH:DarkBladePlayer"
  | "melvorTotH:BadThrow"
  | "melvorTotH:GoodThrow"
  | "melvorTotH:ThornedPower"
  | "melvorTotH:HeatedFury"
  | "melvorTotH:SpectralIceBlades"
  | "melvorTotH:LargeLightningStrike"
  | "melvorTotH:LargeThunderStrike"
  | "melvorTotH:TorrentialBlast"
  | "melvorTotH:PiercingToxicStrike"
  | "melvorTotH:EtheralArrows"
  | "melvorTotH:SoulashPlayer"
  | "melvorTotH:SpinningAxePlayer"
  | "melvorTotH:CorundumWounds"
  | "melvorTotH:AugiteCrystallization"
  | "melvorTotH:DivineBreaker"
  | "melvorTotH:ElderwoodPoison"
  | "melvorTotH:RevenantHunter"
  | "melvorTotH:CarrionMarker"
  | "melvorTotH:PoisonSplit"
  | "melvorTotH:AgileWingsPlayer"
  | "melvorTotH:LightningStrikeEnemy";
declare type ItemEffectID = "melvorF:Absorbing_Shield" | "melvorTotH:Leviathan" | "melvorTotH:Rage";
/**
 * Type of ammo
 */
declare type AmmoType = "Arrows" | "Bolts" | "Javelins" | "ThrowingKnives" | "None";
declare type GameEventMatcherData =
  | WoodcuttingEventMatcherOptions
  | FishingActionEventMatcherOptions
  | FiremakingActionEventMatcherOptions
  | BonfireLitEventMatcherOptions
  | CookingActionEventMatcherOptions
  | MiningActionEventMatcherOptions
  | SmithingActionEventMatcherOptions
  | ThievingActionEventMatcherOptions
  | FarmingPlantActionEventMatcherOptions
  | FarmingHarvestActionEventMatcherOptions
  | FletchingActionEventMatcherOptions
  | CraftingActionEventMatcherOptions
  | RunecraftingActionEventMatcherOptions
  | HerbloreActionEventMatcherOptions
  | AgilityActionEventMatcherOptions
  | SummoningActionEventMatcherOptions
  | AstrologyActionEventMatcherOptions
  | AltMagicActionEventMatcherOptions
  | MonsterDropEventMatcherOptions
  | PlayerAttackEventMatcherOptions
  | EnemyAttackEventMatcherOptions
  | FoodEatenEventMatcherOptions
  | PrayerPointConsumptionEventMatcherOptions
  | PlayerHitpointsRegenerationEventMatcherOptions
  | PlayerSummonAttackEventMatcherOptions
  | RuneConsumptionEventMatcherOptions
  | PotionUsedEventMatcherOptions
  | PotionChargeUsedEventMatcherOptions
  | MonsterKilledEventMatcherOptions
  | ItemEquippedEventMatcherOptions
  | FoodEquippedEventMatcherOptions
  | ShopPurchaseMadeEventMatcherOptions
  | SummonTabletUsedEventMatcherOptions;
/**
 * Matches when a Woodcutting action occurs
 */
declare type WoodcuttingEventMatcherOptions = WoodcuttingEventMatcherOptions1 & {
  type: "WoodcuttingAction";
  /**
   * Optional. If present the action giving a Bird's nest item as a reward must match
   */
  nestGiven?: boolean;
  /**
   * Optional. If present, the action must be cutting at least one of the specified Tree IDs
   *
   * @minItems 1
   */
  actionIDs?: [WoodcuttingActionID, ...WoodcuttingActionID[]];
  [k: string]: unknown;
};
declare type WoodcuttingEventMatcherOptions1 = SkillActionEventMatcherOptions;
declare type WoodcuttingActionID =
  | "melvorD:Normal"
  | "melvorD:Oak"
  | "melvorD:Willow"
  | "melvorD:Teak"
  | "melvorD:Maple"
  | "melvorD:Mahogany"
  | "melvorD:Yew"
  | "melvorD:Magic"
  | "melvorD:Redwood"
  | "melvorTotH:Spruce"
  | "melvorTotH:Hornbeam"
  | "melvorTotH:Grove"
  | "melvorTotH:Linden"
  | "melvorTotH:Elderwood"
  | "melvorTotH:Red_Oak"
  | "melvorTotH:Revenant"
  | "melvorTotH:Mystic"
  | "melvorTotH:Carrion";
/**
 * Matches when a Fishing action occurs
 */
declare type FishingActionEventMatcherOptions = FishingActionEventMatcherOptions1 & {
  type: "FishingAction";
  /**
   * Optional. If present, the action must have an ID that matches one element of the array
   *
   * @minItems 1
   */
  actionIDs?: [FishingActionID, ...FishingActionID[]];
  /**
   * Optional. If present, the fishing area must have an ID that matches one element of the array
   *
   * @minItems 1
   */
  areaIDs?: [FishingAreaID, ...FishingAreaID[]];
  /**
   * Optional. If present, the primary reward being a Gem item must match
   */
  gemGiven?: boolean;
  /**
   * Optional. If present, the normal action reward having a Cooked version must match
   */
  cookedVersionExists?: boolean;
  [k: string]: unknown;
};
declare type FishingActionEventMatcherOptions1 = SkillActionEventMatcherOptions;
declare type FishingActionID =
  | "melvorD:Raw_Shrimp"
  | "melvorD:Raw_Sardine"
  | "melvorD:Raw_Herring"
  | "melvorD:Raw_Trout"
  | "melvorD:Raw_Salmon"
  | "melvorD:Raw_Lobster"
  | "melvorD:Raw_Swordfish"
  | "melvorD:Raw_Crab"
  | "melvorD:Raw_Shark"
  | "melvorD:Raw_Cave_Fish"
  | "melvorD:Raw_Manta_Ray"
  | "melvorD:Raw_Whale"
  | "melvorD:Raw_Blowfish"
  | "melvorD:Raw_Poison_Fish"
  | "melvorD:Leaping_Trout"
  | "melvorD:Leaping_Salmon"
  | "melvorD:Leaping_Broad_Fish"
  | "melvorD:Raw_Magic_Fish"
  | "melvorD:Raw_Anglerfish"
  | "melvorD:Raw_Fanfish"
  | "melvorD:Raw_Seahorse"
  | "melvorD:Raw_Carp"
  | "melvorD:Raw_Skeleton_Fish"
  | "melvorTotH:Raw_Lava_Fish"
  | "melvorTotH:Raw_Spike_Fish"
  | "melvorTotH:Raw_Rockfish"
  | "melvorTotH:Raw_Blue_Crab"
  | "melvorTotH:Raw_Magma_Fish"
  | "melvorTotH:Raw_Large_Blowfish"
  | "melvorTotH:Raw_Static_Jellyfish"
  | "melvorTotH:Raw_Frost_Crab"
  | "melvorTotH:Raw_Magma_Eel"
  | "melvorTotH:Raw_Frozen_Manta_Ray"
  | "melvorTotH:Raw_Ghost_Fish"
  | "melvorTotH:Raw_Mystic_Seahorse"
  | "melvorTotH:Raw_Terrorfish"
  | "melvorTotH:Raw_Mystic_Shark";
declare type FishingAreaID =
  | "melvorD:ShallowShores"
  | "melvorD:ShrapnelRiver"
  | "melvorD:TrenchOfDespair"
  | "melvorD:LemvorPier"
  | "melvorD:OpenWaters"
  | "melvorD:BarrenOcean"
  | "melvorD:BarbarianFishing"
  | "melvorD:SecretArea"
  | "melvorTotH:MagmaLake"
  | "melvorTotH:JungleWaters"
  | "melvorTotH:StaticValley"
  | "melvorTotH:FrozenSea"
  | "melvorTotH:MidnightLagoon"
  | "melvorTotH:MysticPond";
/**
 * Matches when a Firemaking action occurs
 */
declare type FiremakingActionEventMatcherOptions = FiremakingActionEventMatcherOptions1 & {
  type: "FiremakingAction";
  /**
   * Optional. If present, the action must have an ID that matches one element of the array
   *
   * @minItems 1
   */
  actionIDs?: [FiremakingActionID, ...FiremakingActionID[]];
  [k: string]: unknown;
};
declare type FiremakingActionEventMatcherOptions1 = SkillActionEventMatcherOptions;
declare type FiremakingActionID =
  | "melvorD:Normal_Logs"
  | "melvorD:Oak_Logs"
  | "melvorD:Willow_Logs"
  | "melvorD:Teak_Logs"
  | "melvorD:Maple_Logs"
  | "melvorD:Mahogany_Logs"
  | "melvorD:Yew_Logs"
  | "melvorD:Magic_Logs"
  | "melvorD:Redwood_Logs"
  | "melvorTotH:Spruce_Logs"
  | "melvorTotH:Hornbeam_Logs"
  | "melvorTotH:Grove_Logs"
  | "melvorTotH:Linden_Logs"
  | "melvorTotH:Elderwood_Logs"
  | "melvorTotH:Red_Oak_Logs"
  | "melvorTotH:Revenant_Logs"
  | "melvorTotH:Mystic_Logs"
  | "melvorTotH:Carrion_Logs";
/**
 * Matches when a Cooking action occurs
 */
declare type CookingActionEventMatcherOptions = CookingActionEventMatcherOptions1 & {
  type: "CookingAction";
  /**
   * Optional. If present, the action must have an ID that matches one element of the array
   *
   * @minItems 1
   */
  actionIDs?: [CookingActionID, ...CookingActionID[]];
  /**
   * Optional. If present, the category of the cooking action must have an ID that matches one element of the array
   *
   * @minItems 1
   */
  categoryIDs?: [CookingCategoryID, ...CookingCategoryID[]];
  /**
   * Optional. If present, the player passive cooking during the action must match
   */
  isPassiveCooking?: boolean;
  [k: string]: unknown;
};
declare type CookingActionEventMatcherOptions1 = SkillActionEventMatcherOptions;
declare type CookingActionID =
  | "melvorD:Shrimp"
  | "melvorD:Sardine"
  | "melvorD:Herring"
  | "melvorD:Trout"
  | "melvorD:Salmon"
  | "melvorD:Lobster"
  | "melvorD:Swordfish"
  | "melvorD:Crab"
  | "melvorD:Shark"
  | "melvorD:Cave_Fish"
  | "melvorD:Manta_Ray"
  | "melvorD:Whale"
  | "melvorD:Anglerfish"
  | "melvorD:Fanfish"
  | "melvorD:Seahorse"
  | "melvorD:Carp"
  | "melvorD:Bread"
  | "melvorD:Beef"
  | "melvorD:Chicken"
  | "melvorD:Plain_Pizza_Slice"
  | "melvorD:Beef_Pie"
  | "melvorD:Meat_Pizza_Slice"
  | "melvorD:Basic_Soup"
  | "melvorD:Strawberry_Cupcake"
  | "melvorD:Hearty_Soup"
  | "melvorD:Cherry_Cupcake"
  | "melvorD:Cream_Corn_Soup"
  | "melvorD:Chicken_Soup"
  | "melvorD:Strawberry_Cake"
  | "melvorD:Carrot_Cake"
  | "melvorTotH:Lava_Fish"
  | "melvorTotH:Blue_Crab"
  | "melvorTotH:Magma_Fish"
  | "melvorTotH:Static_Jellyfish"
  | "melvorTotH:Frost_Crab"
  | "melvorTotH:Magma_Eel"
  | "melvorTotH:Frozen_Manta_Ray"
  | "melvorTotH:Terrorfish"
  | "melvorTotH:Mystic_Shark"
  | "melvorTotH:Banana_Bread"
  | "melvorTotH:Mushroom_Soup"
  | "melvorTotH:Spicy_Chicken_Pizza"
  | "melvorTotH:Beef_Mushroom_Stew"
  | "melvorTotH:Sandwich"
  | "melvorTotH:Pumpkin_Soup"
  | "melvorTotH:Spicy_Shrimp_Soup"
  | "melvorTotH:Fancy_Meat_Pizza"
  | "melvorTotH:Chicken_Cream_Mushroom_Soup"
  | "melvorTotH:Chilli_Frost_Crab"
  | "melvorTotH:Starfruit_Cake";
declare type CookingCategoryID = "melvorD:Fire" | "melvorD:Furnace" | "melvorD:Pot";
/**
 * Matches when a Mining action occurs
 */
declare type MiningActionEventMatcherOptions = MiningActionEventMatcherOptions1 & {
  type: "MiningAction";
  /**
   * Optional. If present, the action must have an ID that matches one element of the array
   *
   * @minItems 1
   */
  actionIDs?: [MiningActionID, ...MiningActionID[]];
  /**
   * Optional. If present, the action giving a standard gem reward must match
   */
  gemObtained?: boolean;
  /**
   * Optional. If present, the actions primary reward having a corresponding Smithing Bar must match
   */
  smithedVersionExists?: boolean;
  /**
   * Optional. If present, the actions ability to give standard gems must match
   */
  actionGivesGems?: boolean;
  /**
   * Optional. If present, the actions ability to give superior gems must match
   */
  actionGivesSuperiorGems?: boolean;
  /**
   * Optional. If present, the actions ore type must match an element of the array
   *
   * @minItems 1
   */
  oreTypes?: [MiningRockType, ...MiningRockType[]];
  [k: string]: unknown;
};
declare type MiningActionEventMatcherOptions1 = SkillActionEventMatcherOptions;
declare type MiningActionID =
  | "melvorD:Rune_Essence"
  | "melvorD:Copper_Ore"
  | "melvorD:Tin_Ore"
  | "melvorD:Iron_Ore"
  | "melvorD:Coal_Ore"
  | "melvorD:Silver_Ore"
  | "melvorD:Gold_Ore"
  | "melvorD:Mithril_Ore"
  | "melvorD:Adamantite_Ore"
  | "melvorD:Runite_Ore"
  | "melvorD:Dragonite_Ore"
  | "melvorTotH:Corundumite_Ore"
  | "melvorTotH:Pure_Essence"
  | "melvorTotH:Onyx"
  | "melvorTotH:Iridium_Ore"
  | "melvorTotH:Palladium_Ore"
  | "melvorTotH:Augite_Ore"
  | "melvorTotH:Oricha"
  | "melvorTotH:Meteorite_Ore"
  | "melvorTotH:Divinite_Ore"
  | "melvorTotH:Cerulean";
declare type MiningRockType = "Ore" | "Essence" | "Gem";
/**
 * Matches when a Smithing action occurs
 */
declare type SmithingActionEventMatcherOptions = SmithingActionEventMatcherOptions1 & {
  type: "SmithingAction";
  /**
   * Optional. If present, the action must have an ID that matches one element of the array
   *
   * @minItems 1
   */
  actionIDs?: [SmithingActionID, ...SmithingActionID[]];
  /**
   * Optional. If present, the category of the smithing action must have an ID that matches one element of the array
   *
   * @minItems 1
   */
  categoryIDs?: [SmithingCategoryID, ...SmithingCategoryID[]];
  /**
   * Optional. If present, one of the items consumed in the action must have an ID that m atches one element of the array
   *
   * @minItems 1
   */
  consumedItemIDs?: [AnyItemID, ...AnyItemID[]];
  [k: string]: unknown;
};
declare type SmithingActionEventMatcherOptions1 = SkillActionEventMatcherOptions;
declare type SmithingActionID =
  | "melvorD:Bronze_Bar"
  | "melvorD:Iron_Bar"
  | "melvorD:Steel_Bar"
  | "melvorD:Gold_Bar"
  | "melvorD:Mithril_Bar"
  | "melvorD:Adamantite_Bar"
  | "melvorD:Runite_Bar"
  | "melvorD:Dragonite_Bar"
  | "melvorD:Silver_Bar"
  | "melvorD:Bronze_Dagger"
  | "melvorD:Bronze_Sword"
  | "melvorD:Bronze_Battleaxe"
  | "melvorD:Bronze_2H_Sword"
  | "melvorD:Bronze_Helmet"
  | "melvorD:Bronze_Boots"
  | "melvorD:Bronze_Platelegs"
  | "melvorD:Bronze_Platebody"
  | "melvorD:Iron_Dagger"
  | "melvorD:Iron_Sword"
  | "melvorD:Iron_Battleaxe"
  | "melvorD:Iron_2H_Sword"
  | "melvorD:Iron_Helmet"
  | "melvorD:Iron_Boots"
  | "melvorD:Iron_Platelegs"
  | "melvorD:Iron_Platebody"
  | "melvorD:Steel_Dagger"
  | "melvorD:Steel_Sword"
  | "melvorD:Steel_Battleaxe"
  | "melvorD:Steel_2H_Sword"
  | "melvorD:Steel_Helmet"
  | "melvorD:Steel_Boots"
  | "melvorD:Steel_Platelegs"
  | "melvorD:Steel_Platebody"
  | "melvorD:Mithril_Dagger"
  | "melvorD:Mithril_Sword"
  | "melvorD:Mithril_Battleaxe"
  | "melvorD:Mithril_2H_Sword"
  | "melvorD:Mithril_Helmet"
  | "melvorD:Mithril_Boots"
  | "melvorD:Mithril_Platelegs"
  | "melvorD:Mithril_Platebody"
  | "melvorD:Adamant_Dagger"
  | "melvorD:Adamant_Sword"
  | "melvorD:Adamant_Battleaxe"
  | "melvorD:Adamant_2H_Sword"
  | "melvorD:Adamant_Helmet"
  | "melvorD:Adamant_Boots"
  | "melvorD:Adamant_Platelegs"
  | "melvorD:Adamant_Platebody"
  | "melvorD:Rune_Dagger"
  | "melvorD:Rune_Sword"
  | "melvorD:Rune_Battleaxe"
  | "melvorD:Rune_2H_Sword"
  | "melvorD:Rune_Helmet"
  | "melvorD:Rune_Boots"
  | "melvorD:Rune_Platelegs"
  | "melvorD:Rune_Platebody"
  | "melvorD:Dragon_Dagger"
  | "melvorD:Dragon_Sword"
  | "melvorD:Dragon_Battleaxe"
  | "melvorD:Dragon_2H_Sword"
  | "melvorD:Dragon_Helmet"
  | "melvorD:Dragon_Boots"
  | "melvorD:Dragon_Platelegs"
  | "melvorD:Dragon_Platebody"
  | "melvorD:Bronze_Shield"
  | "melvorD:Iron_Shield"
  | "melvorD:Steel_Shield"
  | "melvorD:Mithril_Shield"
  | "melvorD:Adamant_Shield"
  | "melvorD:Rune_Shield"
  | "melvorD:Dragon_Shield"
  | "melvorD:Bronze_Arrowtips"
  | "melvorD:Iron_Arrowtips"
  | "melvorD:Steel_Arrowtips"
  | "melvorD:Mithril_Arrowtips"
  | "melvorD:Adamant_Arrowtips"
  | "melvorD:Rune_Arrowtips"
  | "melvorD:Dragon_Arrowtips"
  | "melvorD:Bronze_Scimitar"
  | "melvorD:Iron_Scimitar"
  | "melvorD:Steel_Scimitar"
  | "melvorD:Mithril_Scimitar"
  | "melvorD:Adamant_Scimitar"
  | "melvorD:Rune_Scimitar"
  | "melvorD:Dragon_Scimitar"
  | "melvorD:Bronze_Gloves"
  | "melvorD:Iron_Gloves"
  | "melvorD:Steel_Gloves"
  | "melvorD:Mithril_Gloves"
  | "melvorD:Adamant_Gloves"
  | "melvorD:Rune_Gloves"
  | "melvorD:Dragon_Gloves"
  | "melvorD:Bronze_Crossbow_Head"
  | "melvorD:Iron_Crossbow_Head"
  | "melvorD:Steel_Crossbow_Head"
  | "melvorD:Mithril_Crossbow_Head"
  | "melvorD:Adamant_Crossbow_Head"
  | "melvorD:Rune_Crossbow_Head"
  | "melvorD:Dragon_Crossbow_Head"
  | "melvorD:Bronze_Javelin_Heads"
  | "melvorD:Iron_Javelin_Heads"
  | "melvorD:Steel_Javelin_Heads"
  | "melvorD:Mithril_Javelin_Heads"
  | "melvorD:Adamant_Javelin_Heads"
  | "melvorD:Rune_Javelin_Heads"
  | "melvorD:Dragon_Javelin_Heads"
  | "melvorD:Bronze_Throwing_Knife"
  | "melvorD:Iron_Throwing_Knife"
  | "melvorD:Steel_Throwing_Knife"
  | "melvorD:Mithril_Throwing_Knife"
  | "melvorD:Adamant_Throwing_Knife"
  | "melvorD:Rune_Throwing_Knife"
  | "melvorD:Dragon_Throwing_Knife"
  | "melvorD:Headless_Bolts"
  | "melvorTotH:Corundumite_Bar"
  | "melvorTotH:Iridium_Bar"
  | "melvorTotH:Palladium_Bar"
  | "melvorTotH:Augite_Bar"
  | "melvorTotH:Meteorite_Bar"
  | "melvorTotH:Divinite_Bar"
  | "melvorTotH:Corundum_Dagger"
  | "melvorTotH:Corundum_Sword"
  | "melvorTotH:Corundum_Battleaxe"
  | "melvorTotH:Corundum_2H_Sword"
  | "melvorTotH:Corundum_Scimitar"
  | "melvorTotH:Corundum_Helmet"
  | "melvorTotH:Corundum_Boots"
  | "melvorTotH:Corundum_Platelegs"
  | "melvorTotH:Corundum_Platebody"
  | "melvorTotH:Corundum_Shield"
  | "melvorTotH:Corundum_Arrowtips"
  | "melvorTotH:Corundum_Gloves"
  | "melvorTotH:Corundum_Crossbow_Head"
  | "melvorTotH:Corundum_Javelin_Heads"
  | "melvorTotH:Corundum_Throwing_Knife"
  | "melvorTotH:Augite_Dagger"
  | "melvorTotH:Augite_Sword"
  | "melvorTotH:Augite_Battleaxe"
  | "melvorTotH:Augite_2H_Sword"
  | "melvorTotH:Augite_Scimitar"
  | "melvorTotH:Augite_Helmet"
  | "melvorTotH:Augite_Boots"
  | "melvorTotH:Augite_Platelegs"
  | "melvorTotH:Augite_Platebody"
  | "melvorTotH:Augite_Shield"
  | "melvorTotH:Augite_Arrowtips"
  | "melvorTotH:Augite_Gloves"
  | "melvorTotH:Augite_Crossbow_Head"
  | "melvorTotH:Augite_Javelin_Heads"
  | "melvorTotH:Augite_Throwing_Knife"
  | "melvorTotH:Meteorite_2H_Sword"
  | "melvorTotH:Meteorite_Helmet"
  | "melvorTotH:Meteorite_Platelegs"
  | "melvorTotH:Meteorite_Platebody"
  | "melvorTotH:Meteorite_Crossbow_Head"
  | "melvorTotH:Meteorite_Javelin_Heads"
  | "melvorTotH:Divine_Dagger"
  | "melvorTotH:Divine_Sword"
  | "melvorTotH:Divine_Battleaxe"
  | "melvorTotH:Divine_2H_Sword"
  | "melvorTotH:Divine_Scimitar"
  | "melvorTotH:Divine_Helmet"
  | "melvorTotH:Divine_Boots"
  | "melvorTotH:Divine_Platelegs"
  | "melvorTotH:Divine_Platebody"
  | "melvorTotH:Divine_Shield"
  | "melvorTotH:Divine_Arrowtips"
  | "melvorTotH:Divine_Gloves"
  | "melvorTotH:Divine_Crossbow_Head"
  | "melvorTotH:Divine_Javelin_Heads"
  | "melvorTotH:Divine_Throwing_Knife";
declare type SmithingCategoryID =
  | "melvorD:Bars"
  | "melvorD:BronzeGear"
  | "melvorD:IronGear"
  | "melvorD:SteelGear"
  | "melvorD:MithrilGear"
  | "melvorD:AdamantGear"
  | "melvorD:RuneGear"
  | "melvorD:DragonGear"
  | "melvorTotH:CorundumGear"
  | "melvorTotH:AugiteGear"
  | "melvorTotH:MeteoriteGear"
  | "melvorTotH:DivineGear";
/**
 * Matches when a Thieving action occurs
 */
declare type ThievingActionEventMatcherOptions = ThievingActionEventMatcherOptions1 & {
  type: "ThievingAction";
  /**
   * Optional. If present, the npc must have an ID that matches one element of the array
   *
   * @minItems 1
   */
  npcIDs?: [ThievingActionID, ...ThievingActionID[]];
  /**
   * Optional. If present, the thieving area must have an ID that matches one element of the array
   *
   * @minItems 1
   */
  areaIDs?: [ThievingAreaID, ...ThievingAreaID[]];
  /**
   * Optional. If present, a common drop being obtained from the action must match
   */
  commonDropObtained?: boolean;
  [k: string]: unknown;
};
declare type ThievingActionEventMatcherOptions1 = SkillActionEventMatcherOptions;
declare type ThievingActionID =
  | "melvorF:MAN"
  | "melvorF:GOLBIN"
  | "melvorF:LUMBERJACK"
  | "melvorF:BOB_THE_FARMER"
  | "melvorF:FISHERMAN"
  | "melvorF:CHEF"
  | "melvorF:MINER"
  | "melvorF:KNIGHT"
  | "melvorF:WOMAN"
  | "melvorF:GOLBIN_CHIEF"
  | "melvorF:BANDIT_THUG"
  | "melvorF:MARAUDER"
  | "melvorF:MERCHANT"
  | "melvorF:ASSISTANT_COOK"
  | "melvorF:DOCK_HAND"
  | "melvorF:TROLL"
  | "melvorF:CYCLOPS"
  | "melvorF:SQUIRE"
  | "melvorF:WIZARD"
  | "melvorF:ACOLYTE"
  | "melvorF:COURT_JESTER"
  | "melvorF:KING"
  | "melvorF:PRINCESS"
  | "melvorTotH:EXPLORER"
  | "melvorTotH:NECROMANCER"
  | "melvorTotH:PILGRIM"
  | "melvorTotH:ADVENTURER"
  | "melvorTotH:DARK_KNIGHT"
  | "melvorTotH:SAGE"
  | "melvorTotH:TREASURE_HUNTER"
  | "melvorTotH:TRAVELLING_MERCHANT"
  | "melvorTotH:VAMPIRE"
  | "melvorTotH:MADREMONTE"
  | "melvorTotH:VAMPIRE_LORD";
declare type ThievingAreaID =
  | "melvorF:LOW_TOWN"
  | "melvorF:GOLBIN_VILLAGE"
  | "melvorF:BANDIT_HIDEOUT"
  | "melvorF:FARMERS_MARKET"
  | "melvorF:BANQUET"
  | "melvorF:PORT_OF_LEMVOR"
  | "melvorF:CAVE_OF_GIANTS"
  | "melvorF:OUTSKIRTS"
  | "melvorF:FORT"
  | "melvorF:WIZARD_TOWER"
  | "melvorF:ROYAL_CASTLE"
  | "melvorTotH:LOST_RUINS"
  | "melvorTotH:UNDEAD_PALACE"
  | "melvorTotH:DESERT"
  | "melvorTotH:MUSHROOM_FOREST"
  | "melvorTotH:TWILIGHT";
declare type FarmingActionID =
  | "melvorD:Potatoes"
  | "melvorD:Onions"
  | "melvorD:Cabbage"
  | "melvorD:Tomatoes"
  | "melvorD:Sweetcorn"
  | "melvorD:Strawberries"
  | "melvorD:Watermelon"
  | "melvorD:Snape_Grass"
  | "melvorD:Oak_Logs"
  | "melvorD:Willow_Logs"
  | "melvorD:Maple_Logs"
  | "melvorD:Yew_Logs"
  | "melvorD:Magic_Logs"
  | "melvorD:Carrot"
  | "melvorD:Garum_Herb"
  | "melvorD:Sourweed_Herb"
  | "melvorD:Mantalyme_Herb"
  | "melvorD:Lemontyle_Herb"
  | "melvorD:Oxilyme_Herb"
  | "melvorD:Cherry"
  | "melvorF:Poraxx_Herb"
  | "melvorF:Pigtayle_Herb"
  | "melvorF:Barrentoe_Herb"
  | "melvorF:Apple"
  | "melvorTotH:Pumpkin"
  | "melvorTotH:Chilli"
  | "melvorTotH:Mushrooms"
  | "melvorTotH:Starfruit"
  | "melvorTotH:Snowcress_Herb"
  | "melvorTotH:Bitterlyme_Herb"
  | "melvorTotH:Moonwort_Herb"
  | "melvorTotH:Wurmtayle_Herb"
  | "melvorTotH:Bananas"
  | "melvorTotH:Grove_Logs"
  | "melvorTotH:Elderwood_Logs"
  | "melvorTotH:Carrion_Logs";
declare type FarmingCategoryID = "melvorD:Allotment" | "melvorD:Herb" | "melvorD:Tree";
/**
 * Matches when a Farming Harvest action occurs
 */
declare type FarmingHarvestActionEventMatcherOptions = FarmingHarvestActionEventMatcherOptions1 & {
  type: "FarmingHarvestAction";
  /**
   * Optional. If present, the action must have an ID that matches one element of the array
   *
   * @minItems 1
   */
  actionIDs?: [FarmingActionID, ...FarmingActionID[]];
  /**
   * Optional. If present, the category of the farming action must have an ID that matches one element of the array
   *
   * @minItems 1
   */
  categoryIDs?: [FarmingCategoryID, ...FarmingCategoryID[]];
  [k: string]: unknown;
};
declare type FarmingHarvestActionEventMatcherOptions1 = SkillActionEventMatcherOptions;
/**
 * Matches when a Fletching action occurs
 */
declare type FletchingActionEventMatcherOptions = FletchingActionEventMatcherOptions1 & {
  type: "FletchingAction";
  /**
   * Optional. If present, the action must have an ID that matches one element of the array
   *
   * @minItems 1
   */
  actionIDs?: [FletchingActionID, ...FletchingActionID[]];
  /**
   * Optional. If present, the category of the fletching action must have an ID that matches one element of the array
   *
   * @minItems 1
   */
  categoryIDs?: [FletchingCategoryID, ...FletchingCategoryID[]];
  /**
   * Optional. If present, the fletching action making arrows must match
   */
  isArrows?: boolean;
  /**
   * Optional. If present, the fletching action making unstrung bows must match
   */
  isUnstrungBows?: boolean;
  [k: string]: unknown;
};
declare type FletchingActionEventMatcherOptions1 = SkillActionEventMatcherOptions;
declare type FletchingActionID =
  | "melvorF:Arrow_Shafts"
  | "melvorF:Headless_Arrows"
  | "melvorF:Bronze_Arrows"
  | "melvorF:Iron_Arrows"
  | "melvorF:Steel_Arrows"
  | "melvorF:Mithril_Arrows"
  | "melvorF:Adamant_Arrows"
  | "melvorF:Rune_Arrows"
  | "melvorF:Dragon_Arrows"
  | "melvorF:Normal_Shortbow_U"
  | "melvorF:Oak_Shortbow_U"
  | "melvorF:Willow_Shortbow_U"
  | "melvorF:Maple_Shortbow_U"
  | "melvorF:Yew_Shortbow_U"
  | "melvorF:Magic_Shortbow_U"
  | "melvorF:Normal_Shortbow"
  | "melvorF:Oak_Shortbow"
  | "melvorF:Willow_Shortbow"
  | "melvorF:Maple_Shortbow"
  | "melvorF:Yew_Shortbow"
  | "melvorF:Magic_Shortbow"
  | "melvorF:Normal_Longbow_U"
  | "melvorF:Oak_Longbow_U"
  | "melvorF:Willow_Longbow_U"
  | "melvorF:Maple_Longbow_U"
  | "melvorF:Yew_Longbow_U"
  | "melvorF:Magic_Longbow_U"
  | "melvorF:Normal_Longbow"
  | "melvorF:Oak_Longbow"
  | "melvorF:Willow_Longbow"
  | "melvorF:Maple_Longbow"
  | "melvorF:Yew_Longbow"
  | "melvorF:Magic_Longbow"
  | "melvorF:Redwood_Shortbow_U"
  | "melvorF:Redwood_Shortbow"
  | "melvorF:Redwood_Longbow_U"
  | "melvorF:Redwood_Longbow"
  | "melvorF:Topaz_Bolts"
  | "melvorF:Sapphire_Bolts"
  | "melvorF:Ruby_Bolts"
  | "melvorF:Emerald_Bolts"
  | "melvorF:Diamond_Bolts"
  | "melvorF:Bronze_Crossbow"
  | "melvorF:Iron_Crossbow"
  | "melvorF:Steel_Crossbow"
  | "melvorF:Mithril_Crossbow"
  | "melvorF:Adamant_Crossbow"
  | "melvorF:Rune_Crossbow"
  | "melvorF:Dragon_Crossbow"
  | "melvorF:Bronze_Javelin"
  | "melvorF:Iron_Javelin"
  | "melvorF:Steel_Javelin"
  | "melvorF:Mithril_Javelin"
  | "melvorF:Adamant_Javelin"
  | "melvorF:Rune_Javelin"
  | "melvorF:Dragon_Javelin"
  | "melvorF:Jadestone_Bolts"
  | "melvorTotH:Elderwood_Shortbow_U"
  | "melvorTotH:Elderwood_Shortbow"
  | "melvorTotH:Elderwood_Longbow_U"
  | "melvorTotH:Elderwood_Longbow"
  | "melvorTotH:Revenant_Shortbow_U"
  | "melvorTotH:Revenant_Shortbow"
  | "melvorTotH:Revenant_Longbow_U"
  | "melvorTotH:Revenant_Longbow"
  | "melvorTotH:Carrion_Shortbow_U"
  | "melvorTotH:Carrion_Shortbow"
  | "melvorTotH:Carrion_Longbow_U"
  | "melvorTotH:Carrion_Longbow"
  | "melvorTotH:Corundum_Arrows"
  | "melvorTotH:Augite_Arrows"
  | "melvorTotH:Divine_Arrows"
  | "melvorTotH:Ethereal_Arrows"
  | "melvorTotH:Onyx_Bolts"
  | "melvorTotH:Meteorite_Bolts"
  | "melvorTotH:Decay_Bolts"
  | "melvorTotH:Zephyte_Bolts"
  | "melvorTotH:Corundum_Crossbow"
  | "melvorTotH:Augite_Crossbow"
  | "melvorTotH:Divine_Crossbow"
  | "melvorTotH:Meteorite_Crossbow"
  | "melvorTotH:Corundum_Javelin"
  | "melvorTotH:Augite_Javelin"
  | "melvorTotH:Divine_Javelin"
  | "melvorTotH:Meteorite_Javelin";
declare type FletchingCategoryID =
  | "melvorF:Arrows"
  | "melvorF:Shortbows"
  | "melvorF:Longbows"
  | "melvorF:Bolts"
  | "melvorF:Crossbows"
  | "melvorF:Javelins";
/**
 * Matches when a Crafting action occurs
 */
declare type CraftingActionEventMatcherOptions = CraftingActionEventMatcherOptions1 & {
  type: "CraftingAction";
  /**
   * Optional. If present, the action must have an ID that matches one element of the array
   *
   * @minItems 1
   */
  actionIDs?: [CraftingActionID, ...CraftingActionID[]];
  /**
   * Optional. If present, the category of the Crafting action must have an ID that matches one element of the array
   *
   * @minItems 1
   */
  categoryIDs?: [CraftingCategoryID, ...CraftingCategoryID[]];
  [k: string]: unknown;
};
declare type CraftingActionEventMatcherOptions1 = SkillActionEventMatcherOptions;
declare type CraftingActionID =
  | "melvorF:Leather_Gloves"
  | "melvorF:Leather_Boots"
  | "melvorF:Leather_Cowl"
  | "melvorF:Leather_Vambraces"
  | "melvorF:Leather_Body"
  | "melvorF:Leather_Chaps"
  | "melvorF:Green_Dhide_Vambraces"
  | "melvorF:Green_Dhide_Chaps"
  | "melvorF:Green_Dhide_Body"
  | "melvorF:Blue_Dhide_Vambraces"
  | "melvorF:Blue_Dhide_Chaps"
  | "melvorF:Blue_Dhide_Body"
  | "melvorF:Red_Dhide_Vambraces"
  | "melvorF:Red_Dhide_Chaps"
  | "melvorF:Red_Dhide_Body"
  | "melvorF:Black_Dhide_Vambraces"
  | "melvorF:Black_Dhide_Chaps"
  | "melvorF:Black_Dhide_Body"
  | "melvorF:Silver_Topaz_Ring"
  | "melvorF:Silver_Sapphire_Ring"
  | "melvorF:Silver_Ruby_Ring"
  | "melvorF:Silver_Emerald_Ring"
  | "melvorF:Silver_Diamond_Ring"
  | "melvorF:Gold_Topaz_Ring"
  | "melvorF:Gold_Sapphire_Ring"
  | "melvorF:Gold_Ruby_Ring"
  | "melvorF:Gold_Emerald_Ring"
  | "melvorF:Gold_Diamond_Ring"
  | "melvorF:Silver_Topaz_Necklace"
  | "melvorF:Silver_Sapphire_Necklace"
  | "melvorF:Silver_Ruby_Necklace"
  | "melvorF:Silver_Emerald_Necklace"
  | "melvorF:Silver_Diamond_Necklace"
  | "melvorF:Gold_Topaz_Necklace"
  | "melvorF:Gold_Sapphire_Necklace"
  | "melvorF:Gold_Ruby_Necklace"
  | "melvorF:Gold_Emerald_Necklace"
  | "melvorF:Gold_Diamond_Necklace"
  | "melvorF:Hard_Leather_Gloves"
  | "melvorF:Hard_Leather_Boots"
  | "melvorF:Hard_Leather_Cowl"
  | "melvorF:Hard_Leather_Vambraces"
  | "melvorF:Hard_Leather_Body"
  | "melvorF:Hard_Leather_Chaps"
  | "melvorF:Green_Dhide_Shield"
  | "melvorF:Blue_Dhide_Shield"
  | "melvorF:Red_Dhide_Shield"
  | "melvorF:Black_Dhide_Shield"
  | "melvorF:Thiefs_Moneysack"
  | "melvorF:Seed_Pouch"
  | "melvorF:Runecrafting_Pouch"
  | "melvorF:Alchemists_Bag"
  | "melvorF:Ring_Of_Blade_Echoes"
  | "melvorF:Ring_Of_Barrage"
  | "melvorF:Ring_Of_Spirit_Power"
  | "melvorF:Small_Urn"
  | "melvorF:Medium_Urn"
  | "melvorTotH:Elderwood_Vambraces"
  | "melvorTotH:Elderwood_Chaps"
  | "melvorTotH:Elderwood_Shield"
  | "melvorTotH:Elderwood_Body"
  | "melvorTotH:Revenant_Vambraces"
  | "melvorTotH:Revenant_Chaps"
  | "melvorTotH:Revenant_Shield"
  | "melvorTotH:Revenant_Body"
  | "melvorTotH:Carrion_Vambraces"
  | "melvorTotH:Carrion_Chaps"
  | "melvorTotH:Carrion_Shield"
  | "melvorTotH:Carrion_Body"
  | "melvorTotH:Iridium_Onyx_Ring"
  | "melvorTotH:Palladium_Onyx_Ring"
  | "melvorTotH:Iridium_Oricha_Ring"
  | "melvorTotH:Palladium_Oricha_Ring"
  | "melvorTotH:Iridium_Cerulean_Ring"
  | "melvorTotH:Palladium_Cerulean_Ring"
  | "melvorTotH:Iridium_Runestone_Ring"
  | "melvorTotH:Palladium_Runestone_Ring"
  | "melvorTotH:Iridium_Zephyte_Ring"
  | "melvorTotH:Palladium_Zephyte_Ring"
  | "melvorTotH:Meteorite_Warrior_Ring"
  | "melvorTotH:Meteorite_Marksman_Ring"
  | "melvorTotH:Meteorite_Spellcaster_Ring"
  | "melvorTotH:Iridium_Onyx_Necklace"
  | "melvorTotH:Palladium_Onyx_Necklace"
  | "melvorTotH:Iridium_Oricha_Necklace"
  | "melvorTotH:Palladium_Oricha_Necklace"
  | "melvorTotH:Iridium_Cerulean_Necklace"
  | "melvorTotH:Palladium_Cerulean_Necklace"
  | "melvorTotH:Iridium_Runestone_Necklace"
  | "melvorTotH:Palladium_Runestone_Necklace"
  | "melvorTotH:Iridium_Zephyte_Necklace"
  | "melvorTotH:Palladium_Zephyte_Necklace"
  | "melvorTotH:Artisan_Pouch"
  | "melvorTotH:Kindling_Pouch"
  | "melvorTotH:Stamina_Pouch"
  | "melvorTotH:Spirit_Bag"
  | "melvorTotH:Chefs_Bag"
  | "melvorTotH:Summoners_Bag"
  | "melvorTotH:Large_Urn";
declare type CraftingCategoryID =
  | "melvorF:LeatherArmour"
  | "melvorF:Dragonhide"
  | "melvorF:Rings"
  | "melvorF:Necklaces"
  | "melvorF:Bags"
  | "melvorF:Urns"
  | "melvorTotH:HardwoodArmour";
/**
 * Matches when a Runecrafting action occurs
 */
declare type RunecraftingActionEventMatcherOptions = RunecraftingActionEventMatcherOptions1 & {
  type: "RunecraftingAction";
  /**
   * Optional. If present, the action must have an ID that matches one element of the array
   *
   * @minItems 1
   */
  actionIDs?: [RunecraftingActionID, ...RunecraftingActionID[]];
  /**
   * Optional. If present, the category of the Runecrafting action must have an ID that matches one element of the array
   *
   * @minItems 1
   */
  categoryIDs?: [RunecraftingCategoryID, ...RunecraftingCategoryID[]];
  /**
   * Optional. If present, one of the items consumed in the action must have an ID that matches one element of the array
   *
   * @minItems 1
   */
  consumedItemIDs?: [AnyItemID, ...AnyItemID[]];
  /**
   * Optional. If present, the item produced must match one of the item subCategories in the array
   *
   * @minItems 1
   */
  subCategories?: [RunecraftingSubCategory, ...RunecraftingSubCategory[]];
  [k: string]: unknown;
};
declare type RunecraftingActionEventMatcherOptions1 = SkillActionEventMatcherOptions;
declare type RunecraftingActionID =
  | "melvorF:Air_Rune"
  | "melvorF:Mind_Rune"
  | "melvorF:Water_Rune"
  | "melvorF:Earth_Rune"
  | "melvorF:Fire_Rune"
  | "melvorF:Body_Rune"
  | "melvorF:Chaos_Rune"
  | "melvorF:Death_Rune"
  | "melvorF:Blood_Rune"
  | "melvorF:Ancient_Rune"
  | "melvorF:Light_Rune"
  | "melvorF:Nature_Rune"
  | "melvorF:Havoc_Rune"
  | "melvorF:Spirit_Rune"
  | "melvorF:Mist_Rune"
  | "melvorF:Dust_Rune"
  | "melvorF:Mud_Rune"
  | "melvorF:Smoke_Rune"
  | "melvorF:Steam_Rune"
  | "melvorF:Lava_Rune"
  | "melvorF:Staff_of_Air"
  | "melvorF:Staff_of_Water"
  | "melvorF:Staff_of_Earth"
  | "melvorF:Staff_of_Fire"
  | "melvorF:Air_Battlestaff"
  | "melvorF:Water_Battlestaff"
  | "melvorF:Earth_Battlestaff"
  | "melvorF:Fire_Battlestaff"
  | "melvorF:Mystic_Air_Staff"
  | "melvorF:Mystic_Water_Staff"
  | "melvorF:Mystic_Earth_Staff"
  | "melvorF:Mystic_Fire_Staff"
  | "melvorF:Air_Acolyte_Wizard_Hat"
  | "melvorF:Air_Acolyte_Wizard_Robes"
  | "melvorF:Air_Acolyte_Wizard_Bottoms"
  | "melvorF:Air_Acolyte_Wizard_Boots"
  | "melvorF:Water_Acolyte_Wizard_Hat"
  | "melvorF:Water_Acolyte_Wizard_Robes"
  | "melvorF:Water_Acolyte_Wizard_Bottoms"
  | "melvorF:Water_Acolyte_Wizard_Boots"
  | "melvorF:Earth_Acolyte_Wizard_Hat"
  | "melvorF:Earth_Acolyte_Wizard_Robes"
  | "melvorF:Earth_Acolyte_Wizard_Bottoms"
  | "melvorF:Earth_Acolyte_Wizard_Boots"
  | "melvorF:Fire_Acolyte_Wizard_Hat"
  | "melvorF:Fire_Acolyte_Wizard_Robes"
  | "melvorF:Fire_Acolyte_Wizard_Bottoms"
  | "melvorF:Fire_Acolyte_Wizard_Boots"
  | "melvorF:Air_Adept_Wizard_Hat"
  | "melvorF:Air_Adept_Wizard_Robes"
  | "melvorF:Air_Adept_Wizard_Bottoms"
  | "melvorF:Air_Adept_Wizard_Boots"
  | "melvorF:Water_Adept_Wizard_Hat"
  | "melvorF:Water_Adept_Wizard_Robes"
  | "melvorF:Water_Adept_Wizard_Bottoms"
  | "melvorF:Water_Adept_Wizard_Boots"
  | "melvorF:Earth_Adept_Wizard_Hat"
  | "melvorF:Earth_Adept_Wizard_Robes"
  | "melvorF:Earth_Adept_Wizard_Bottoms"
  | "melvorF:Earth_Adept_Wizard_Boots"
  | "melvorF:Fire_Adept_Wizard_Hat"
  | "melvorF:Fire_Adept_Wizard_Robes"
  | "melvorF:Fire_Adept_Wizard_Bottoms"
  | "melvorF:Fire_Adept_Wizard_Boots"
  | "melvorF:Air_Expert_Wizard_Hat"
  | "melvorF:Air_Expert_Wizard_Robes"
  | "melvorF:Air_Expert_Wizard_Bottoms"
  | "melvorF:Air_Expert_Wizard_Boots"
  | "melvorF:Water_Expert_Wizard_Hat"
  | "melvorF:Water_Expert_Wizard_Robes"
  | "melvorF:Water_Expert_Wizard_Bottoms"
  | "melvorF:Water_Expert_Wizard_Boots"
  | "melvorF:Earth_Expert_Wizard_Hat"
  | "melvorF:Earth_Expert_Wizard_Robes"
  | "melvorF:Earth_Expert_Wizard_Bottoms"
  | "melvorF:Earth_Expert_Wizard_Boots"
  | "melvorF:Fire_Expert_Wizard_Hat"
  | "melvorF:Fire_Expert_Wizard_Robes"
  | "melvorF:Fire_Expert_Wizard_Bottoms"
  | "melvorF:Fire_Expert_Wizard_Boots"
  | "melvorF:Air_Imbued_Wand"
  | "melvorF:Water_Imbued_Wand"
  | "melvorF:Earth_Imbued_Wand"
  | "melvorF:Fire_Imbued_Wand"
  | "melvorTotH:Poison_Rune"
  | "melvorTotH:Decay_Rune"
  | "melvorTotH:Infernal_Rune"
  | "melvorTotH:Despair_Rune"
  | "melvorTotH:Soul_Rune"
  | "melvorTotH:Lightning_Rune"
  | "melvorTotH:Archaic_Rune"
  | "melvorTotH:Calamity_Rune"
  | "melvorTotH:Poison_Master_Wizard_Hat"
  | "melvorTotH:Poison_Master_Wizard_Robes"
  | "melvorTotH:Poison_Master_Wizard_Bottoms"
  | "melvorTotH:Poison_Master_Wizard_Boots"
  | "melvorTotH:Infernal_Master_Wizard_Hat"
  | "melvorTotH:Infernal_Master_Wizard_Robes"
  | "melvorTotH:Infernal_Master_Wizard_Bottoms"
  | "melvorTotH:Infernal_Master_Wizard_Boots"
  | "melvorTotH:Lightning_Master_Wizard_Hat"
  | "melvorTotH:Lightning_Master_Wizard_Robes"
  | "melvorTotH:Lightning_Master_Wizard_Bottoms"
  | "melvorTotH:Lightning_Master_Wizard_Boots"
  | "melvorTotH:Poison_Legendary_Wizard_Hat"
  | "melvorTotH:Poison_Legendary_Wizard_Robes"
  | "melvorTotH:Poison_Legendary_Wizard_Bottoms"
  | "melvorTotH:Poison_Legendary_Wizard_Boots"
  | "melvorTotH:Infernal_Legendary_Wizard_Hat"
  | "melvorTotH:Infernal_Legendary_Wizard_Robes"
  | "melvorTotH:Infernal_Legendary_Wizard_Bottoms"
  | "melvorTotH:Infernal_Legendary_Wizard_Boots"
  | "melvorTotH:Lightning_Legendary_Wizard_Hat"
  | "melvorTotH:Lightning_Legendary_Wizard_Robes"
  | "melvorTotH:Lightning_Legendary_Wizard_Bottoms"
  | "melvorTotH:Lightning_Legendary_Wizard_Boots"
  | "melvorTotH:Poison_Mythical_Wizard_Hat"
  | "melvorTotH:Poison_Mythical_Wizard_Robes"
  | "melvorTotH:Poison_Mythical_Wizard_Bottoms"
  | "melvorTotH:Poison_Mythical_Wizard_Boots"
  | "melvorTotH:Infernal_Mythical_Wizard_Hat"
  | "melvorTotH:Infernal_Mythical_Wizard_Robes"
  | "melvorTotH:Infernal_Mythical_Wizard_Bottoms"
  | "melvorTotH:Infernal_Mythical_Wizard_Boots"
  | "melvorTotH:Lightning_Mythical_Wizard_Hat"
  | "melvorTotH:Lightning_Mythical_Wizard_Robes"
  | "melvorTotH:Lightning_Mythical_Wizard_Bottoms"
  | "melvorTotH:Lightning_Mythical_Wizard_Boots"
  | "melvorTotH:Poison_Staff"
  | "melvorTotH:Infernal_Staff"
  | "melvorTotH:Lightning_Staff"
  | "melvorTotH:Meteorite_Staff"
  | "melvorTotH:Despair_Wand"
  | "melvorTotH:Archaic_Wand"
  | "melvorTotH:Calamity_Wand";
declare type RunecraftingCategoryID =
  | "melvorF:StandardRunes"
  | "melvorF:CombinationRunes"
  | "melvorF:StavesWands"
  | "melvorF:AirMagicGear"
  | "melvorF:WaterMagicGear"
  | "melvorF:EarthMagicGear"
  | "melvorF:FireMagicGear"
  | "melvorTotH:PoisonMagicGear"
  | "melvorTotH:InfernalMagicGear"
  | "melvorTotH:LightningMagicGear";
declare type RunecraftingSubCategory = "ElementalRunes" | "Staff" | "None";
/**
 * Matches when a Herblore action occurs
 */
declare type HerbloreActionEventMatcherOptions = HerbloreActionEventMatcherOptions1 & {
  type: "HerbloreAction";
  /**
   * Optional. If present, the action must have an ID that matches one element of the array
   *
   * @minItems 1
   */
  actionIDs?: [HerbloreActionID, ...HerbloreActionID[]];
  /**
   * Optional. If present, the category of the Herblore action must have an ID that matches one element of the array
   *
   * @minItems 1
   */
  categoryIDs?: [HerbloreCategoryID, ...HerbloreCategoryID[]];
  [k: string]: unknown;
};
declare type HerbloreActionEventMatcherOptions1 = SkillActionEventMatcherOptions;
declare type HerbloreActionID =
  | "melvorF:Melee_Accuracy_Potion"
  | "melvorF:Melee_Strength_Potion"
  | "melvorF:Melee_Evasion_Potion"
  | "melvorF:Ranged_Assistance_Potion"
  | "melvorF:Magic_Assistance_Potion"
  | "melvorF:Regeneration_Potion"
  | "melvorF:Damage_Reduction_Potion"
  | "melvorF:Bird_Nest_Potion"
  | "melvorF:Fishermans_Potion"
  | "melvorF:Controlled_Heat_Potion"
  | "melvorF:Generous_Cook_Potion"
  | "melvorF:Perfect_Swing_Potion"
  | "melvorF:Seeing_Gold_Potion"
  | "melvorF:Gentle_Hands_Potion"
  | "melvorF:Farming_Potion"
  | "melvorF:Fletching_Potion"
  | "melvorF:Crafting_Potion"
  | "melvorF:Elemental_Potion"
  | "melvorF:Herblore_Potion"
  | "melvorF:Magic_Damage_Potion"
  | "melvorF:Ranged_Strength_Potion"
  | "melvorF:Diamond_Luck_Potion"
  | "melvorF:Divine_Potion"
  | "melvorF:Lucky_Herb_Potion"
  | "melvorF:Performance_Enhancing_Potion"
  | "melvorF:Necromancer_Potion"
  | "melvorF:Hinder_Potion"
  | "melvorF:Famished_Potion"
  | "melvorF:Lethal_Toxins_Potion"
  | "melvorF:Secret_Stardust_Potion"
  | "melvorTotH:Area_Control_Potion"
  | "melvorTotH:Adaptive_Defence_Potion"
  | "melvorTotH:Slayer_Bounty_Potion"
  | "melvorTotH:Holy_Bulwark_Potion"
  | "melvorTotH:Adaptive_Accuracy_Potion"
  | "melvorTotH:Reaper_Potion"
  | "melvorTotH:Penetration_Potion"
  | "melvorTotH:Critical_Strike_Potion"
  | "melvorTotH:Alchemic_Practice_Potion"
  | "melvorTotH:Gem_Detector_Potion"
  | "melvorTotH:Multicooker_Potion"
  | "melvorTotH:Star_Seeker_Potion"
  | "melvorTotH:Traps_Potion"
  | "melvorTotH:Blacksmith_Potion"
  | "melvorTotH:Enkindled_Yields_Potion"
  | "melvorTotH:Alt_Magic_Potion";
declare type HerbloreCategoryID = "melvorF:CombatPotions" | "melvorF:SkillPotions";
/**
 * Matches when a SkillName action occurs
 */
declare type AgilityActionEventMatcherOptions = AgilityActionEventMatcherOptions1 & {
  type: "AgilityAction";
  /**
   * Optional. If present, the Agility Obstacle must have an ID that matches one element of the array
   *
   * @minItems 1
   */
  actionIDs?: [AgilityObstacleID, ...AgilityObstacleID[]];
  /**
   * Optional. If present, the tier of the Agility Obstacle must match one element of the array
   *
   * @minItems 1
   */
  categoryIDs?: [number, ...number[]];
  [k: string]: unknown;
};
declare type AgilityActionEventMatcherOptions1 = SkillActionEventMatcherOptions;
declare type AgilityObstacleID =
  | "melvorF:CargoNet"
  | "melvorF:RopeSwing"
  | "melvorF:RopeClimb"
  | "melvorF:RopeJump"
  | "melvorF:MonkeyBars"
  | "melvorF:BalanceBeam"
  | "melvorF:BalanceSeesaw"
  | "melvorF:PipeClimb"
  | "melvorF:PipeBalance"
  | "melvorF:PitJump"
  | "melvorF:SteppingStones"
  | "melvorF:CoalStones"
  | "melvorF:MudCrawl"
  | "melvorF:MudDive"
  | "melvorF:CaveClimb"
  | "melvorF:GapJump"
  | "melvorF:RockClimb"
  | "melvorF:CliffClimb"
  | "melvorF:CliffBalance"
  | "melvorF:MountainClimb"
  | "melvorF:TreeClimb"
  | "melvorF:TreeHop"
  | "melvorF:TreeBalance"
  | "melvorF:RockyWaters"
  | "melvorF:LakeSwim"
  | "melvorF:RaftDrifting"
  | "melvorF:SpikeTrap"
  | "melvorF:HeatTrap"
  | "melvorF:BoulderTrap"
  | "melvorF:WaterTrap"
  | "melvorF:FreezingTrap"
  | "melvorF:PipeCrawl"
  | "melvorF:RaftBuilding"
  | "melvorF:SpikeJump"
  | "melvorF:TreeHang"
  | "melvorF:ALovelyJog"
  | "melvorF:LavaJump"
  | "melvorF:WaterJump"
  | "melvorF:IceJump"
  | "melvorF:CaveMaze"
  | "melvorF:FrozenLakeCrossing"
  | "melvorF:Waterfall"
  | "melvorF:LavaWaterfallDodge"
  | "melvorF:BoulderMove"
  | "melvorF:DragonFight"
  | "melvorF:OceanRafting"
  | "melvorF:ForestTrail"
  | "melvorF:RunicTrail"
  | "melvorF:BurningCoals"
  | "melvorF:SwelteringPools"
  | "melvorF:RooftopRun"
  | "melvorTotH:PitMaze"
  | "melvorTotH:FrozenMaze"
  | "melvorTotH:WaterMaze"
  | "melvorTotH:ForestMaze"
  | "melvorTotH:PipeMaze"
  | "melvorTotH:BoulderBalance"
  | "melvorTotH:CaveWaters"
  | "melvorTotH:RuneCrawl"
  | "melvorTotH:MonkeyTrail"
  | "melvorTotH:ForestJog"
  | "melvorTotH:RopeTrap"
  | "melvorTotH:IceTrap"
  | "melvorTotH:BurningTrap"
  | "melvorTotH:CaveTrap"
  | "melvorTotH:BalanceTrap"
  | "melvorTotH:RooftopClimb"
  | "melvorTotH:ForestClimb"
  | "melvorTotH:FreezingClimb"
  | "melvorTotH:GapClimb"
  | "melvorTotH:WaterfallClimb"
  | "melvorTotH:FreezingRafting"
  | "melvorTotH:WaterDive"
  | "melvorTotH:WaterfallCrossing"
  | "melvorTotH:MountainTrail"
  | "melvorTotH:LavaTrail";
/**
 * Matches when a Summoning action occurs
 */
declare type SummoningActionEventMatcherOptions = SummoningActionEventMatcherOptions1 & {
  type: "SummoningAction";
  /**
   * Optional. If present, the action must have an ID that matches one element of the array
   *
   * @minItems 1
   */
  actionIDs?: [SummoningActionID, ...SummoningActionID[]];
  /**
   * Optional. If present, the category of the Summoning action must have an ID that matches one element of the array
   *
   * @minItems 1
   */
  categoryIDs?: [SummoningCategoryID, ...SummoningCategoryID[]];
  [k: string]: unknown;
};
declare type SummoningActionEventMatcherOptions1 = SkillActionEventMatcherOptions;
declare type SummoningActionID =
  | "melvorF:GolbinThief"
  | "melvorF:Occultist"
  | "melvorF:Wolf"
  | "melvorF:Ent"
  | "melvorF:Mole"
  | "melvorF:Octopus"
  | "melvorF:Minotaur"
  | "melvorF:Centaur"
  | "melvorF:Witch"
  | "melvorF:Pig"
  | "melvorF:Crow"
  | "melvorF:Leprechaun"
  | "melvorF:Cyclops"
  | "melvorF:Yak"
  | "melvorF:Unicorn"
  | "melvorF:Dragon"
  | "melvorF:Monkey"
  | "melvorF:Salamander"
  | "melvorF:Bear"
  | "melvorF:Devil"
  | "melvorTotH:Eagle"
  | "melvorTotH:Owl"
  | "melvorTotH:Beaver"
  | "melvorTotH:Fox"
  | "melvorTotH:LightningSpirit"
  | "melvorTotH:Siren"
  | "melvorTotH:Spider"
  | "melvorTotH:Spectre";
declare type SummoningCategoryID = "melvorD:Marks" | "melvorD:TabletsFamiliars" | "melvorD:Synergies";
/**
 * Matches when an Astrology action occurs
 */
declare type AstrologyActionEventMatcherOptions = AstrologyActionEventMatcherOptions1 & {
  type: "AstrologyAction";
  /**
   * Optional. If present, the action must have an ID that matches one element of the array
   *
   * @minItems 1
   */
  actionIDs?: [AstrologyActionID, ...AstrologyActionID[]];
  [k: string]: unknown;
};
declare type AstrologyActionEventMatcherOptions1 = SkillActionEventMatcherOptions;
declare type AstrologyActionID =
  | "melvorF:Deedree"
  | "melvorF:Iridan"
  | "melvorF:Ameria"
  | "melvorF:Terra"
  | "melvorF:Vale"
  | "melvorF:Syllia"
  | "melvorF:Arachi"
  | "melvorF:Ko"
  | "melvorF:Tellus"
  | "melvorF:Hyden"
  | "melvorF:Qimican"
  | "melvorTotH:Variel"
  | "melvorTotH:Haemir"
  | "melvorTotH:Rosaniya"
  | "melvorTotH:Ashtar";
/**
 * Matches when an Alt. Magic action occurs
 */
declare type AltMagicActionEventMatcherOptions = AltMagicActionEventMatcherOptions1 & {
  type: "AltMagicAction";
  /**
   * Optional. If present, the spell must have an ID that matches one element of the array
   *
   * @minItems 1
   */
  actionIDs?: [AltMagicSpellID, ...AltMagicSpellID[]];
  [k: string]: unknown;
};
declare type AltMagicActionEventMatcherOptions1 = SkillActionEventMatcherOptions;
declare type AltMagicSpellID =
  | "melvorF:JustLearning"
  | "melvorF:SuperheatI"
  | "melvorF:ItemAlchemyI"
  | "melvorF:BoneOffering"
  | "melvorF:SuperheatII"
  | "melvorF:ItemAlchemyII"
  | "melvorF:RagstoRichesI"
  | "melvorF:BlessedOffering"
  | "melvorF:SuperheatIII"
  | "melvorF:RagstoRichesII"
  | "melvorF:ItemAlchemyIII"
  | "melvorF:SuperheatIV"
  | "melvorF:HolyInvocationI"
  | "melvorF:HolyInvocationII"
  | "melvorTotH:Nullification"
  | "melvorTotH:Transmutation"
  | "melvorTotH:Purification"
  | "melvorTotH:Fragmentation"
  | "melvorTotH:SuperheatV"
  | "melvorTotH:HolyInvocationIII"
  | "melvorTotH:Embellish"
  | "melvorTotH:RagstoRichesIII"
  | "melvorTotH:ItemAlchemyIV";
declare type WeaponItemData = WeaponItemData1 & {
  itemType: "Weapon";
  /**
   * Determines which combat style this weapon enables the player to use
   */
  attackType: AttackType;
  /**
   * Optional. If present this weapon requires an item to be equipped in the Quiver with a matching AmmoType to attack
   */
  ammoTypeRequired?: AmmoType;
  [k: string]: unknown;
};
declare type WeaponItemData1 = BaseEquipmentItemData1;
declare type FoodItemData = FoodItemData1 & {
  itemType: "Food";
  /**
   * The base healing value of the food. Specified as 1/10th of the desired value in Standard Mode.
   */
  healsFor: number;
  [k: string]: unknown;
};
declare type FoodItemData1 = BaseItemData1;
declare type BoneItemData = BoneItemData1 & {
  itemType: "Bone";
  /**
   * The base number of prayer points obtained by burying the item
   */
  prayerPoints: number;
  [k: string]: unknown;
};
declare type BoneItemData1 = BaseItemData1;
declare type PotionItemData = PotionItemData1 & {
  itemType: "Potion";
  /**
   * Modifiers provided to the Player when the potion is in use
   */
  modifiers: PlayerModifierData1;
  /**
   * The base quantity of charges the potion provides per use
   */
  charges: number;
  /**
   * The tier of the potion. Utilized to determine requirements for upgrading potions, and for filtering in the potion select menu.
   */
  tier: number;
  /**
   * The ID of the Action that the potion can be utilized with.
   */
  action: ActionID;
  /**
   * An array of GameEventMatchers that when any are matched a single charge of the potion is consumed
   *
   * @minItems 1
   */
  consumesOn: [GameEventMatcherData, ...GameEventMatcherData[]];
  [k: string]: unknown;
};
declare type PotionItemData1 = BaseItemData1;
declare type ActionID =
  | "melvorD:Combat"
  | "melvorD:GolbinRaid"
  | "melvorD:Magic"
  | "melvorD:Woodcutting"
  | "melvorD:Fishing"
  | "melvorD:Firemaking"
  | "melvorD:Cooking"
  | "melvorD:Mining"
  | "melvorD:Smithing"
  | "melvorD:Thieving"
  | "melvorD:Farming"
  | "melvorD:Fletching"
  | "melvorD:Crafting"
  | "melvorD:Runecrafting"
  | "melvorD:Herblore"
  | "melvorD:Agility"
  | "melvorD:Summoning"
  | "melvorD:Astrology";
declare type ReadableItemData = ReadableItemData1 & {
  itemType: "Readable";
  /**
   * Optional. If present, specifies the Bootstrap 4 Modal HTMLElement-id in the DOM. This modal will be opened when the item is read. Has precendence over the swalData property
   */
  modalID?: string;
  /**
   * Optional. If present, specifies data for a SweetAlert2 modal to be fired.
   */
  swalData?: {
    /**
     * Specifies the title text of the SweetAlert2 modal.
     */
    title: LangStringData;
    /**
     * Specifies the id of an HTMLTemplateElement in the DOM to use as the html for the SweetAlert2 modal.
     */
    htmlTemplateID: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
declare type ReadableItemData1 = BaseItemData1;
declare type LanguageCategory =
  | "SPECIAL_ATTACK"
  | "SKILL_NAME"
  | "ITEM_NAME"
  | "MONSTER_NAME"
  | "ITEM_DESCRIPTION"
  | "MODIFIER_DATA"
  | "PET_NAME"
  | "LORE"
  | "GAME_GUIDE"
  | "SHOP_NAME"
  | "SHOP_DESCRIPTION"
  | "PRIVACY_POLICY"
  | "MENU_TEXT"
  | "MAGIC"
  | "THIEVING"
  | "PRAYER"
  | "TREE_NAME"
  | "ORE_NAME"
  | "FISHING"
  | "SKILL_CATEGORY"
  | "SPECIAL_ATTACK_NAME"
  | "CHARACTER_SELECT"
  | "FARMING_MISC"
  | "SHOP_MISC"
  | "EQUIP_SLOT"
  | "COMBAT_MISC"
  | "MASTERY_BONUS"
  | "MASTERY_CHECKPOINT"
  | "MISC_STRING"
  | "BANK_STRING"
  | "COMBAT_AREA"
  | "SLAYER_AREA"
  | "DUNGEON"
  | "TUTORIAL"
  | "COMPLETION"
  | "BANE_EVENT"
  | "AGILITY"
  | "POTION_NAME"
  | "PET_MISC"
  | "NUM"
  | "IAP"
  | "SUMMONING_SYNERGY"
  | "PAGE_NAME_MISC"
  | "GAMEMODES"
  | "PAGE_NAME"
  | "SETTINGS"
  | "GOLBIN_RAID"
  | "SHOP_CAT"
  | "ASTROLOGY"
  | "STATISTICS"
  | "COMPLETION"
  | "MISC_STRING"
  | "SHOP_MISC"
  | "SUMMONING_SYNERGY"
  | "AGILITY"
  | "CHARACTER_SELECT"
  | "EVENTS"
  | "TOASTS"
  | "EQUIPMENT_STAT"
  | "TIME_UNIT"
  | "MILESTONES"
  | "PUSH_NOTIFICATIONS"
  | "PASSIVES"
  | "ERROR"
  | "MONSTER_DESCRIPTION"
  | "TOWNSHIP"
  | "TOWNSHIP_MENU"
  | "MINING_TYPE"
  | "MOD_MANAGER"
  | "TOWNSHIP_TASKS";
declare type OpenableItemData = OpenableItemData1 & {
  itemType: "Openable";
  /**
   * Defines the items that can be obtained by opening this item
   *
   * @minItems 1
   */
  dropTable: [DropTableData, ...DropTableData[]];
  /**
   * Optional. If present, this item is required to open the item. The quantity provided will be consumed per item opened.
   */
  keyItem?: AnyItemQuantity;
  [k: string]: unknown;
};
declare type OpenableItemData1 = BaseItemData1;
declare type TokenItemData = TokenItemData1 & {
  itemType: "Token";
  /**
   * Modifiers that are provided once for each time the item has been claimed. If the masteryToken modifier is present, this item acts as a Mastery Token instead, and provides Mastery Pool XP when claimed, proportional to the modifier value.
   */
  modifiers: PlayerModifierData1;
  [k: string]: unknown;
};
declare type TokenItemData1 = BaseItemData1;
declare type CompostItemData = CompostItemData1 & {
  itemType: "Compost";
  /**
   * The percent value that using this item will fill the compost meter in farming by.
   */
  compostValue: number;
  /**
   * The percent value that using this item will increase the quantity of crops harvested by.
   */
  harvestBonus: number;
  /**
   * The CSS class that is applied to the compost, compost all, and compost max buttons in farming
   */
  buttonStyle: string;
  /**
   * The CSS class that is applied to the compost meter when this item is applied to farming plots
   */
  barStyle: string;
  [k: string]: unknown;
};
declare type CompostItemData1 = BaseItemData1;
/**
 * Data for constructing an AttackStyle object
 */
declare type AttackStyleData = AttackStyleData1 & {
  /**
   * Modifiers provided to the player when using this attack style
   */
  modifiers: PlayerModifierData1;
  /**
   * Experience that is gained when dealing damage with this attack style
   */
  experienceGain: {
    /**
     * The ID of the skill that should gain experience
     */
    skillID: SkillID;
    /**
     * The amount of experience gained per hitpoint multiplier normalized point of damage dealt.
     */
    ratio: number;
    [k: string]: unknown;
  }[];
  /**
   * The combat style the Player can use this attack style with
   */
  attackType: AttackType;
  /**
   * The display name of the attack style
   */
  name: string;
  [k: string]: unknown;
};
declare type AttackStyleData1 = IDData;
/**
 * Data for constructing a StackingEffect object
 */
declare type StackingEffectData = StackingEffectData1 & {
  /**
   * The number of stacks of this effect to add per proc
   */
  stacksToAdd: number;
  /**
   * Modifiers that area applied to the target character per stack of this effect
   */
  modifiers: CombatModifierData;
  /**
   * The maximum number of stacks that this effect can have
   */
  maxStacks: number;
  /**
   * The display name of the Effect
   */
  name: string;
  /**
   * URI of the effects icon
   */
  media: string;
  /**
   * Optional. Defines the localization data to pull the name from.
   */
  langeName?: LangStringData;
  [k: string]: unknown;
};
declare type StackingEffectData1 = IDData;
/**
 * Data for constructing a SpecialAttack object
 */
declare type AttackData = AttackData1 & {
  /**
   * The default percentage chance that this attack is chosen
   */
  defaultChance: number;
  /**
   * Array of damage that is reduced to determine the damage dealt per hit of this attack
   */
  damage: DamageData[];
  /**
   * Effects that are applied before the attack rolls to hit
   */
  prehitEffects: EffectData[];
  /**
   * Effects that are applied only when the attack hits
   */
  onhitEffects: EffectData[];
  /**
   * If the attack cannot miss the target
   */
  cantMiss: boolean;
  /**
   * The number of times this attack procs
   */
  attackCount: number;
  /**
   * The interval between attacks in [ms]
   */
  attackInterval: number;
  /**
   * The percentage of damage dealt by this attack that should heal the attacker
   */
  lifesteal: number;
  /**
   * Optional. The ID of a stacking effect that this attack can consume the stacks of. On consuming the stacks, the attack will proc additional times based on the number of stacks consumed.
   */
  consumesStacks?: StackingEffectID;
  /**
   * Optional. If the attack consumes spell rune costs per proc
   */
  usesRunesPerProc?: boolean;
  /**
   * Optional. If the attack consumes prayer points per proc
   */
  usesPrayerPointsPerProc?: boolean;
  /**
   * Optional. If the attack consumes potion charges per proc
   */
  usesPotionChargesPerProc?: boolean;
  /**
   * Optional. If present, limits the combat styles that are allowed to use this special attack to the members of the array
   *
   * @minItems 1
   */
  attackTypes?: [AttackType, ...AttackType[]];
  /**
   * Optional. If present this special attack will require these runes to be used
   *
   * @minItems 1
   */
  extraRuneConsumption?: [AnyItemQuantity, ...AnyItemQuantity[]];
  /**
   * Optional. f the attack is considered to be dragonbreath. Utilized for modifiers that reduce damage from dragonbreath.
   */
  isDragonbreath?: boolean;
  /**
   * Optional. If present, the attack requires a minimum accuracy rating to always hit. Has no effect if cantMiss is false.
   */
  minAccuracy?: number;
  /**
   * The display name of the Attack
   */
  name: string;
  /**
   * The displayed description of the attack. Descriptions are automatically templated based on the attacks data.
   */
  description: string;
  /**
   * Optional. A templated string that can be used to auto-generate a templated description string for this attack
   */
  descriptionGenerator?: string;
  [k: string]: unknown;
};
declare type AttackData1 = IDData;
declare type DamageData = NormalDamageData | CustomDamageData;
/**
 * Defines customized damage for a special attack
 */
declare type CustomDamageData = CustomDamageData1 & {
  damageType: "Custom";
  [k: string]: unknown;
};
declare type CustomDamageData1 = Damage;
/**
 * Data for constructing a CombatPassive object
 */
declare type CombatPassiveData = CombatPassiveData1 & {
  /**
   * The display name of the Passive
   */
  name: string;
  /**
   * Modifiers that are provided to the enemy by the passive
   */
  modifiers: CombatModifierData;
  /**
   * Optional. Specifies a custom description that overrides the description automatically generated from modifiers.
   */
  customDescription?: string;
  [k: string]: unknown;
};
declare type CombatPassiveData1 = IDData;
/**
 * Data for constructing a Monster object
 */
declare type MonsterData = MonsterData1 & {
  /**
   * Display name of the Monster
   */
  name: string;
  /**
   * Optional. Description displayed under the Monster's name
   */
  description?: string;
  /**
   * URI of the Image of the Monster
   */
  media: string;
  /**
   * Optional. URI of an animated image of the Monster
   */
  mediaAnimation?: string;
  /**
   * The combat levels of the Monster. Utilized to compute its stats.
   */
  levels: {
    /**
     * Hitpoints level. Impacts maximum health.
     */
    Hitpoints: number;
    /**
     * Attack level. Impacts melee accuracy.
     */
    Attack: number;
    /**
     * Strength level. Impacts melee max hit.
     */
    Strength: number;
    /**
     * Defence level. Impacts evasion ratings.
     */
    Defence: number;
    /**
     * Ranged level. Impacts ranged accuracy and max hit.
     */
    Ranged: number;
    /**
     * Magic level. Impacts magic accuracy, max hit and evasion rating
     */
    Magic: number;
    [k: string]: unknown;
  };
  /**
   * Equipment stats of the Monster. Used to calculate its stats.
   */
  equipmentStats: EquipStatPair[];
  /**
   * If true, this monster does not count for Completion.
   */
  ignoreCompletion: boolean;
  /**
   * The combat style the monster should use. random specifies the monster chose a random style at the start of combat
   */
  attackType: AttackType | "random";
  /**
   * Array of Special Attack IDs that the monster can use
   */
  specialAttacks: SpecialAttackID[];
  /**
   * Optional. If present, overrides the default chances of the special attacks this monster can use. Length must be identical to the length of specialAttacks.
   */
  overrideSpecialChances?: number[];
  /**
   * Array of Combat Passive IDs that monster has
   */
  passives: CombatPassiveID[];
  /**
   * Percent chance that this monster should drop an item from its loot table.
   */
  lootChance: number;
  /**
   * Defines the items that should drop from this monster
   */
  lootTable: DropTableData[];
  /**
   * Determines how much GP can drop from this monster
   */
  gpDrops: {
    min: number;
    max: number;
    [k: string]: unknown;
  };
  /**
   * Optional. If present, the monster will always drop the specified item, outside of dungeons
   */
  bones?: {
    /**
     * The id of the item to drop
     */
    itemID?: AnyItemID;
    /**
     * The quantity of the item to drop
     */
    quantity?: number;
    [k: string]: unknown;
  };
  /**
   * Determines if the monster is Eligible to be a slayer task
   */
  canSlayer: boolean;
  /**
   * Determines if the monster is a boss
   */
  isBoss: boolean;
  /**
   * The ID of the Standard Magic Spell this monster uses
   */
  selectedSpell: StandardSpellID;
  /**
   * Optional. Defines a pet that will be dropped upon the specified quantity of monster kills.
   */
  pet?: {
    /**
     * The ID of the pet to drop
     */
    id: PetID;
    /**
     * The number of this monster that must be killed for the pet
     */
    quantity: number;
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
declare type MonsterData1 = IDData;
declare type CombatPassiveID =
  | "melvorF:ControlledAffliction"
  | "melvorD:SwingFirst"
  | "melvorD:DontHurtMe"
  | "melvorD:JustAScratch"
  | "melvorD:BigBoi"
  | "melvorD:CantTouchThis"
  | "melvorD:Stronk"
  | "melvorD:JustDontMiss"
  | "melvorD:CheatsEnabled"
  | "melvorD:SomethingWillHit"
  | "melvorD:Yoink"
  | "melvorD:NothingPersonalKid"
  | "melvorD:Humungus"
  | "melvorD:NerfThisGuy"
  | "melvorD:No1Mixtape"
  | "melvorD:AbsoluteThickness"
  | "melvorD:OhNoooo"
  | "melvorD:Rank1Ninja"
  | "melvorD:ProGamer"
  | "melvorD:AllOnRed"
  | "melvorD:ImAlreadyToxic"
  | "melvorD:CurseOfTheUndead"
  | "melvorF:Purity"
  | "melvorF:Rebirth"
  | "melvorF:MeleeProficiency"
  | "melvorF:RangedProficiency"
  | "melvorF:MagicProficiency"
  | "melvorF:AfflictedMight"
  | "melvorF:Afflicted"
  | "melvorF:MistBoss"
  | "melvorF:ToxicGlands"
  | "melvorF:PoisonousHide"
  | "melvorF:CursedRobes"
  | "melvorF:SpikedArmour"
  | "melvorF:BonePlate"
  | "melvorF:FleetingDefence"
  | "melvorF:EventPassive1"
  | "melvorF:EventPassive2"
  | "melvorF:EventPassive3"
  | "melvorF:EventPassive4"
  | "melvorF:EventPassive5"
  | "melvorF:EventPassive6"
  | "melvorF:EventPassive7"
  | "melvorF:EventPassive8"
  | "melvorF:EventPassive9"
  | "melvorF:EventPassive10"
  | "melvorF:EventPassive11"
  | "melvorF:EventPassive12"
  | "melvorTotH:Intimidation3"
  | "melvorTotH:Intimidation7"
  | "melvorTotH:Intimidation8"
  | "melvorTotH:Intimidation9"
  | "melvorTotH:Intimidation10"
  | "melvorTotH:Intimidation11"
  | "melvorTotH:Intimidation13"
  | "melvorTotH:Intimidation15"
  | "melvorTotH:Intimidation16"
  | "melvorTotH:Intimidation18"
  | "melvorTotH:Intimidation19"
  | "melvorTotH:Intimidation20"
  | "melvorTotH:Intimidation21"
  | "melvorTotH:Intimidation23"
  | "melvorTotH:Intimidation24"
  | "melvorTotH:Intimidation25"
  | "melvorTotH:Intimidation29"
  | "melvorTotH:Intimidation30"
  | "melvorTotH:Intimidation36"
  | "melvorTotH:ToxicSkin"
  | "melvorTotH:AfflictedVitality"
  | "melvorTotH:Ablaze"
  | "melvorTotH:FrozenBuild"
  | "melvorTotH:Shocked"
  | "melvorTotH:AbsorbingSkin"
  | "melvorTotH:Duality"
  | "melvorTotH:StickyWebs"
  | "melvorTotH:Decay"
  | "melvorTotH:Rage"
  | "melvorTotH:IngrainedRoots"
  | "melvorTotH:CursedLifesteal"
  | "melvorTotH:UndeadGrasp"
  | "melvorTotH:DarkBlade"
  | "melvorTotH:WeaknessFinder"
  | "melvorTotH:ElementalMaster"
  | "melvorTotH:Assassin"
  | "melvorTotH:Warrior"
  | "melvorTotH:PoisonLifesteal"
  | "melvorTotH:PoisonImmunity"
  | "melvorTotH:BurnImmunity"
  | "melvorTotH:ProtectionOfTheForest"
  | "melvorTotH:SlowImmunity"
  | "melvorTotH:StunImmunity"
  | "melvorTotH:BleedImmunity"
  | "melvorTotH:Intimidation38"
  | "melvorTotH:Intimidation39"
  | "melvorTotH:Intimidation40"
  | "melvorTotH:Intimidation42"
  | "melvorTotH:Intimidation43"
  | "melvorTotH:Intimidation44"
  | "melvorTotH:Intimidation27"
  | "melvorTotH:Intimidation35"
  | "melvorTotH:BleedLifesteal500"
  | "melvorTotH:Intimidation4"
  | "melvorTotH:AfflictedResilience"
  | "melvorTotH:GrowingMadness"
  | "melvorTotH:MomentInTime"
  | "melvorTotH:ReignOverTime"
  | "melvorTotH:EndOfTurnHealing3_15";
declare type StandardSpellID =
  | "melvorD:WindStrike"
  | "melvorD:WaterStrike"
  | "melvorD:EarthStrike"
  | "melvorD:FireStrike"
  | "melvorD:WindBolt"
  | "melvorD:WaterBolt"
  | "melvorD:EarthBolt"
  | "melvorD:FireBolt"
  | "melvorD:WindBlast"
  | "melvorD:WaterBlast"
  | "melvorD:EarthBlast"
  | "melvorD:FireBlast"
  | "melvorD:WindWave"
  | "melvorD:WaterWave"
  | "melvorD:EarthWave"
  | "melvorD:FireWave"
  | "melvorD:WindSurge"
  | "melvorD:WaterSurge"
  | "melvorD:EarthSurge"
  | "melvorD:FireSurge"
  | "melvorF:NaturesCall"
  | "melvorF:NaturesWrath";
declare type PetID =
  | "melvorD:Beavis"
  | "melvorD:PuddingDuckie"
  | "melvorD:Pyro"
  | "melvorD:Cris"
  | "melvorD:CoolRock"
  | "melvorD:PuffTheBabyDragon"
  | "melvorD:LarryTheLonelyLizard"
  | "melvorD:Bruce"
  | "melvorD:LilRon"
  | "melvorD:Leonardo"
  | "melvorD:FinnTheCat"
  | "melvorD:GoldenGolbin"
  | "melvorD:Ty"
  | "melvorD:RipperTheReindeer"
  | "melvorD:Chick"
  | "melvorD:Zarrah"
  | "melvorD:Chio"
  | "melvorD:BouncingBob"
  | "melvorD:Rosey"
  | "melvorD:Ayyden"
  | "melvorD:ArcticYeti"
  | "melvorD:Mac"
  | "melvorD:JerryTheGiraffe"
  | "melvorD:PrestonThePlatypus"
  | "melvorD:FestiveCoolRock"
  | "melvorD:FestiveChio"
  | "melvorF:Snek"
  | "melvorF:Quill"
  | "melvorF:Caaarrrlll"
  | "melvorF:Gunter"
  | "melvorF:Gronk"
  | "melvorF:Marahute"
  | "melvorF:Salem"
  | "melvorF:Monkey"
  | "melvorF:Asura"
  | "melvorF:Peri"
  | "melvorF:Otto"
  | "melvorF:JellyJim"
  | "melvorF:Harley"
  | "melvorF:Singe"
  | "melvorF:Aquarias"
  | "melvorF:Norman"
  | "melvorF:Erran"
  | "melvorF:Ren"
  | "melvorF:Pablo"
  | "melvorF:Sam"
  | "melvorF:TimTheWolf"
  | "melvorF:Mark"
  | "melvorF:Bone"
  | "melvorF:Astro"
  | "melvorF:B"
  | "melvorF:Marcy"
  | "melvorF:Roger"
  | "melvorF:Ace"
  | "melvorF:Layla"
  | "melvorF:MisterFuzzbutt"
  | "melvorF:OctaviusLepidus"
  | "melvorTotH:Penelope"
  | "melvorTotH:Harry"
  | "melvorTotH:Azuzu"
  | "melvorTotH:Webbie"
  | "melvorTotH:BillAndWendy"
  | "melvorTotH:Phantom"
  | "melvorTotH:Patchy"
  | "melvorTotH:Harold"
  | "melvorTotH:ClassyRock"
  | "melvorTotH:CuteRock"
  | "melvorTotH:RoyalRock"
  | "melvorTotH:ElfRock"
  | "melvorTotH:MagicRock"
  | "melvorTotH:PartyRock"
  | "melvorTotH:WarmSnowflake";
/**
 * Data for constructing a CombatArea object
 */
declare type CombatAreaData = CombatAreaData1 & {
  /**
   * The display name of the area
   */
  name: string;
  /**
   * A URI for the area's image
   */
  media: string;
  /**
   * An array of Monster IDs that can be fought in the area
   *
   * @minItems 1
   */
  monsterIDs: [MonsterID, ...MonsterID[]];
  /**
   * Determines the difficulty badges that display on the area. A single entry will show only that badge, while 2 will show a range of difficulty between the two entries.
   *
   * @minItems 1
   * @maxItems 2
   */
  difficulty: [number] | [number, number];
  /**
   * An array of requirements that the player must meet to enter the area
   */
  entryRequirements: AnyRequirementData[];
  [k: string]: unknown;
};
declare type CombatAreaData1 = IDData;
declare type InsertOrder = InsertStart | InsertEnd | InsertBefore | InsertAfter;
/**
 * The IDs of the objects to insert
 *
 * @minItems 1
 */
declare type ObjectsToInsert = [string, ...string[]];
/**
 * Data for constructing a SlayerArea object
 */
declare type SlayerAreaData = SlayerAreaData1 & {
  /**
   * Describes the slayer area's effect. Templated by
   */
  areaEffectDescription?: string;
  /**
   * Optional. If present the area will provide the given modifiers to the player or enemy
   */
  areaEffect?: AreaEffect;
  /**
   * Optional. If present, killing monsters in the area has a chance to drop a pet
   */
  pet?: PetChanceData;
  [k: string]: unknown;
};
declare type SlayerAreaData1 = CombatAreaData1;
declare type AreaEffect = PlayerAreaEffect | EnemyAreaEffect;
declare type StandardModifierKeys =
  | CombatModifierKey
  | (
      | "increasedChanceToDoubleLootCombat"
      | "increasedSlayerCoins"
      | "increasedGPGlobal"
      | "increasedGPFromMonsters"
      | "increasedGPFromMonstersFlat"
      | "increasedGPFromThieving"
      | "increasedGPFromThievingFlat"
      | "increasedGPFromAgility"
      | "decreasedGPFromAgility"
      | "increasedDamageToBosses"
      | "increasedDamageToSlayerTasks"
      | "increasedDamageToSlayerAreaMonsters"
      | "increasedDamageToCombatAreaMonsters"
      | "increasedDamageToDungeonMonsters"
      | "increasedDamageToAllMonsters"
      | "increasedAutoEatEfficiency"
      | "increasedAutoEatThreshold"
      | "increasedAutoEatHPLimit"
      | "increasedFoodHealingValue"
      | "increasedChanceToPreservePrayerPoints"
      | "increasedFlatPrayerCostReduction"
      | "increasedAmmoPreservation"
      | "increasedRunePreservation"
      | "increasedSlayerAreaEffectNegationFlat"
      | "decreasedMonsterRespawnTimer"
      | "decreasedChanceToDoubleLootCombat"
      | "decreasedSlayerCoins"
      | "decreasedGPGlobal"
      | "decreasedGPFromMonsters"
      | "decreasedGPFromMonstersFlat"
      | "decreasedDamageToBosses"
      | "decreasedDamageToSlayerTasks"
      | "decreasedDamageToSlayerAreaMonsters"
      | "decreasedDamageToCombatAreaMonsters"
      | "decreasedDamageToDungeonMonsters"
      | "decreasedDamageToAllMonsters"
      | "decreasedAutoEatEfficiency"
      | "decreasedAutoEatThreshold"
      | "decreasedAutoEatHPLimit"
      | "decreasedFoodHealingValue"
      | "decreasedChanceToPreservePrayerPoints"
      | "decreasedFlatPrayerCostReduction"
      | "decreasedAmmoPreservation"
      | "decreasedRunePreservation"
      | "increasedMonsterRespawnTimer"
      | "decreasedSlayerAreaEffectNegationFlat"
      | "increasedGPFromSales"
      | "increasedBankSpace"
      | "increasedBankSpaceShop"
      | "increasedChanceToPreservePotionCharge"
      | "decreasedGPFromSales"
      | "decreasedBankSpace"
      | "decreasedBankSpaceShop"
      | "decreasedChanceToPreservePotionCharge"
      | "increasedGlobalMasteryXP"
      | "increasedGlobalSkillXP"
      | "decreasedGlobalSkillXP"
      | "increasedMiningNodeHP"
      | "decreasedGlobalMasteryXP"
      | "decreasedMiningNodeHP"
      | "decreasedGPFromThieving"
      | "decreasedGPFromThievingFlat"
      | "dungeonEquipmentSwapping"
      | "increasedEquipmentSets"
      | "autoSlayerUnlocked"
      | "increasedTreeCutLimit"
      | "increasedGlobalPreservationChance"
      | "decreasedGlobalPreservationChance"
      | "increasedFarmingYield"
      | "decreasedFarmingYield"
      | "increasedSlayerTaskLength"
      | "decreasedSlayerTaskLength"
      | "increasedChanceToDoubleItemsGlobal"
      | "decreasedChanceToDoubleItemsGlobal"
      | "increasedChanceToDoubleOres"
      | "decreasedChanceToDoubleOres"
      | "golbinRaidWaveSkipCostReduction"
      | "golbinRaidIncreasedMaximumAmmo"
      | "golbinRaidIncreasedMaximumRunes"
      | "golbinRaidIncreasedMinimumFood"
      | "golbinRaidIncreasedPrayerLevel"
      | "golbinRaidIncreasedPrayerPointsStart"
      | "golbinRaidIncreasedPrayerPointsWave"
      | "golbinRaidIncreasedStartingRuneCount"
      | "golbinRaidPassiveSlotUnlocked"
      | "golbinRaidPrayerUnlocked"
      | "golbinRaidStartingWeapon"
      | "increasedPotionChargesFlat"
      | "decreasedPotionChargesFlat"
      | "increasedBirdNestDropRate"
      | "decreasedBirdNestDropRate"
      | "increasedChanceNoDamageMining"
      | "decreasedChanceNoDamageMining"
      | "increasedSeeingGoldChance"
      | "decreasedSeeingGoldChance"
      | "increasedChanceDoubleHarvest"
      | "decreasedChanceDoubleHarvest"
      | "increasedChanceForElementalRune"
      | "decreasedChanceForElementalRune"
      | "increasedElementalRuneGain"
      | "decreasedElementalRuneGain"
      | "increasedChanceRandomPotionHerblore"
      | "decreasedChanceRandomPotionHerblore"
      | "freeBonfires"
      | "increasedAltMagicSkillXP"
      | "decreasedAltMagicSkillXP"
      | "increasedChanceToConvertSeedDrops"
      | "aprilFoolsIncreasedMovementSpeed"
      | "aprilFoolsDecreasedMovementSpeed"
      | "aprilFoolsIncreasedTeleportCost"
      | "aprilFoolsDecreasedTeleportCost"
      | "aprilFoolsIncreasedUpdateDelay"
      | "aprilFoolsDecreasedUpdateDelay"
      | "aprilFoolsIncreasedLemonGang"
      | "aprilFoolsDecreasedLemonGang"
      | "aprilFoolsIncreasedCarrotGang"
      | "aprilFoolsDecreasedCarrotGang"
      | "increasedGPOnEnemyHit"
      | "decreasedGPOnEnemyHit"
      | "increasedAdditionalRunecraftCountRunes"
      | "decreasedAdditionalRunecraftCountRunes"
      | "increasedGPFromMonstersFlatBasedOnEvasion"
      | "increasedGPPerMeleeDamage"
      | "increasedGPPerRangedDamage"
      | "increasedGPPerMagicDamage"
      | "increasedGPFromSlayerTaskMonsters"
      | "increasedGPWhenHitBasedOnDR"
      | "increasedGPOnRegenBasedOnHPGain"
      | "increasedGPFromBurningMonsters"
      | "summoningSynergy_1_2"
      | "increasedFlatMagicDefenceBonus"
      | "decreasedSlayerTaskMonsterAccuracy"
      | "increasedMeleeRangedDefenceBonusBasedOnDR"
      | "increasedHPRegenWhenEnemyHasMoreEvasion"
      | "summoningSynergy_1_15"
      | "increasedSCfromLifesteal"
      | "increasedHealingOnAttackBasedOnDR"
      | "increasedSummoningAttackLifesteal"
      | "increasedWoodcuttingGemChance"
      | "increasedBonusFishingSpecialChance"
      | "summoningSynergy_3_9"
      | "increasedRunecraftingStavePreservation"
      | "summoningSynergy_Ent_Leprechaun"
      | "increasedWoodcuttingJewelryChance"
      | "summoningSynergy_3_17"
      | "increasedMinimumBirdNestsWhenPotionActive"
      | "summoningSynergy_3_19"
      | "summoningSynergy_4_5"
      | "decreasedCookingSuccessCap"
      | "doubleRuneEssenceMining"
      | "summoningSynergy_Mole_Leprechaun"
      | "doubleSilverGoldMining"
      | "increasedMiningBarChance"
      | "increasedMiningNodeHPWithPerfectSwing"
      | "summoningSynergy_4_19"
      | "increasedFishingCookedChance"
      | "increasedRunecraftingWaterComboRunes"
      | "summoningSynergy_Octopus_Leprechaun"
      | "increasedCraftingJewelryRandomGemChance"
      | "increasedSmithingDragonGearPreservation"
      | "increasedFishermansPotionCharges"
      | "summoningSynergy_6_7"
      | "increasedMagicMinHitBasedOnMaxHitSlayerTask"
      | "increasedMeleeMaxHitBasedOnMaxHitSlayerTask"
      | "summoningSynergy_6_13"
      | "increasedFlatHPRegenBasedOnMeleeMaxHit"
      | "summoningSynergy_6_15"
      | "summoningSynergy_7_8"
      | "increasedRangedMaxHitBasedOnMaxHitSlayerTask"
      | "summoningSynergy_7_13"
      | "increasedFlatHPRegenBasedOnRangedMaxHit"
      | "increasedChanceToApplyBurnWithRanged"
      | "increasedSlayerCoinsPerMagicDamageSlayerTask"
      | "summoningSynergy_8_13"
      | "increasedFlatHPRegenBasedOnMagicMaxHit"
      | "increasedRunecraftingEssencePreservation"
      | "thievingChefNoDamage"
      | "decreasedFlatCraftingDragonhideCost"
      | "summoningSynergy_9_17"
      | "increasedGenerousCookPotionCharges"
      | "summoningSynergy_9_19"
      | "increasedRuneEssenceThievingMiner"
      | "increasedChanceToDoubleLeatherDragonhideCrafting"
      | "summoningSynergy_10_17"
      | "giveRandomComboRunesRunecrafting"
      | "increasedFireRunesWhenMakingElementalRunes"
      | "increasedThievingAutoSellPrice"
      | "increasedRandomBarChanceThievingMiner"
      | "increasedHerbSackChanceThievingFarmer"
      | "summoningSynergy_Leprechaun_Devil"
      | "increasedDamageReductionAgainstSlayerTasks"
      | "increasedHitpointRegenerationAgainstSlayerTasks"
      | "summoningSynergy_13_14"
      | "increasedCraftingJewelryPreservation"
      | "increasedCraftingPotionCharges"
      | "increasedFiremakingLogGP"
      | "doubleSilverGoldSmithingWithSeeingGold"
      | "decreasedFlatSmithingCoalCost"
      | "summoningSynergy_Bear_Devil"
      | "increasedMeleeStrengthBonus"
      | "increasedRangedStrengthBonus"
      | "increasedMagicDamageBonus"
      | "decreasedMeleeStrengthBonus"
      | "decreasedRangedStrengthBonus"
      | "decreasedMagicDamageBonus"
      | "increasedAgilityObstacleCost"
      | "decreasedAgilityObstacleCost"
      | "decreasedSecondaryFoodBurnChance"
      | "freeCompost"
      | "increasedCompostPreservationChance"
      | "increasedOffItemChance"
      | "increasedFiremakingCoalChance"
      | "increasedMiningGemChance"
      | "doubleOresMining"
      | "increasedBonusCoalMining"
      | "decreasedSmithingCoalCost"
      | "allowSignetDrops"
      | "bonusCoalOnDungeonCompletion"
      | "increasedMasteryPoolProgress"
      | "increasedRuneProvision"
      | "bypassSlayerItems"
      | "itemProtection"
      | "increasedRedemptionThreshold"
      | "increasedRedemptionPercent"
      | "autoLooting"
      | "autoBurying"
      | "freeProtectItem"
      | "increasedSummoningShardCost"
      | "decreasedSummoningShardCost"
      | "increasedSummoningCreationCharges"
      | "decreasedSummoningCreationCharges"
      | "increasedSummoningChargePreservation"
      | "decreasedSummoningChargePreservation"
      | "decreasedPrayerCost"
      | "increasedPrayerCost"
      | "increasedGPMultiplierPer1MGP"
      | "increasedGPMultiplierCap"
      | "increasedGPMultiplierMin"
      | "allowAttackAugmentingMagic"
      | "autoEquipFoodUnlocked"
      | "autoSwapFoodUnlocked"
      | "increasedChanceSuccessfulCook"
      | "decreasedChanceSuccessfulCook"
      | "increasedChancePerfectCookGlobal"
      | "decreasedChancePerfectCookGlobal"
      | "increasedChancePerfectCookFire"
      | "decreasedChancePerfectCookFire"
      | "increasedChancePerfectCookFurnace"
      | "decreasedChancePerfectCookFurnace"
      | "increasedChancePerfectCookPot"
      | "decreasedChancePerfectCookPot"
      | "increasedThievingStealth"
      | "decreasedThievingStealth"
      | "increasedAltMagicRunePreservation"
      | "decreasedAltMagicRunePreservation"
      | "increasedMinThievingGP"
      | "decreasedMinThievingGP"
      | "increasedFishingSpecialChance"
      | "decreasedFishingSpecialChance"
      | "decreasedAllotmentSeedCost"
      | "increasedAllotmentSeedCost"
      | "increasedSummoningMaxHit"
      | "decreasedSummoningMaxHit"
      | "increasedChanceForDiamondFiremaking"
      | "decreasedChanceForDiamondFiremaking"
      | "increasedNonMagicPoisonChance"
      | "increasedChanceToPreserveFood"
      | "allowLootContainerStacking"
      | "infiniteLootContainer"
      | "increasedBaseStardustDropQty"
      | "increasedGPFromFiremaking"
      | "decreasedGPFromFiremaking"
      | "bigRon"
      | "increasedWoodcuttingXPAddedAsFiremakingXP"
      | "coalGainedOnCookingFailure"
      | "halvedWoodcuttingDoubleChance"
      | "increasedFlatFarmingYield"
      | "decreasedWoodcuttingXPAddedAsFiremakingXP"
      | "increasedChanceForOneExtraOre"
      | "decreasedChanceForOneExtraOre"
      | "increasedChanceForQualitySuperiorGem"
      | "decreasedChanceForQualitySuperiorGem"
      | "increasedMeteoriteOre"
      | "increasedChanceForAshInWoodcutting"
      | "decreasedChanceForAshInWoodcutting"
      | "increasedChanceForAshInFiremaking"
      | "decreasedChanceForAshInFiremaking"
      | "increasedChanceForStardustInFiremaking"
      | "decreasedChanceForStardustInFiremaking"
      | "increasedChanceForOneExtraFish"
      | "decreasedChanceForOneExtraFish"
      | "doubleLogProduction"
      | "decreasedFlatFarmingYield"
      | "increasedGPFromNegativeObstacles"
      | "decreasedGPFromNegativeObstacles"
      | "increasedXPFromNegativeObstacles"
      | "decreasedXPFromNegativeObstacles"
      | "increasedMasteryXPFromNegativeObstacles"
      | "decreasedMasteryXPFromNegativeObstacles"
      | "increasedChanceGoldenStardust"
      | "decreasedChanceGoldenStardust"
      | "increasedChanceStardust"
      | "decreasedChanceStardust"
      | "decreasedThievingStunIntervalPercent"
      | "increasedThievingStunIntervalPercent"
      | "decreasedGlobalSkillIntervalPercent"
      | "increasedGlobalSkillIntervalPercent"
      | "increasedChanceForArrowShaftsWoodcutting"
      | "decreasedChanceForArrowShaftsWoodcutting"
      | "decreasedNonShardCostForEquippedTablets"
      | "increasedNonShardCostForEquippedTablets"
      | "decreasedPassiveCookInterval"
      | "increasedPassiveCookInterval"
      | "increasedSalamanderCreationCharges"
      | "decreasedSalamanderCreationCharges"
      | "decreasedJavelinResourceCost"
      | "increasedJavelinResourceCost"
      | "increasedJavelinProduction"
      | "decreasedJavelinProduction"
      | "increasedChanceExtraJavelins"
      | "decreasedChanceExtraJavelins"
      | "increasedChanceExtraMeteoriteOre"
      | "decreasedChanceExtraMeteoriteOre"
      | "increasedChanceExtraArrows"
      | "decreasedChanceExtraArrows"
      | "increasedChanceExtraUnstrungBows"
      | "decreasedChanceExtraUnstrungBows"
      | "increasedChanceItemToGoldFletching"
      | "decreasedChanceItemToGoldFletching"
      | "increasedLeprechaunCreationCharges"
      | "decreasedLeprechaunCreationCharges"
      | "increasedGPFromAgilityPerActiveObstacle"
      | "decreasedGPFromAgilityPerActiveObstacle"
      | "increasedChanceExtraCrossbows"
      | "decreasedChanceExtraCrossbows"
      | "disableGoldenStardustDrops"
      | "increasedBoltProduction"
      | "decreasedBoltProduction"
      | "decreasedFletchingIntervalWithArrows"
      | "increasedFletchingIntervalWithArrows"
      | "increasedCyclopsCreationCharges"
      | "decreasedCyclopsCreationCharges"
      | "increasedGPFromItemAlchemy"
      | "increasedChanceForCharcoalInFiremaking"
      | "decreasedChanceForCharcoalInFiremaking"
      | "increasedThievingAreaUniqueChance"
      | "decreasedThievingAreaUniqueChance"
      | "increasedChanceToFindMeteorite"
      | "increasedChanceToFindMushroomWoodcutting"
      | "increasedChanceToAvoidThievingStuns"
      | "increasedChanceAdditionalPerfectItem"
      | "increasedChanceStardustCuttingMagicLogs"
      | "increasedTownshipPopulationCap"
      | "decreasedTownshipPopulationCap"
      | "increasedTownshipHappiness"
      | "decreasedTownshipHappiness"
      | "increasedTownshipEducation"
      | "decreasedTownshipEducation"
      | "increasedTownshipHealth"
      | "decreasedTownshipHealth"
      | "increasedTownshipGPProduction"
      | "decreasedTownshipGPProduction"
      | "increasedTownshipMaxStorage"
      | "decreasedTownshipMaxStorage"
      | "increasedTownshipFoodProduction"
      | "decreasedTownshipFoodProduction"
      | "increasedTownshipWoodProduction"
      | "decreasedTownshipWoodProduction"
      | "increasedTownshipOreProduction"
      | "decreasedTownshipOreProduction"
      | "increasedTownshipStoneProduction"
      | "decreasedTownshipStoneProduction"
      | "increasedTownshipCoalProduction"
      | "decreasedTownshipCoalProduction"
      | "increasedTownshipBarProduction"
      | "decreasedTownshipBarProduction"
      | "increasedTownshipHerbProduction"
      | "decreasedTownshipHerbProduction"
      | "increasedTownshipRuneEssenceProduction"
      | "decreasedTownshipRuneEssenceProduction"
      | "increasedTownshipLeatherProduction"
      | "decreasedTownshipLeatherProduction"
      | "increasedTownshipPotionProduction"
      | "decreasedTownshipPotionProduction"
      | "increasedTownshipPlankProduction"
      | "decreasedTownshipPlankProduction"
      | "increasedTownshipClothingProduction"
      | "decreasedTownshipClothingProduction"
      | "increasedTownshipBuildingCost"
      | "decreasedTownshipBuildingCost"
      | "increasedTownshipGrasslandsProduction"
      | "decreasedTownshipGrasslandsProduction"
      | "increasedTownshipForestProduction"
      | "decreasedTownshipForestProduction"
      | "increasedTownshipDesertProduction"
      | "decreasedTownshipDesertProduction"
      | "increasedTownshipWaterProduction"
      | "decreasedTownshipWaterProduction"
      | "increasedTownshipSwampProduction"
      | "decreasedTownshipSwampProduction"
      | "increasedTownshipAridPlainsProduction"
      | "decreasedTownshipAridPlainsProduction"
      | "increasedTownshipMountainsProduction"
      | "decreasedTownshipMountainsProduction"
      | "increasedTownshipValleyProduction"
      | "decreasedTownshipValleyProduction"
      | "increasedTownshipJungleProduction"
      | "decreasedTownshipJungleProduction"
      | "increasedTownshipSnowlandsProduction"
      | "decreasedTownshipSnowlandsProduction"
      | "increasedTownshipFishingDockProduction"
      | "decreasedTownshipFishingDockProduction"
      | "increasedTownshipMagicEmporiumProduction"
      | "decreasedTownshipMagicEmporiumProduction"
      | "increasedTownshipOrchardProduction"
      | "decreasedTownshipOrchardProduction"
      | "increasedTownshipFarmProduction"
      | "decreasedTownshipFarmProduction"
      | "increasedTownshipWoodcuttingProduction"
      | "decreasedTownshipWoodcuttingProduction"
      | "increasedTownshipBlacksmithProduction"
      | "decreasedTownshipBlacksmithProduction"
      | "increasedTownshipTaxPerCitizen"
      | "decreasedTownshipTaxPerCitizen"
      | "townshipDisableHunting"
      | "increasedTownshipResourceProduction"
      | "decreasedTownshipResourceProduction"
      | "increasedTownshipCoalUsage"
      | "decreasedTownshipCoalUsage"
      | "increasedTownshipBuildingHappinessPenalties"
      | "decreasedTownshipBuildingHappinessPenalties"
      | "increasedAdditionalAshInFiremaking"
      | "decreasedAdditionalAshInFiremaking"
      | "increasedTownshipFoodUsage"
      | "decreasedTownshipFoodUsage"
      | "increasedChanceToFindLostChest"
      | "increasedChanceToPreserveConsumable"
      | "increasedTownshipDeadStorage"
      | "decreasedTownshipDeadStorage"
      | "increasedDeadlyToxinsFromHerblore"
      | "increasedSummoningCreationChargesForEquippedTablets"
      | "decreasedSummoningIntervalPercentForEquippedTablets"
      | "increasedMinBirdNestQuantity"
      | "increasedGemVeinChance"
      | "decreasedGemVeinChance"
      | "increasedChanceAdditionalBarSmithing"
      | "increasedFletchingBoltQuantity"
      | "increasedAgilityPillarCost"
      | "decreasedAgilityPillarCost"
      | "increasedNonCombatSkillXP"
      | "decreasedNonCombatSkillXP"
      | "increasedFlatMeleeDefenceBonus"
      | "increasedFlatRangedDefenceBonus"
      | "increasedFlatStabAttackBonus"
      | "increasedFlatSlashAttackBonus"
      | "increasedFlatBlockAttackBonus"
      | "increasedFlatRangedAttackBonus"
      | "increasedFlatMagicAttackBonus"
      | "increasedFlatMeleeStrengthBonus"
      | "increasedFlatRangedStrengthBonus"
      | "disableSalamanderItemReduction"
      | "decreasedSummoningIntervalForOctopus"
      | "increasedMasteryPoolCap"
      | "bypassAllSlayerItems"
      | "increased5DROnBeingHit"
      | "allowNonMagicCurses"
      | "increasedTownshipTraderStock"
    );
declare type CombatModifierKey =
  | "increasedGlobalAccuracy"
  | "decreasedGlobalAccuracy"
  | "increasedMeleeAccuracyBonus"
  | "decreasedMeleeAccuracyBonus"
  | "increasedMeleeMaxHit"
  | "decreasedMeleeMaxHit"
  | "increasedMeleeEvasion"
  | "decreasedMeleeEvasion"
  | "increasedRangedAccuracyBonus"
  | "decreasedRangedAccuracyBonus"
  | "increasedRangedMaxHit"
  | "decreasedRangedMaxHit"
  | "increasedRangedEvasion"
  | "decreasedRangedEvasion"
  | "increasedMagicAccuracyBonus"
  | "decreasedMagicAccuracyBonus"
  | "increasedMagicMaxHit"
  | "decreasedMagicMaxHit"
  | "increasedMagicEvasion"
  | "decreasedMagicEvasion"
  | "increasedMaxHitFlat"
  | "decreasedMaxHitFlat"
  | "increasedMaxHitPercent"
  | "decreasedMaxHitPercent"
  | "increasedDamageReduction"
  | "decreasedDamageReduction"
  | "increasedHPRegenFlat"
  | "decreasedHPRegenFlat"
  | "decreasedAttackInterval"
  | "increasedAttackInterval"
  | "decreasedAttackIntervalPercent"
  | "increasedAttackIntervalPercent"
  | "increasedMaxHitpoints"
  | "decreasedMaxHitpoints"
  | "increasedFlatMaxHitpoints"
  | "decreasedFlatMaxHitpoints"
  | "increasedReflectDamage"
  | "decreasedReflectDamage"
  | "increasedFlatReflectDamage"
  | "decreasedFlatReflectDamage"
  | "increasedRolledReflectDamage"
  | "decreasedRolledReflectDamage"
  | "increasedLifesteal"
  | "decreasedLifesteal"
  | "increasedMeleeLifesteal"
  | "increasedRangedLifesteal"
  | "increasedMagicLifesteal"
  | "increasedBleedLifesteal"
  | "increasedBurnLifesteal"
  | "increasedPoisonLifesteal"
  | "decreasedMeleeLifesteal"
  | "decreasedRangedLifesteal"
  | "decreasedMagicLifesteal"
  | "decreasedBleedLifesteal"
  | "decreasedBurnLifesteal"
  | "decreasedPoisonLifesteal"
  | "increasedMeleeCritChance"
  | "decreasedMeleeCritChance"
  | "increasedRangedCritChance"
  | "decreasedRangedCritChance"
  | "increasedMagicCritChance"
  | "decreasedMagicCritChance"
  | "increasedHitpointRegeneration"
  | "decreasedHitpointRegeneration"
  | "increasedMinHitBasedOnMaxHit"
  | "decreasedMinHitBasedOnMaxHit"
  | "increasedAttackRolls"
  | "decreasedAttackRolls"
  | "increasedFlatMinHit"
  | "decreasedFlatMinHit"
  | "increasedDamageTaken"
  | "decreasedDamageTaken"
  | "increasedConfusion"
  | "increasedDecay"
  | "increasedGlobalEvasion"
  | "decreasedGlobalEvasion"
  | "increasedMinAirSpellDmg"
  | "decreasedMinAirSpellDmg"
  | "increasedMinWaterSpellDmg"
  | "decreasedMinWaterSpellDmg"
  | "increasedMinEarthSpellDmg"
  | "decreasedMinEarthSpellDmg"
  | "increasedMinFireSpellDmg"
  | "decreasedMinFireSpellDmg"
  | "increasedMaxAirSpellDmg"
  | "decreasedMaxAirSpellDmg"
  | "increasedMaxWaterSpellDmg"
  | "decreasedMaxWaterSpellDmg"
  | "increasedMaxEarthSpellDmg"
  | "decreasedMaxEarthSpellDmg"
  | "increasedMaxFireSpellDmg"
  | "decreasedMaxFireSpellDmg"
  | "meleeProtection"
  | "rangedProtection"
  | "magicProtection"
  | "curseImmunity"
  | "increasedDamageReductionPercent"
  | "decreasedDamageReductionPercent"
  | "stunImmunity"
  | "sleepImmunity"
  | "burnImmunity"
  | "poisonImmunity"
  | "bleedImmunity"
  | "debuffImmunity"
  | "freezeImmunity"
  | "increasedRebirthChance"
  | "increasedChanceToApplyBurn"
  | "decreasedChanceToApplyBurn"
  | "decreasedDragonBreathDamage"
  | "increasedMeleeStunThreshold"
  | "increasedFrostburn"
  | "increasedAfflictionChance"
  | "otherStyleImmunity"
  | "meleeImmunity"
  | "rangedImmunity"
  | "magicImmunity"
  | "slowImmunity"
  | "increasedEndOfTurnHealing2"
  | "increasedEndOfTurnHealing3"
  | "increasedEndOfTurnHealing5"
  | "increasedChanceToApplyPoison"
  | "increasedChanceToApplyFrostburn"
  | "increasedMeleeStunChance"
  | "increasedElementalEffectChance"
  | "frostBurnImmunity"
  | "increasedPoisonReflectChance"
  | "increasedBleedReflectChance"
  | "increasedMinNatureSpellDamageBasedOnMaxHit"
  | "increasedTotalBleedDamage"
  | "increasedChanceToIncreaseStunDuration"
  | "increasedSurgeSpellAccuracy"
  | "increasedSurgeSpellMaxHit"
  | "decreasedRegenerationInterval"
  | "increasedOnHitSlowMagnitude"
  | "globalEvasionHPScaling"
  | "doubleBoneDrops"
  | "increasedPrayerPointsWhenHit"
  | "increasedFlatMeleeAccuracyBonusPerAttackInterval"
  | "decreasedFlatMeleeAccuracyBonusPerAttackInterval"
  | "increasedFlatMeleeStrengthBonusPerAttackInterval"
  | "decreasedFlatMeleeStrengthBonusPerAttackInterval"
  | "increasedFlatRangedAccuracyBonusPerAttackInterval"
  | "decreasedFlatRangedAccuracyBonusPerAttackInterval"
  | "increasedFlatRangedStrengthBonusPerAttackInterval"
  | "decreasedFlatRangedStrengthBonusPerAttackInterval"
  | "increasedFlatMagicAccuracyBonusPerAttackInterval"
  | "decreasedFlatMagicAccuracyBonusPerAttackInterval"
  | "increasedDamageReductionAgainstMelee"
  | "decreasedDamageReductionAgainstMelee"
  | "increasedDamageReductionAgainstRanged"
  | "decreasedDamageReductionAgainstRanged"
  | "increasedDamageReductionAgainstMagic"
  | "decreasedDamageReductionAgainstMagic"
  | "increasedDamageReductionWithMagic2HWeapon"
  | "decreasedDamageReductionWithMagic2HWeapon"
  | "increasedMaxHitPercentBasedOnEnemyDamageReduction"
  | "decreasedMaxHitPercentBasedOnEnemyDamageReduction"
  | "increasedMeleeMaxHitBonusAgainstRanged"
  | "decreasedMeleeMaxHitBonusAgainstRanged"
  | "increasedRangedMaxHitBonusAgainstMagic"
  | "decreasedRangedMaxHitBonusAgainstMagic"
  | "increasedMagicMaxHitBonusAgainstMelee"
  | "decreasedMagicMaxHitBonusAgainstMelee"
  | "gainSlayerCoinsBasedOnEnemyCombatLevelMelee"
  | "gainSlayerCoinsBasedOnEnemyCombatLevelRanged"
  | "gainSlayerCoinsBasedOnEnemyCombatLevelMagic"
  | "increasedDamageReductionAgainstBosses"
  | "decreasedDamageReductionAgainstBosses"
  | "increasedChanceDoubleSlayerTaskKill"
  | "decreasedChanceDoubleSlayerTaskKill"
  | "increasedDamageTakenAddedAsPrayerPoints"
  | "decreasedDamageTakenAddedAsPrayerPoints"
  | "globalAccuracyHPScaling"
  | "decreasedEnemyDamageReduction"
  | "increasedEnemyDamageReduction"
  | "increasedGlobalStunChance"
  | "decreasedGlobalStunChance"
  | "increasedGlobalSleepChance"
  | "decreasedGlobalSleepChance"
  | "increased15SlowStunChance2Turns"
  | "decreased15SlowStunChance2Turns"
  | "increasedGPPerDamage"
  | "decreasedGPPerDamage"
  | "increasedGPBasedOnEnemyCombatLevel"
  | "increasedGPBasedOnSummonDamage"
  | "decreasedGPBasedOnSummonDamage"
  | "increasedSlayerCoinsPerDamage"
  | "decreasedSlayerCoinsPerDamage"
  | "increasedChanceToIncreaseSleepDuration"
  | "decreasedChanceToIncreaseSleepDuration"
  | "increasedChanceToAvoidStun"
  | "decreasedChanceToAvoidStun"
  | "increasedChanceToAvoidSleep"
  | "decreasedChanceToAvoidSleep"
  | "increasedHealWhenStunned"
  | "decreasedHealWhenStunned"
  | "increasedHealWhenSleep"
  | "decreasedHealWhenSleep"
  | "increasedChanceToApplyDeadlyPoisonWhenPoisoned"
  | "decreasedChanceToApplyDeadlyPoisonWhenPoisoned"
  | "increasedDamageTakenPerAttack"
  | "decreasedDamageTakenPerAttack"
  | "increasedDamageTakenWhenAsleep"
  | "decreasedDamageTakenWhenAsleep"
  | "increasedDamageTakenWhenStunned"
  | "decreasedDamageTakenWhenStunned"
  | "decreasedPlayerDamageReduction"
  | "increasedDamageDealtIfPoisoned"
  | "decreasedDamageDealtIfPoisoned"
  | "increasedMeleeMaxHitFlat"
  | "decreasedMeleeMaxHitFlat"
  | "increasedRangedMaxHitFlat"
  | "decreasedRangedMaxHitFlat"
  | "increasedMagicMaxHitFlat"
  | "decreasedMagicMaxHitFlat"
  | "increasedChanceToApplyShock"
  | "increasedAbsorbingSkin"
  | "increasedDuality"
  | "increasedChanceToApplyDecayCurse"
  | "increasedRage"
  | "increasedCurseLifesteal"
  | "applyRandomCurseOnSpawn"
  | "increasedChanceDarkBlade"
  | "increasedMaxHitPercentBasedOnDamageReduction"
  | "decreasedMaxHitPercentBasedOnDamageReduction"
  | "halveDamageReduction"
  | "increasedLifestealBasedOnHPRegenEffectiveness"
  | "disableHPRegeneration"
  | "increasedMinMeteorShowerSpellDamage"
  | "increasedEndOfTurnEvasion2"
  | "decreaseEnemyEvasionOnStun"
  | "decreaseEnemyEvasionOnSleep"
  | "decreasedEvasionBasedOnDR"
  | "healOnHitBasedOnTargetDR"
  | "doubleLifesteal"
  | "increasedMaxHPBurnDamage"
  | "increasedChanceToApplyDeadlyPoison"
  | "disableLifesteal"
  | "increasedSlayerCoinsBasedOnTargetDR"
  | "increasedSlayerCoinsPerPoisonDamage"
  | "increasedChanceToAvoidCurses"
  | "applyMadnessCurseOnSpawn"
  | "applyTormentCurseOnSpawn"
  | "applyDespairCurseOnSpawn"
  | "increasedMinPoisonArchaicDmg"
  | "increasedMinInfernalArchaicDmg"
  | "increasedMinLightningArchaicDmg"
  | "reducedTargetDamageRedcutionIfBleeding"
  | "increasedAssassin"
  | "summoningSynergy_Devil_Eagle"
  | "growingMadnessPassive"
  | "momentInTimePassive"
  | "reignOverTimePassive"
  | "increasedChanceToApplySleepToTargetWhenHit"
  | "increasedPlayerRage"
  | "increasedLeviathan"
  | "shadowCloak"
  | "increasedPoisonSpellAccuracy"
  | "increasedInfernalSpellAccuracy"
  | "increasedLightningSpellAccuracy"
  | "decreasedBurnDOTDamage"
  | "increasedBurnDOTDamage"
  | "decreasedBleedDOTDamage"
  | "increasedBleedDOTDamage"
  | "increasedPoisonDOTDamage"
  | "decreasedPoisonDOTDamage"
  | "increasedDeadlyPoisonDOTDamage"
  | "decreasedDeadlyPoisonDOTDamage"
  | "increased30Slow5TurnsChance"
  | "increasedEndOfTurnMaxHealing2"
  | "increasedEvasionAgainstMelee"
  | "increasedEvasionAgainstRanged"
  | "increasedEvasionAgainstMagic";
/**
 * Data for constructing a Dungeon object
 */
declare type DungeonData = DungeonData1 & {
  /**
   * An array of item IDs that will be rewarded when the dungeon is completed
   */
  rewardItemIDs: AnyItemID[];
  /**
   * Optional. If present this item will be rewarded upon the first completion of the dungeon
   */
  oneTimeRewardID?: AnyItemID;
  /**
   * If Monsters inside this dungeon should be allowed to drop their bone items
   */
  dropBones: boolean;
  /**
   * Optional. If present the dungeon's progres will visually display as completing different floors. Each element represents the number of monsters per floor.
   *
   * @minItems 1
   */
  floors?: [number, ...number[]];
  /**
   * Optional. ID of a Combat Event. If present, this dungeon will instead start the corresponding Combat Event instead of the standard behaviour.
   */
  eventID?: CombatEventID;
  /**
   * Optional. If present, this dungeon will require the dungeons specified to be completed first before it can be accessed
   *
   * @minItems 1
   */
  unlockRequirement?: [DungeonRequirementData, ...DungeonRequirementData[]];
  /**
   * Determines the Pet that is rolled for upon completing the dungeon
   */
  pet: PetChanceData;
  /**
   * If true, the dungeons pet will be awarded when the dungeon has been completed a number of times equal to the weight property of the pet property, instead of rolling randomly
   */
  fixedPetClears: boolean;
  /**
   * If combat should pause before each Boss monster in the dungeon
   */
  pauseOnBosses: boolean;
  /**
   * Optional. If present the Combat Passives with the IDs given will be given to all non-boss monsters in the dungeon
   *
   * @minItems 1
   */
  nonBossPassives?: [CombatPassiveID, ...CombatPassiveID[]];
  [k: string]: unknown;
};
declare type DungeonData1 = CombatAreaData1;
declare type CombatEventID = "melvorF:ImpendingDarkness";
/**
 * Data for constructing a ActivePrayer object
 */
declare type PrayerData = PrayerData1 & {
  /**
   * The Prayer level required to use the prayer
   */
  level: number;
  /**
   * The display name of the prayer
   */
  name: string;
  /**
   * A URI for the prayer's image
   */
  media: string;
  /**
   * The base number of prayer points to use when the Player makes an attack
   */
  pointsPerPlayer: number;
  /**
   * The base number of prayer points to use when the Enemy makes an attack
   */
  pointsPerEnemy: number;
  /**
   * The base number of prayer points to use when the Player regenerates hitpoints
   */
  pointsPerRegen: number;
  /**
   * The modifiers provided to the player when the prayer is active
   */
  modifiers: PlayerModifierData1;
  /**
   * Optional. Modifiers provided to the Enemy when the prayer is active
   */
  enemyModifiers?: CombatModifierData;
  [k: string]: unknown;
};
declare type PrayerData1 = IDData;
/**
 * Data for constructing a StandardSpell object
 */
declare type StandardSpellData = StandardSpellData1 & {
  /**
   * The base maximium hit used to calculate the player's max hit. 1/10th of the desired damage in Standard mode.
   */
  maxHit: number;
  /**
   * The type of the spell being cast. Used by the modifier system to grant specific bonuses to spells.
   */
  spellType: "Air" | "Water" | "Earth" | "Fire" | "Nature";
  /**
   * The tier of the spell being cast. Used by the modifier system to grant specific bonuses to spells.
   */
  spellTier: "Strike" | "Bolt" | "Blast" | "Wave" | "Surge" | "Other";
  /**
   * Optional. If present, the player's attack selection will be replaced with only this attack while using the spell.
   */
  specialAttackID?: SpecialAttackID;
  [k: string]: unknown;
};
declare type StandardSpellData1 = CombatSpellData;
/**
 * Data for constructing a CombatSpell object
 */
declare type CombatSpellData = CombatSpellData1 & {
  /**
   * Optional. If present, the player must have the specified EquipmentItem equipped to use the spell
   */
  requiredItemID?: EquipmentItemID;
  /**
   * Requirements the player must meet to use this spell
   */
  requirements?: AnyRequirementData[];
  [k: string]: unknown;
};
declare type CombatSpellData1 = BaseSpellData;
/**
 * Data for constructing a BaseSpell object
 */
declare type BaseSpellData = BaseSpellData1 & {
  /**
   * The display name of the spell
   */
  name: string;
  /**
   * URI for the spell's image
   */
  media: string;
  /**
   * The Magic level required to use the spell
   */
  level: number;
  /**
   * The base rune costs required to cast the spell
   */
  runesRequired: AnyItemQuantity[];
  /**
   * Optional. Specifies the rune costs for the spell when using combination runes. If unset, the runesRequired property will be used
   */
  runesRequiredAlt?: AnyItemQuantity[];
  [k: string]: unknown;
};
declare type BaseSpellData1 = IDData;
/**
 * Data for constructing a CurseSpell object
 */
declare type CurseSpellData = CurseSpellData1 & {
  /**
   * Combat modifiers that are applied when they are under the effect of the curse
   */
  targetModifiers: CombatModifierData;
  [k: string]: unknown;
};
declare type CurseSpellData1 = CombatSpellData1;
/**
 * Data for constructing a AuroraSpell object
 */
declare type AuroraSpellData = AuroraSpellData1 & {
  /**
   * Combat Modifiers provided to the player when using this spell
   */
  modifiers: CombatModifierData;
  [k: string]: unknown;
};
declare type AuroraSpellData1 = CombatSpellData1;
/**
 * Data for constructing a AncientSpell object
 */
declare type AncientSpellData = AncientSpellData1 & {
  /**
   * The ID of the special attack that the player's attack selection will be replaced with when using this spell
   */
  specialAttackID: SpecialAttackID;
  [k: string]: unknown;
};
declare type AncientSpellData1 = CombatSpellData1;
/**
 * Data for constructing a ArchaicSpell object
 */
declare type ArchaicSpellData = ArchaicSpellData1 & {
  /**
   * The type of the spell being cast. Used by the modifier system to grant specific spell bonuses.
   */
  spellType: "Poison" | "Infernal" | "Lightning" | "Other";
  /**
   * The base maximium hit used to calculate the player's max hit. 1/10th of the desired damage in Standard mode.
   */
  maxHit: number;
  /**
   * The ID of the special attack that the player's attack selection will be replaced with when using this spell
   */
  specialAttack: SpecialAttackID;
  [k: string]: unknown;
};
declare type ArchaicSpellData1 = CombatSpellData1;
/**
 * Data for constructing a Pet object
 */
declare type PetData = PetData1 & {
  /**
   * The display name of the Pet
   */
  name: string;
  /**
   * URI for the pet's image
   */
  media: string;
  /**
   * Optional. If present, this will displayed as the hint for obtaining the pet instead of the autogenerated one.
   */
  hint?: string;
  /**
   * Optional. Localization data for determining a custom pet hint
   */
  langHint?: LangStringData;
  /**
   * Optional. The ID of the skill that this pet is obtained from.
   */
  skillID?: SkillID;
  /**
   * Determines if the chance to recieve the pet should scale with the skill's mastery pool progress
   */
  scaleChanceWithMasteryPool: boolean;
  /**
   * If the pet should not count towards pet completion
   */
  ignoreCompletion: boolean;
  /**
   * The modifiers given to the player when this pet is owned
   */
  modifiers: PlayerModifierData1;
  /**
   * Optional. Modifiers given to the enemy when this pet is owned
   */
  enemyModifiers?: CombatModifierData;
  /**
   * If true, this pets bonuses will only apply in golbin raid
   */
  activeInRaid: boolean;
  /**
   * Optional. Specifies the name of the patreon who created this pet. Has no effect for modded pets.
   */
  patreonName?: string;
  /**
   * Optional. Specifies a custom description that should be appended to the end of the pet's tooltip
   */
  customDescription?: string;
  /**
   * Optional. Specifies localization strings that should be appended to the end of the pet's tooltip
   */
  langCustomDescription?: LangStringData;
  [k: string]: unknown;
};
declare type PetData1 = IDData;
/**
 * Data for constructing a ShopCategory object
 */
declare type ShopCategoryData = ShopCategoryData1 & {
  /**
   * The display name of the category
   */
  name: string;
  /**
   * URI of the categories image in the shop
   */
  media: string;
  /**
   * Optional. If set to true, this categories upgrades will only apply to golbin raid. Will also only show when accessing the raid shop. Defaults to false.
   */
  isGolbinRaid?: boolean;
  [k: string]: unknown;
};
declare type ShopCategoryData1 = IDData;
/**
 * Data for constructing a ShopPurchase object
 */
declare type ShopPurchaseData = ShopPurchaseData1 & {
  /**
   * Optional. Custom name for the purchase. Overrides the name generated by the purchase contents.
   */
  customName?: string;
  /**
   * Optional. Custom description for the purchase. Overrides the description generated by the purchase contents. Is automatically templated.
   */
  customDescription?: string;
  /**
   * URI of the purchases image in the shop
   */
  media: string;
  /**
   * The id of the category in the shop this purchase belongs to
   */
  category: ShopCategoryID;
  /**
   * Determines what should be given to the player when the purchase is bought
   */
  contains: {
    /**
     * Items that are added to the bank on purchase
     */
    items: AnyItemQuantity[];
    /**
     * Optional. Specifies an item with charges. If the player does not own the item, it will be added to their bank, otherwise only charges are granted
     */
    itemCharges?: {
      /**
       * The id of the EquipmentItem to give charges to
       */
      id: EquipmentItemID;
      /**
       * The number of charges to grant per purchase
       */
      quantity: number;
      [k: string]: unknown;
    };
    /**
     * Optional. Specifies modifiers that should be given per quantity of the item purchased.
     */
    modifiers?: PlayerModifierData1;
    /**
     * Optional. Specifies a pet that should be unlocked when the purchase is bought
     */
    petID?: PetID;
    /**
     * Optional. Specifies that the purchase contains a Golbin Raid crate
     */
    lootBox?: boolean;
    [k: string]: unknown;
  };
  /**
   * Determines the cost of purchasing this
   */
  cost: {
    /**
     * GP cost of the purchase
     */
    gp: ShopCostAmount;
    /**
     * Slayer coin cost of the purchase
     */
    slayerCoins: ShopCostAmount;
    /**
     * Array of Item costs of the purchase
     */
    items: AnyItemQuantity[];
    /**
     * Golbin Raid coin cost of the purchase
     */
    raidCoins: ShopCostAmount;
    [k: string]: unknown;
  };
  /**
   * If the player is allowed to purchase multiple of this purchase at once
   */
  allowQuantityPurchase: boolean;
  /**
   * Previous shop purchases that must be made before the item shows in the shop
   */
  unlockRequirements: ShopPurchaseRequirementData[];
  /**
   * Requirements the player must meet to purchase this item
   */
  purchaseRequirements: AnyRequirementData[];
  /**
   * The default limit to the number of times the player may purchase this. If set to 0, the player may purchase it unlimited times
   */
  defaultBuyLimit: number;
  /**
   * Defines gamemode specific overrides to the defaultBuyLimit
   */
  buyLimitOverrides: {
    /**
     * The ID of the gamemode that should override the defaultBuyLimit
     */
    gamemodeID: GamemodeID;
    /**
     * The buy limit for the purchase for the specified gamemode. If set to 0, the player max purchase it unlimited times
     */
    maximum: number;
    [k: string]: unknown;
  }[];
  /**
   * Determines if the shop purchase should still show in the shop when at its buy limit.
   */
  showBuyLimit: boolean;
  /**
   * Optional. Utilized for purchases that have modifiers, displays a summary of the first modifier's value formatted according to this value.
   */
  currentDescription?:
    | "PercentIncrease"
    | "PercentDecrease"
    | "Increase"
    | "Decrease"
    | "SecondsIncrease"
    | "SecondsDecrease";
  [k: string]: unknown;
};
declare type ShopPurchaseData1 = IDData;
declare type ShopCategoryID =
  | "melvorD:General"
  | "melvorD:SkillUpgrades"
  | "melvorD:Gloves"
  | "melvorD:Skillcapes"
  | "melvorD:Materials"
  | "melvorD:GolbinRaid"
  | "melvorF:Slayer"
  | "melvorF:Township"
  | "melvorTotH:SuperiorSkillcapes";
declare type ShopCostAmount = FixedCost | LinearCost | BankSlotCost | GloveCost;
declare type GamemodeID =
  | "melvorD:Unset"
  | "melvorD:Standard"
  | "melvorF:Hardcore"
  | "melvorF:Adventure"
  | "melvorF:Chaos"
  | "melvorF:HardcoreAdventureSpeedrun"
  | "melvorF:InternalSuffering"
  | "melvorF:HCCOSpeedrun";
/**
 * Data for constructing a ShopUpgradeChain object
 */
declare type ShopUpgradeChainData = ShopUpgradeChainData1 & {
  /**
   * The ID of the highest shop purchase in the chain
   */
  rootUpgradeID: ShopPurchaseID;
  /**
   * The display name of the upgrade chain
   */
  chainName: string;
  /**
   * The name of the shop upgrade shown when none in the chain are owned
   */
  defaultName: string;
  /**
   * The description of the shop upgrade shown when none in the chain are owned
   */
  defaultDescription: string;
  /**
   * Optional. Localization data for the chainName.
   */
  chainNameLang?: LangStringData;
  /**
   * Optional. Localization data for the defaultName.
   */
  defaultNameLang?: LangStringData;
  /**
   * Optional. Localization data for the defaultDescription.
   */
  descriptionLang?: LangStringData;
  [k: string]: unknown;
};
declare type ShopUpgradeChainData1 = IDData;
/**
 * Data for constructing a TutorialStage object
 */
declare type TutorialStageData = TutorialStageData1 & {
  /**
   * The display name of the stage
   */
  name: string;
  /**
   * The displayed description of the stage
   */
  description: string;
  /**
   * The tasks that must be completed to complete the stage
   *
   * @minItems 1
   */
  tasks: [TutorialTaskData, ...TutorialTaskData[]];
  /**
   * The ID of the page that the task is completed on
   */
  taskPage: PageID;
  /**
   * The IDs of the skills that are unlocked with the stage
   */
  skillUnlocks: SkillID[];
  /**
   * Rewards that are given upon completion of the stage
   */
  rewards: {
    /**
     * GP given upon stage completion
     */
    gp: number;
    /**
     * Slayer coins given upon stage completion
     */
    slayerCoins: number;
    /**
     * Items given upon stage completion
     */
    items: AnyItemQuantity[];
    [k: string]: unknown;
  };
  /**
   * ShopPurchases that the player is allowed to make during the stage
   */
  allowedShopPurchases: ShopPurchaseID[];
  /**
   * Monsters that the player is allowed to fight during the stage
   */
  allowedMonsters: MonsterID[];
  /**
   * Items that the player is not allowed to sell during the stage
   */
  bannedItemSales: AnyItemID[];
  /**
   * If the player is allowed to use combat during the stage
   */
  allowCombat: boolean;
  [k: string]: unknown;
};
declare type TutorialStageData1 = IDData;
declare type AnySkillData =
  | {
      /**
       * The ID of the skill to provide data with
       */
      skillID: "melvorD:Attack";
      data: BaseSkillData;
      [k: string]: unknown;
    }
  | {
      /**
       * The ID of the skill to provide data with
       */
      skillID: "melvorD:Strength";
      data: BaseSkillData;
      [k: string]: unknown;
    }
  | {
      /**
       * The ID of the skill to provide data with
       */
      skillID: "melvorD:Defence";
      data: BaseSkillData;
      [k: string]: unknown;
    }
  | {
      /**
       * The ID of the skill to provide data with
       */
      skillID: "melvorD:Hitpoints";
      data: BaseSkillData;
      [k: string]: unknown;
    }
  | {
      /**
       * The ID of the skill to provide data with
       */
      skillID: "melvorD:Ranged";
      data: BaseSkillData;
      [k: string]: unknown;
    }
  | {
      /**
       * The ID of the skill to provide data with
       */
      skillID: "melvorD:Magic";
      data: MagicSkillData;
      [k: string]: unknown;
    }
  | {
      /**
       * The ID of the skill to provide data with
       */
      skillID: "melvorD:Prayer";
      data: BaseSkillData;
      [k: string]: unknown;
    }
  | {
      /**
       * The ID of the skill to provide data with
       */
      skillID: "melvorD:Slayer";
      data: BaseSkillData;
      [k: string]: unknown;
    }
  | {
      /**
       * The ID of the skill to provide data with
       */
      skillID: "melvorD:Woodcutting";
      data: WoodcuttingSkillData;
      [k: string]: unknown;
    }
  | {
      /**
       * The ID of the skill to provide data with
       */
      skillID: "melvorD:Fishing";
      data: FishingSkillData;
      [k: string]: unknown;
    }
  | {
      /**
       * The ID of the skill to provide data with
       */
      skillID: "melvorD:Firemaking";
      data: FiremakingSkillData;
      [k: string]: unknown;
    }
  | {
      /**
       * The ID of the skill to provide data with
       */
      skillID: "melvorD:Cooking";
      data: CookingSkillData;
      [k: string]: unknown;
    }
  | {
      /**
       * The ID of the skill to provide data with
       */
      skillID: "melvorD:Mining";
      data: MiningSkillData;
      [k: string]: unknown;
    }
  | {
      /**
       * The ID of the skill to provide data with
       */
      skillID: "melvorD:Smithing";
      data: SmithingSkillData;
      [k: string]: unknown;
    }
  | {
      /**
       * The ID of the skill to provide data with
       */
      skillID: "melvorD:Thieving";
      data: ThievingSkillData;
      [k: string]: unknown;
    }
  | {
      /**
       * The ID of the skill to provide data with
       */
      skillID: "melvorD:Farming";
      data: FarmingSkillData;
      [k: string]: unknown;
    }
  | {
      /**
       * The ID of the skill to provide data with
       */
      skillID: "melvorD:Fletching";
      data: FletchingSkillData;
      [k: string]: unknown;
    }
  | {
      /**
       * The ID of the skill to provide data with
       */
      skillID: "melvorD:Crafting";
      data: CraftingSkillData;
      [k: string]: unknown;
    }
  | {
      /**
       * The ID of the skill to provide data with
       */
      skillID: "melvorD:Runecrafting";
      data: RunecraftingSkillData;
      [k: string]: unknown;
    }
  | {
      /**
       * The ID of the skill to provide data with
       */
      skillID: "melvorD:Herblore";
      data: HerbloreSkillData;
      [k: string]: unknown;
    }
  | {
      /**
       * The ID of the skill to provide data with
       */
      skillID: "melvorD:Agility";
      data: AgilitySkillData;
      [k: string]: unknown;
    }
  | {
      /**
       * The ID of the skill to provide data with
       */
      skillID: "melvorD:Summoning";
      data: SummoningSkillData;
      [k: string]: unknown;
    }
  | {
      /**
       * The ID of the skill to provide data with
       */
      skillID: "melvorD:Astrology";
      data: AstrologySkillData;
      [k: string]: unknown;
    }
  | {
      /**
       * The ID of the skill to provide data with
       */
      skillID: "melvorD:Township";
      data: TownshipSkillData;
      [k: string]: unknown;
    }
  | {
      /**
       * The ID of the skill to provide data with
       */
      skillID: string & string;
      data: BaseSkillData;
      [k: string]: unknown;
    };
declare type RareSkillDropChance =
  | FixedSkillDropChance
  | LevelScalingSkillDropChance
  | TotalMasteryScalingSkillDropChance;
/**
 * A linearly scaling chance that an item should drop that scales with skill level
 */
declare type LevelScalingSkillDropChance = LevelScalingSkillDropChance1 & {
  type: "LevelScaling";
  [k: string]: unknown;
};
declare type LevelScalingSkillDropChance1 = ScalingChance;
/**
 * A linearly scaling chance that an item should drop that scales with total mastery level
 */
declare type TotalMasteryScalingSkillDropChance = TotalMasteryScalingSkillDropChance1 & {
  type: "TotalMasteryScaling";
  [k: string]: unknown;
};
declare type TotalMasteryScalingSkillDropChance1 = ScalingChance;
declare type MilestoneData = CustomSkillMilestoneData | EquipItemMilestoneData;
/**
 * Defines a fully custom milestone for a skill
 */
declare type CustomSkillMilestoneData = CustomSkillMilestoneData1 & {
  type: "Custom";
  /**
   * Optional. Used to grab the description from localization
   */
  milestoneID?: string;
  [k: string]: unknown;
};
declare type CustomSkillMilestoneData1 = MilestoneLike;
/**
 * Data for the Magic Skill
 */
declare type MagicSkillData = MagicSkillData1 & {
  /**
   * Optional. Defines new Alt Magic spells
   *
   * @minItems 1
   */
  altSpells?: [AltMagicSpellData, ...AltMagicSpellData1[]];
  /**
   * Optional. Adds drops to the random shard table
   *
   * @minItems 1
   */
  randomShards?: [DropTableData, ...DropTableData[]];
  [k: string]: unknown;
};
declare type MagicSkillData1 = MasterySkillData;
/**
 * Basic data shared between all Mastery skills
 */
declare type MasterySkillData = MasterySkillData1 & {
  /**
   * Optional. ID of the mastery token for this skill
   */
  masteryTokenID?: TokenItemID;
  /**
   * Optional. Data for mastery level unlocks for this skill
   *
   * @minItems 1
   */
  masteryLevelUnlocks?: [MasteryLevelUnlockData, ...MasteryLevelUnlockData[]];
  [k: string]: unknown;
};
declare type MasterySkillData1 = BaseSkillData;
/**
 * Data for constructing a AltMagicSpell object
 */
declare type AltMagicSpellData = AltMagicSpellData1 & {
  /**
   * The displayed description for the spell. Automatically templated.
   */
  description: string;
  /**
   * The base experience earned per cast of the spell
   */
  baseExperience: number;
  /**
   * Optional. Defines item costs for the spell that do not change
   *
   * @minItems 1
   */
  fixedItemCosts?: [AnyItemQuantity, ...AnyItemQuantity[]];
  /**
   * Defines the special costs for the spell.
   */
  specialCost: {
    /**
     * The types of item(s) that should be consumed
     */
    type:
      | "AnyItem"
      | "JunkItem"
      | "BarIngredientsWithCoal"
      | "BarIngredientsWithoutCoal"
      | "None"
      | "AnySuperiorGem"
      | "AnyNormalFood";
    /**
     * The quantity of the item(s) that should be consumed
     */
    quantity: number;
    [k: string]: unknown;
  };
  /**
   * Defines what the spell produces. Can either be a special production, or a set itemID.
   */
  produces: AnyItemID | ("GP" | "Bar" | "RandomGem" | "RandomSuperiorGem" | "PerfectFood" | "RandomShards" | "MagicXP");
  /**
   * Determines the quantity of resources produces by the spell. Effect depends on the produces property.
   */
  productionRatio: number;
  [k: string]: unknown;
};
declare type AltMagicSpellData1 = BaseSpellData1;
/**
 * Data for the Woodcutting Skill
 */
declare type WoodcuttingSkillData = WoodcuttingSkillData1 & {
  /**
   * Defines new trees for the skill
   *
   * @minItems 1
   */
  trees?: [WoodcuttingTreeData, ...WoodcuttingTreeData1[]];
  /**
   * Sets the item that should drop as a Bird Nest
   */
  nestItemID?: AnyItemID;
  /**
   * Sets items that cannot drop as a random jewlery item
   *
   * @minItems 1
   */
  bannedJewleryIDs?: [AnyItemID, ...AnyItemID[]];
  /**
   * Sets the item that should drop as Ash
   */
  ashItemID?: AnyItemID;
  /**
   * Sets the item that should drop as Mushrooms
   */
  mushroomItemID?: AnyItemID;
  /**
   * Sets the item that should drop as Raven Nests
   */
  ravenNestItemID?: AnyItemID;
  [k: string]: unknown;
};
declare type WoodcuttingSkillData1 = MasterySkillData1;
/**
 * Data For constructing a WoodcuttingTree object
 */
declare type WoodcuttingTreeData = WoodcuttingTreeData1 & {
  /**
   * Display name of the tree
   */
  name: string;
  /**
   * URI of the trees image
   */
  media: string;
  /**
   * The base time it takes to cut the tree in [ms]
   */
  baseInterval: number;
  /**
   * Optional. If the tree can drop Raven's nests.
   */
  canDropRavenNest?: boolean;
  /**
   * Optional. The ID of a ShopPurchase that is required to cut this tree
   */
  shopItemPurchased?: ShopPurchaseID;
  [k: string]: unknown;
};
declare type WoodcuttingTreeData1 = SingleProductRecipeData;
/**
 * Data for constructing a SingleProductRecipe object
 */
declare type SingleProductRecipeData = SingleProductRecipeData1 & {
  /**
   * The ID of the item that is produced
   */
  productId: AnyItemID;
  [k: string]: unknown;
};
declare type SingleProductRecipeData1 = BasicSkillRecipeData;
/**
 * Data for constructing a BasicSkillRecipe object
 */
declare type BasicSkillRecipeData = BasicSkillRecipeData1 & {
  /**
   * The base experience rewarded per action
   */
  baseExperience: number;
  /**
   * The skill level required to perform the action
   */
  level: number;
  [k: string]: unknown;
};
declare type BasicSkillRecipeData1 = IDData;
/**
 * Data for the Fishing Skill
 */
declare type FishingSkillData = FishingSkillData1 & {
  /**
   * Defines new actions for the skill
   *
   * @minItems 1
   */
  fish?: [FishData, ...FishData1[]];
  /**
   * Defines new fishing areas
   *
   * @minItems 1
   */
  areas?: [FishingAreaData, ...FishingAreaData1[]];
  /**
   * Defines Junk items that can drop
   *
   * @minItems 1
   */
  junkItemIDs?: [AnyItemID, ...AnyItemID[]];
  /**
   * Defines Special items that can drop
   *
   * @minItems 1
   */
  specialItems?: [DropTableData, ...DropTableData[]];
  easterEgg?: {
    originalID: AnyItemID;
    equippedID: EquipmentItemID;
    rewardID: AnyItemID;
    [k: string]: unknown;
  };
  /**
   * Sets the item that should drop as Lost Chest
   */
  lostChestItem?: AnyItemID;
  [k: string]: unknown;
};
declare type FishingSkillData1 = MasterySkillData1;
/**
 * Data For constructing a Fish object
 */
declare type FishData = FishData1 & {
  /**
   * Base strength skill experience earned on a successful catch
   */
  strengthXP: number;
  /**
   * The base minimum interval to catch the fish in [ms]
   */
  baseMinInterval: number;
  /**
   * The base maximium interval to catch the fish in [ms]
   */
  baseMaxInterval: number;
  [k: string]: unknown;
};
declare type FishData1 = SingleProductRecipeData1;
/**
 * Data for constructing a FishingArea object
 */
declare type FishingAreaData = FishingAreaData1 & {
  /**
   * Display name of the area
   */
  name: string;
  /**
   * Optional. Flavour text description of the area.
   */
  description?: string;
  /**
   * The base fish chance
   */
  fishChance: number;
  /**
   * The base junk chance
   */
  junkChance: number;
  /**
   * The base special chance
   */
  specialChance: number;
  /**
   * The ids of fish that can be caught in this area
   *
   * @minItems 1
   */
  fishIDs: [FishingActionID, ...FishingActionID[]];
  /**
   * Optional. If present this item must be equipped to fish in the area
   */
  requiredItemID?: EquipmentItemID;
  /**
   * Optional. If present, the player must have read the Message in a bottle to fish in the area
   */
  isSecret?: boolean;
  [k: string]: unknown;
};
declare type FishingAreaData1 = IDData;
/**
 * Data for the Firemaking Skill
 */
declare type FiremakingSkillData = FiremakingSkillData1 & {
  /**
   * Defines new actions for the skill
   *
   * @minItems 1
   */
  logs?: [FiremakingLogData, ...FiremakingLogData1[]];
  /**
   * Sets the item that should drop as Coal Ore
   */
  coalItemID?: AnyItemID;
  /**
   * Sets the item that should drop as Diamond
   */
  diamondItemID?: AnyItemID;
  /**
   * Sets the item that should drop as Ash
   */
  ashItemID?: AnyItemID;
  /**
   * Sets the item that should drop as Fire Spirit
   */
  fireSpiritItemID?: AnyItemID;
  /**
   * Sets the item that should drop as Charcoal
   */
  charcoalItemID?: AnyItemID;
  [k: string]: unknown;
};
declare type FiremakingSkillData1 = MasterySkillData1;
/**
 * Data For constructing a FiremakingLog object
 */
declare type FiremakingLogData = FiremakingLogData1 & {
  /**
   * The Item ID of the log that should be burnt
   */
  logID: AnyItemID;
  /**
   * The base interval to burn a log in [ms]
   */
  baseInterval: number;
  /**
   * The base interval that a bonfire lasts for in [ms]
   */
  baseBonfireInterval: number;
  /**
   * The percent bonus to firemaking XP that a bonfire provides
   */
  bonfireXPBonus: number;
  [k: string]: unknown;
};
declare type FiremakingLogData1 = BasicSkillRecipeData1;
/**
 * Data for the Cooking Skill
 */
declare type CookingSkillData = CookingSkillData1 & {
  /**
   * Defines new categories for the skill
   *
   * @minItems 1
   */
  categories?: [CookingCategoryData, ...CookingCategoryData1[]];
  /**
   * Defines new actions for the skill
   *
   * @minItems 1
   */
  recipes?: [CookingRecipeData, ...CookingRecipeData1[]];
  [k: string]: unknown;
};
declare type CookingSkillData1 = MasterySkillData1;
/**
 * Data for constructing a CookingCategory object
 */
declare type CookingCategoryData = CookingCategoryData1 & {
  /**
   * Shop upgrades that improve the cooking for this category. Used to change the display of the category. Should be in order of highest to lowest tier upgrade.
   */
  shopUpgradeIDs: ShopPurchaseID[];
  /**
   * If an upgrade must be purchased to cook items in this category
   */
  upgradeRequired: boolean;
  [k: string]: unknown;
};
declare type CookingCategoryData1 = SkillCategoryData;
/**
 * Data for constructing a SkillCategory object
 */
declare type SkillCategoryData = SkillCategoryData1 & {
  /**
   * URI for the categories image
   */
  media: string;
  /**
   * Display name for the category
   */
  name: string;
  [k: string]: unknown;
};
declare type SkillCategoryData1 = IDData;
/**
 * Data for constructing a CookingRecipe object
 */
declare type CookingRecipeData = CookingRecipeData1 & {
  /**
   * The Item ID of the perfect version of the product
   */
  perfectCookID: AnyItemID;
  /**
   * The base interval to perform the action in [ms]
   */
  baseInterval: number;
  /**
   * Optional. Flags the recipe as not participating in the mastery system.
   */
  noMastery?: boolean;
  /**
   * Optional. An array of Item IDs that player has to have found first, before being able to cook this recipe
   *
   * @minItems 1
   */
  discoveredItems?: [AnyItemID, ...AnyItemID[]];
  [k: string]: unknown;
};
declare type CookingRecipeData1 = SingleProductArtisanSkillRecipeData;
/**
 * Data for constructing a SingleProductArtisanSkillRecipe object
 */
declare type SingleProductArtisanSkillRecipeData = SingleProductArtisanSkillRecipeData1 & {
  /**
   * ID of the item produced by this recipe
   */
  productID: AnyItemID;
  /**
   * The base quantity of the item produced
   */
  baseQuantity: number;
  [k: string]: unknown;
};
declare type SingleProductArtisanSkillRecipeData1 = CategorizedArtisanRecipeData;
/**
 * Data for constructing a CategorizedArtisanRecipeData object
 */
declare type CategorizedArtisanRecipeData = CategorizedArtisanRecipeData1 & {
  /**
   * ID of the category this recipe belongs to
   */
  categoryID: string;
  [k: string]: unknown;
};
declare type CategorizedArtisanRecipeData1 = ArtisanSkillRecipeData;
/**
 * Data for constructing a ArtisanSkillRecipeData object
 */
declare type ArtisanSkillRecipeData = ArtisanSkillRecipeData1 & {
  /**
   * The base items required to peform the action
   */
  itemCosts: AnyItemQuantity[];
  /**
   * The base GP cost required to perform the action
   */
  gpCost: number;
  /**
   * The base slayer coin cost required to perform the action
   */
  scCost: number;
  [k: string]: unknown;
};
declare type ArtisanSkillRecipeData1 = BasicSkillRecipeData1;
/**
 * Data for the Mining Skill
 */
declare type MiningSkillData = MiningSkillData1 & {
  /**
   * Defines new actions for the skill
   *
   * @minItems 1
   */
  rockData?: [MiningRockData, ...MiningRockData1[]];
  /**
   * Sets the item that should drop as Coal Ore
   */
  coalItemID?: AnyItemID;
  /**
   * Sets the item that should drop as Runestone
   */
  runestoneItemID?: AnyItemID;
  [k: string]: unknown;
};
declare type MiningSkillData1 = MasterySkillData1;
/**
 * Data For constructing a MiningRock object
 */
declare type MiningRockData = MiningRockData1 & {
  /**
   * Display name of the rock
   */
  name: string;
  /**
   * URI of the rocks image
   */
  media: string;
  /**
   * The base time it takes for the rock to respawn in [ms]
   */
  baseRespawnInterval: number;
  /**
   * The base quantity of items recieved per action
   */
  baseQuantity: number;
  /**
   * Optional. If present the player required a total mastery level for mining greater than or equal to this to mine it.
   */
  totalMasteryRequired?: number;
  hasPassiveRegen: boolean;
  /**
   * If the rock can benefit from modifiers that increase the chance to obtain gems
   */
  giveGems: boolean;
  /**
   * Optional. The base % chance to give a superior gem. If undefined, the rock cannot give a superior gem.
   */
  superiorGemChance?: number;
  /**
   * Optional. The ID of a ShopPurchase that is required to mine this rock
   */
  shopItemPurchased?: ShopPurchaseID;
  /**
   * Optional. If present, fixes the maximum HP of this mining node to the specified value.
   */
  fixedMaxHP?: number;
  /**
   * The type of rock this mining node is.
   */
  type: MiningRockType;
  /**
   * Optional. If present, this rock is eligible to be rolled as a gem vein and have it's HP increase. Higher weight indicates a higher chance to be selected.
   */
  gemVeinWeight?: number;
  [k: string]: unknown;
};
declare type MiningRockData1 = SingleProductRecipeData1;
/**
 * Data for the Smithing Skill
 */
declare type SmithingSkillData = SmithingSkillData1 & {
  /**
   * Defines new categories for the skill
   *
   * @minItems 1
   */
  categories?: [SkillCategoryData1, ...SkillCategoryData1[]];
  /**
   * Defines new actions for the skill
   *
   * @minItems 1
   */
  recipes?: [SingleProductArtisanSkillRecipeData1, ...SingleProductArtisanSkillRecipeData1[]];
  [k: string]: unknown;
};
declare type SmithingSkillData1 = MasterySkillData1;
/**
 * Data for the Thieving Skill
 */
declare type ThievingSkillData = ThievingSkillData1 & {
  /**
   * Defines new actions for the skill
   *
   * @minItems 1
   */
  npcs?: [ThievingNPCData, ...ThievingNPCData1[]];
  /**
   * Defines new areas for the skill
   *
   * @minItems 1
   */
  areas?: [ThievingAreaData, ...ThievingAreaData1[]];
  /**
   * Defines rare items that can be dropped from any thieving target
   *
   * @minItems 1
   */
  generalRareItems?: [GeneralThievingRareData, ...GeneralThievingRareData[]];
  /**
   * Sets the item that should drop from the Ent + Leprechaun synergy
   */
  entLeprechaunItem?: AnyItemID;
  /**
   * Sets the item that should drop from the Crow + Leprechaun synergy
   */
  crowLeprechaunItem?: AnyItemID;
  /**
   * Sets the item that should drop from the Bear + Leprechaun synergy
   */
  bearLeprechaunItem?: AnyItemID;
  easterEgg?: {
    equippedID: EquipmentItemID;
    positionedID: AnyItemID;
    rewardID: AnyItemID;
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
declare type ThievingSkillData1 = MasterySkillData1;
/**
 * Data For constructing a ThievingNPC object
 */
declare type ThievingNPCData = ThievingNPCData1 & {
  /**
   * Display name of the NPC
   */
  name: string;
  /**
   * URI of the NPC's image
   */
  media: string;
  /**
   * Value of the NPCs perception stat. Higher values indicate a more difficult target to steal from
   */
  perception: number;
  /**
   * The maximium damage the NPC hits the player for when they fail a pickpocket attempt. 1/10th of the damage value in Normal Mode.
   */
  maxHit: number;
  /**
   * The base maximium GP that the NPC can drop
   */
  maxGP: number;
  /**
   * Optional. Defines an item that rarely drops from this NPC
   */
  uniqueDrop?: AnyItemQuantity;
  /**
   * Defines the common drops of this NPC
   */
  lootTable: DropTableData[];
  [k: string]: unknown;
};
declare type ThievingNPCData1 = BasicSkillRecipeData1;
/**
 * Data For constructing a ThievingArea object
 */
declare type ThievingAreaData = ThievingAreaData1 & {
  /**
   * The display name of this area
   */
  name: string;
  /**
   * The IDs of Thieving NPCs that are located in this area
   *
   * @minItems 1
   */
  npcIDs: [ThievingActionID, ...ThievingActionID[]];
  /**
   * Defines the area unique drops that can be obtained from npcs in this area
   */
  uniqueDrops: AnyItemQuantity[];
  [k: string]: unknown;
};
declare type ThievingAreaData1 = IDData;
/**
 * Data for the Farming Skill
 */
declare type FarmingSkillData = FarmingSkillData1 & {
  /**
   * Defines new categories for the skill
   *
   * @minItems 1
   */
  categories?: [FarmingCategoryData, ...FarmingCategoryData1[]];
  /**
   * Defines new actions for the skill
   *
   * @minItems 1
   */
  recipes?: [FarmingRecipeData, ...FarmingRecipeData1[]];
  /**
   * Defines new farming plots
   *
   * @minItems 1
   */
  plots?: [FarmingPlotData, ...FarmingPlotData1[]];
  [k: string]: unknown;
};
declare type FarmingSkillData1 = MasterySkillData1;
/**
 * Data for constructing a FarmingCategory object
 */
declare type FarmingCategoryData = FarmingCategoryData1 & {
  /**
   * If actions in this category should have a chance to return seeds on harvest
   */
  returnSeeds: boolean;
  /**
   * If the xp gained from harvesting crops in the category should scale with the quantity of items harvested
   */
  scaleXPWithQuantity: boolean;
  /**
   * Multiplier to the quantity of items gained when harvesting for recipes in this category
   */
  harvestMultiplier: number;
  /**
   * If experience should be granted when planting a recipe in this category
   */
  giveXPOnPlant: boolean;
  /**
   * Flavour text displayed on the category button
   */
  description: string;
  /**
   * Text displayed regarding the seed cost to plant recipes in this category. Shown when selecting a seed to plant.
   */
  seedNotice: string;
  /**
   * Singular form of the display name of this category. e.g. Herb
   */
  singularName: string;
  [k: string]: unknown;
};
declare type FarmingCategoryData1 = SkillCategoryData1;
/**
 * Data for constructing a FarmingRecipe object
 */
declare type FarmingRecipeData = FarmingRecipeData1 & {
  /**
   * The base time that it takes for the crop to grow in [ms]
   */
  baseInterval: number;
  /**
   * The ID of the Farming category this recipe belongs to
   */
  categoryID: FarmingCategoryID;
  /**
   * The seeds required to plant this recipe
   */
  seedCost: AnyItemQuantity;
  /**
   * Optional. URI of image to display when the crop is fully grown
   */
  grownMedia?: string;
  /**
   * Optional. Overrides the display name of the grown crop from this recipe's product's name
   */
  grownName?: string;
  /**
   * Optional. Defines localization data for the grownName property
   */
  grownNameLang?: LangStringData;
  [k: string]: unknown;
};
declare type FarmingRecipeData1 = SingleProductRecipeData1;
/**
 * Data for constructing a FarmingPlot object
 */
declare type FarmingPlotData = FarmingPlotData1 & {
  /**
   * The ID of the farming category of seeds that can be planted in this plot
   */
  categoryID: FarmingCategoryID;
  /**
   * The farming skill level required to unlock this plot
   */
  level: number;
  /**
   * The GP cost required to purchase this plot. If set to 0, the plot will automatically be unlocked when the level requirement is met.
   */
  gpCost: number;
  [k: string]: unknown;
};
declare type FarmingPlotData1 = IDData;
/**
 * Data for the Fletching Skill
 */
declare type FletchingSkillData = FletchingSkillData1 & {
  /**
   * Defines new categories for the skill
   *
   * @minItems 1
   */
  categories?: [SkillCategoryData1, ...SkillCategoryData1[]];
  /**
   * Defines new actions for the skill
   *
   * @minItems 1
   */
  recipes?: [FletchingRecipeData, ...FletchingRecipeData1[]];
  [k: string]: unknown;
};
declare type FletchingSkillData1 = MasterySkillData1;
/**
 * Data for constructing a FletchingRecipe object
 */
declare type FletchingRecipeData = FletchingRecipeData1 & {
  /**
   * Optional. Defines additional costs for the recipe that the player must select one of
   *
   * @minItems 2
   */
  alternativeCosts?: [
    {
      /**
       * The additional items required
       *
       * @minItems 1
       */
      itemCosts: [AnyItemQuantity, ...AnyItemQuantity[]];
      /**
       * Provides a multiplier to the base quantity of items made when crafting the recipe with these costs
       */
      quantityMultiplier: number;
      [k: string]: unknown;
    },
    {
      /**
       * The additional items required
       *
       * @minItems 1
       */
      itemCosts: [AnyItemQuantity, ...AnyItemQuantity[]];
      /**
       * Provides a multiplier to the base quantity of items made when crafting the recipe with these costs
       */
      quantityMultiplier: number;
      [k: string]: unknown;
    },
    ...{
      /**
       * The additional items required
       *
       * @minItems 1
       */
      itemCosts: [AnyItemQuantity, ...AnyItemQuantity[]];
      /**
       * Provides a multiplier to the base quantity of items made when crafting the recipe with these costs
       */
      quantityMultiplier: number;
      [k: string]: unknown;
    }[]
  ];
  [k: string]: unknown;
};
declare type FletchingRecipeData1 = SingleProductArtisanSkillRecipeData1;
/**
 * Data for the Crafting Skill
 */
declare type CraftingSkillData = CraftingSkillData1 & {
  /**
   * Defines new categories for the skill
   *
   * @minItems 1
   */
  categories?: [SkillCategoryData1, ...SkillCategoryData1[]];
  /**
   * Defines new actions for the skill
   *
   * @minItems 1
   */
  recipes?: [SingleProductArtisanSkillRecipeData1, ...SingleProductArtisanSkillRecipeData1[]];
  [k: string]: unknown;
};
declare type CraftingSkillData1 = MasterySkillData1;
/**
 * Data for the Runecrafting Skill
 */
declare type RunecraftingSkillData = RunecraftingSkillData1 & {
  /**
   * Defines new categories for the skill
   *
   * @minItems 1
   */
  categories?: [SkillCategoryData1, ...SkillCategoryData1[]];
  /**
   * Defines new actions for the skill
   *
   * @minItems 1
   */
  recipes?: [SingleProductArtisanSkillRecipeData1, ...SingleProductArtisanSkillRecipeData1[]];
  /**
   * Defines elemental runes that can be randomly given via the increasedChanceForElementalRune modifier
   *
   * @minItems 1
   */
  elementalRuneIDs?: [AnyItemID, ...AnyItemID[]];
  /**
   * Defines combo runes that can be randomly given via the summoningSynergy_10_18 modifier
   *
   * @minItems 1
   */
  comboRuneIDs?: [AnyItemID, ...AnyItemID[]];
  /**
   * Sets the item that should dropped from the Crow + Devil synergy
   */
  crowDevilItem?: AnyItemID;
  [k: string]: unknown;
};
declare type RunecraftingSkillData1 = MasterySkillData1;
/**
 * Data for the Herblore Skill
 */
declare type HerbloreSkillData = HerbloreSkillData1 & {
  /**
   * Defines new categories for the skill
   *
   * @minItems 1
   */
  categories?: [SkillCategoryData1, ...SkillCategoryData1[]];
  /**
   * Defines new actions for the skill
   *
   * @minItems 1
   */
  recipes?: [HerbloreRecipeData, ...HerbloreRecipeData1[]];
  /**
   * Sets the item that should dropped via the increasedDeadlyToxinsFromHerblore modifier
   */
  deadlyToxinsItem?: AnyItemID;
  [k: string]: unknown;
};
declare type HerbloreSkillData1 = MasterySkillData1;
/**
 * Data for constructing a HerbloreRecipe object
 */
declare type HerbloreRecipeData = HerbloreRecipeData1 & {
  /**
   * The IDs of potion items that can be obtained at each tier
   *
   * @minItems 4
   * @maxItems 4
   */
  potionIDs: [PotionItemID, PotionItemID, PotionItemID, PotionItemID];
  /**
   * The display name of the potion
   */
  name: string;
  [k: string]: unknown;
};
declare type HerbloreRecipeData1 = CategorizedArtisanRecipeData1;
/**
 * Data for the Agility Skill
 */
declare type AgilitySkillData = AgilitySkillData1 & {
  /**
   * Defines new passive pillars for the skill
   *
   * @minItems 1
   */
  pillars?: [BaseAgilityObjectData, ...BaseAgilityObjectData1[]];
  /**
   * Defines new elite passive pillars for the skill
   *
   * @minItems 1
   */
  elitePillars?: [BaseAgilityObjectData1, ...BaseAgilityObjectData1[]];
  /**
   * Defines new obstacles for the skill
   *
   * @minItems 1
   */
  obstacles?: [AgilityObstacleData, ...AgilityObstacleData1[]];
  [k: string]: unknown;
};
declare type AgilitySkillData1 = MasterySkillData1;
/**
 * Data for constructing a BaseAgilityObject object
 */
declare type BaseAgilityObjectData = BaseAgilityObjectData1 & {
  /**
   * Display name of the obstacle or pillar
   */
  name: string;
  /**
   * Items required to build the obstacle/pillar
   */
  itemCosts: AnyItemQuantity[];
  /**
   * GP required to build the obstacle/pillar
   */
  gpCost: number;
  /**
   * Slayer coins required to build the obstacle/pillar
   */
  scCost: number;
  /**
   * Modifiers provided to the player by the obstacle/pillar
   */
  modifiers: PlayerModifierData1;
  [k: string]: unknown;
};
declare type BaseAgilityObjectData1 = IDData;
/**
 * Data for constructing a AgilityObstacle object
 */
declare type AgilityObstacleData = AgilityObstacleData1 & {
  /**
   * URI of the obstacles image
   */
  media: string;
  /**
   * The tier of the agility obstacle. 0 indexed.
   */
  category: number;
  /**
   * The base time it takes to complete the obstacle in [ms]
   */
  baseInterval: number;
  /**
   * Non-Agility Skill levels the player is required to have before building this obstacle
   */
  skillRequirements: SkillLevelRequirementData[];
  /**
   * The base Agility experience granted when completing the obstacle
   */
  baseExperience: number;
  /**
   * The base GP granted when completing the obstacle
   */
  gpReward: number;
  /**
   * The base slayer coins granted when completing the obstacle
   */
  scReward: number;
  /**
   * Items granted when completing the obstacle
   */
  itemRewards: AnyItemQuantity[];
  [k: string]: unknown;
};
declare type AgilityObstacleData1 = BaseAgilityObjectData1;
/**
 * Data for the Summoning Skill
 */
declare type SummoningSkillData = SummoningSkillData1 & {
  /**
   * Defines new categories for the skill
   *
   * @minItems 1
   */
  categories?: [SkillCategoryData1, ...SkillCategoryData1[]];
  /**
   * Defines new actions for the skill
   *
   * @minItems 1
   */
  recipes?: [SummoningRecipeData, ...SummoningRecipeData1[]];
  /**
   * Defines new summoning synergies
   *
   * @minItems 1
   */
  synergies?: [SummoningSynergyData, ...SummoningSynergyData[]];
  [k: string]: unknown;
};
declare type SummoningSkillData1 = MasterySkillData1;
/**
 * Data for constructing a SummoningRecipe object
 */
declare type SummoningRecipeData = SummoningRecipeData1 & {
  /**
   * URI of the Summoning marks media shown on the Marks tab
   */
  markMedia: string;
  /**
   * The IDs of non shard items that are options to make the Summoning Tablet. Quantity required is determined by the item's sale price. If left empty, the recipe has no non-shard item cost.
   */
  nonShardItemCosts: AnyItemID[];
  /**
   * The tier of the summoning mark
   */
  tier: number;
  /**
   * The IDs of skills that this mark can be obtained from
   */
  skillIDs: SkillID[];
  [k: string]: unknown;
};
declare type SummoningRecipeData1 = SingleProductArtisanSkillRecipeData1;
/**
 * Data for the Summoning Skill
 */
declare type AstrologySkillData = AstrologySkillData1 & {
  /**
   * Defines new constellations for the skill
   *
   * @minItems 1
   */
  recipes?: [AstrologyRecipeData, ...AstrologyRecipeData1[]];
  /**
   * Sets the Stardust item for the skill
   */
  stardustItemID?: AnyItemID;
  /**
   * Sets the Golden Stardust item for the skill
   */
  goldenStardustItemID?: AnyItemID;
  [k: string]: unknown;
};
declare type AstrologySkillData1 = MasterySkillData1;
/**
 * Data for constructing a AstrologyRecipe object
 */
declare type AstrologyRecipeData = AstrologyRecipeData1 & {
  /**
   * The display name of the constellation
   */
  name: string;
  /**
   * The URI of the constellations image
   */
  media: string;
  /**
   * The skills associated with this constellation
   */
  skillIDs: SkillID[];
  /**
   * GP rewarded upon completion of the action
   */
  gpReward: number;
  /**
   * Slayer coins rewarded upon completion of the action
   */
  scReward: number;
  /**
   * Items rewarded upon completion of the action
   */
  itemRewards: AnyItemQuantity[];
  /**
   * The standard modifiers of this constellation
   *
   * @minItems 3
   * @maxItems 3
   */
  standardModifiers: [AstrologyModifierData, AstrologyModifierData, AstrologyModifierData];
  /**
   * The unique modifiers of this constellation
   *
   * @minItems 3
   * @maxItems 3
   */
  uniqueModifiers: [AstrologyModifierData, AstrologyModifierData, AstrologyModifierData];
  /**
   * Optional. The key of an mastery XP modifier that depends on the number of max level modifiers
   */
  masteryXPModifier?: SkillModifierKeys;
  [k: string]: unknown;
};
declare type AstrologyRecipeData1 = BasicSkillRecipeData1;
declare type SkillModifierKeys =
  | "increasedHiddenSkillLevel"
  | "decreasedHiddenSkillLevel"
  | "decreasedSkillInterval"
  | "decreasedSkillIntervalPercent"
  | "increasedMasteryXP"
  | "increasedSkillXP"
  | "increasedSkillInterval"
  | "increasedSkillIntervalPercent"
  | "decreasedMasteryXP"
  | "decreasedSkillXP"
  | "increasedChanceToDoubleItemsSkill"
  | "decreasedChanceToDoubleItemsSkill"
  | "increasedSkillPreservationChance"
  | "decreasedSkillPreservationChance"
  | "increasedChanceAdditionalSkillResource"
  | "decreasedChanceAdditionalSkillResource"
  | "doubleItemsSkill"
  | "masteryToken"
  | "increasedSkillPreservationCap"
  | "decreasedSkillPreservationCap"
  | "increasedSkillMasteryXPPerDeedree"
  | "increasedSkillMasteryXPPerAmeria"
  | "increasedSkillMasteryXPPerVale"
  | "increasedSkillMasteryXPPerQimican"
  | "increasedSkillMasteryXPPerKo"
  | "increasedSkillMasteryXPPerArachi"
  | "increasedSkillMasteryXPPerIridan"
  | "increasedSkillMasteryXPPerHyden"
  | "increasedSkillMasteryXPPerSyllia";
/**
 * Data for the Township Skill
 */
declare type TownshipSkillData = TownshipSkillData1 & {
  /**
   * Defines new resources for the skill
   *
   * @minItems 1
   */
  resources?: [TownshipResourceData, ...TownshipResourceData1[]];
  /**
   * Defines new jobs for the skill
   *
   * @minItems 1
   */
  jobs?: [TownshipJobData, ...TownshipJobData1[]];
  /**
   * Defines new biomes for the skill
   *
   * @minItems 1
   */
  biomes?: [TownshipBiomeData, ...TownshipBiomeData1[]];
  /**
   * Defines new buildings for the skill
   *
   * @minItems 1
   */
  buildings?: [TownshipBuildingData, ...TownshipBuildingData1[]];
  /**
   * Defines new worships for the skill
   *
   * @minItems 1
   */
  worships?: [TownshipWorshipData, ...TownshipWorshipData1[]];
  /**
   * Defines new maps for the skill
   *
   * @minItems 1
   */
  maps?: [TownshipMapData, ...TownshipMapData1[]];
  /**
   * Defines the display order of buildings in the skill
   *
   * @minItems 1
   */
  buildingDisplayOrder?: [InsertOrder, ...InsertOrder[]];
  /**
   * Defines the display order of resources in the skill
   *
   * @minItems 1
   */
  resourceDisplayOrder?: [InsertOrder, ...InsertOrder[]];
  /**
   * Defines new tasks for the skill
   *
   * @minItems 1
   */
  tasks?: [TownshipTaskData, ...TownshipTaskData1[]];
  [k: string]: unknown;
};
declare type TownshipSkillData1 = BaseSkillData;
/**
 * Data for constructing a TownshipResource object
 */
declare type TownshipResourceData = TownshipResourceData1 & {
  /**
   * Display name of the resource
   */
  name: string;
  /**
   * URI of the resources image
   */
  media: string;
  /**
   * The type of the resource. Currency for GP. Raw for resources that don't require other resources to make. Product otherwise.
   */
  type: "Currency" | "Raw" | "Product";
  /**
   * Currently unused description of the resource
   */
  description: string;
  /**
   * TownshipResources required to produce this resource
   */
  requires: TownshipResourceQuantity[];
  /**
   * The amount of this resource the player starts with
   */
  startingAmount: number;
  /**
   * Optional. If this resource is required for population growth
   */
  requiredForPopGrowth?: boolean;
  /**
   * Stat penalties applied to the town if none of this resource is owned
   */
  statPenalties: TownshipStatPenaltyData[];
  /**
   * Penalties given to buildings if none of this resource is owned
   */
  buildingPenalties: TownshipBuildingPenaltyData[];
  /**
   * Optional. Defines a bonus applied to town health depending on the resource amount and rate
   */
  healthBonus?: TownshipHealthBonus;
  /**
   * Optional. If present, citizens under the maxAge property will not die if this and all other specified resource are owned
   */
  preventCitizenDeath?: {
    /**
     * The other resources that must be owned
     *
     * @minItems 1
     */
    resources: [TownshipResourceID, ...TownshipResourceID[]];
    /**
     * The maximum age at which this resource will prevent citizen death
     */
    maxAge: number;
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
declare type TownshipResourceData1 = IDData;
declare type TownshipResourceID =
  | "melvorF:GP"
  | "melvorF:Food"
  | "melvorF:Wood"
  | "melvorF:Stone"
  | "melvorF:Ore"
  | "melvorF:Coal"
  | "melvorF:Bar"
  | "melvorF:Herbs"
  | "melvorF:Rune_Essence"
  | "melvorF:Leather"
  | "melvorF:Potions"
  | "melvorF:Planks"
  | "melvorF:Clothing";
declare type TownshipBiomeID =
  | "melvorF:Grasslands"
  | "melvorF:Forest"
  | "melvorF:Desert"
  | "melvorF:Water"
  | "melvorF:Swamp"
  | "melvorF:Arid_Plains"
  | "melvorF:Mountains"
  | "melvorF:Valley"
  | "melvorF:Jungle"
  | "melvorF:Snowlands";
/**
 * Data for constructing a TownshipJob object
 */
declare type TownshipJobData = TownshipJobData1 & {
  /**
   * The display name of the job
   */
  name: string;
  /**
   * Optional. The ID of the resource that this job produces
   */
  produces?: TownshipResourceID;
  [k: string]: unknown;
};
declare type TownshipJobData1 = IDData;
/**
 * Data for constructing a TownshipBiome object
 */
declare type TownshipBiomeData = TownshipBiomeData1 & {
  /**
   * The display name of the biome
   */
  name: string;
  /**
   * Currently unused description of the biome
   */
  description: string;
  /**
   * Optional. Defines resource usage from buildings built in this biome
   */
  resourceUsage?: {
    /**
     * The id of the resource that is used
     */
    resourceID: TownshipResourceID;
    /**
     * The amount of the resource used per building each tick
     */
    amount: number;
    /**
     * The message shown that describes how much of the resource is used per tick
     */
    usageMessage: string;
    /**
     * The message shown to describe the penalties when none of the resource is owned
     */
    penaltyMessage: string;
    /**
     * The warning message shown when none of the reource is owned
     */
    noResourceMessage: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
declare type TownshipBiomeData1 = IDData;
/**
 * Data for constructing a TownshipBuilding object
 */
declare type TownshipBuildingData = TownshipBuildingData1 & {
  /**
   * The display name of the building
   */
  name: string;
  /**
   * Currently unused description of the building
   */
  description: string;
  /**
   * URI of the buildings image
   */
  media: string;
  /**
   * The tier of the building
   */
  tier: number;
  /**
   * The type of building. Used for categorization when sorting. 0: House, 1: Gathering, 2: Production, 3: Storage, 4: Education, 5: Other
   */
  type: "House" | "Gathering" | "Production" | "Storage" | "Education" | "Other";
  /**
   * Optional. The ID of the building this upgrades from
   */
  upgradesFrom?: TownshipBuildingID;
  /**
   * The township resource costs to build the building
   */
  cost: TownshipResourceQuantity[];
  /**
   * The stats that this building provides to the town
   */
  provides: TownshipBuildingProvidesData;
  /**
   * The IDs of Biomes that this building can be built in
   *
   * @minItems 1
   */
  biomes: [TownshipBiomeID, ...TownshipBiomeID[]];
  biomeModifiers: {
    /**
     * The ID of the biome
     */
    biomeID?: TownshipBiomeID;
    /**
     * The percent value of the modifier
     */
    value?: number;
    [k: string]: unknown;
  }[];
  /**
   * Optional. Modifiers provided to the player for each of this building built
   */
  modifiers?: PlayerModifierData1;
  [k: string]: unknown;
};
declare type TownshipBuildingData1 = IDData;
declare type TownshipJobID =
  | "melvorD:Unemployed"
  | "melvorF:Blacksmith"
  | "melvorF:Fisherman"
  | "melvorF:Woodcutter"
  | "melvorF:Stone_Miner"
  | "melvorF:Ore_Miner"
  | "melvorF:Coal_Miner"
  | "melvorF:Gatherer"
  | "melvorF:Rune_Essence_Miner"
  | "melvorF:Crafter"
  | "melvorF:Apothecarist"
  | "melvorF:Plank_Maker"
  | "melvorF:Tailor";
/**
 * Data for constructing a TownshipWorship object
 */
declare type TownshipWorshipData = TownshipWorshipData1 & {
  /**
   * Display name of the worship
   */
  name: string;
  description: string;
  /**
   * URI of the worships image
   */
  media: string;
  /**
   * Modifiers that are always provided by this worship
   */
  modifiers: PlayerModifierData1;
  /**
   * If this worship should be hidden from the player
   */
  isHidden: boolean;
  /**
   * Modifiers that are provided as each worship checkpoint is reached
   *
   * @minItems 5
   * @maxItems 5
   */
  checkpoints: [
    PlayerModifierData1,
    PlayerModifierData1,
    PlayerModifierData1,
    PlayerModifierData1,
    PlayerModifierData1
  ];
  /**
   * Requirements the player must meet before being able to use this worship
   */
  unlockRequirements: AnyRequirementData[];
  /**
   * The display name of the statue building when this worship is selected
   */
  statueName: string;
  /**
   * The URI of the statue buildings image when this worship is selected
   */
  statueMedia: string;
  [k: string]: unknown;
};
declare type TownshipWorshipData1 = IDData;
/**
 * Data for constructing a TownshipMap object
 */
declare type TownshipMapData = TownshipMapData1 & {
  /**
   * The display name of the map
   */
  name: string;
  /**
   * The number of each biome that are in the map
   *
   * @minItems 1
   */
  biomes: [
    {
      /**
       * The ID of the biome
       */
      biomeID: TownshipBiomeID;
      /**
       * The amount of the biome in the map
       */
      count: number;
      [k: string]: unknown;
    },
    ...{
      /**
       * The ID of the biome
       */
      biomeID: TownshipBiomeID;
      /**
       * The amount of the biome in the map
       */
      count: number;
      [k: string]: unknown;
    }[]
  ];
  [k: string]: unknown;
};
declare type TownshipMapData1 = IDData;
/**
 * Data for constructing a TownshipTask object
 */
declare type TownshipTaskData = TownshipTaskData1 & {
  /**
   * The display name of the task
   */
  name: string;
  /**
   * Optional. A description of the task
   */
  description?: string;
  /**
   * The category of the task. This is used to group tasks together
   */
  category: "Easy" | "Normal" | "Hard" | "VeryHard" | "Elite" | "TownshipTutorial";
  goals: TownshipTaskGoalsData;
  rewards: TownshipTaskRewardsData;
  /**
   * Requirements the player must meet before starting the taks
   */
  requirements: AnyRequirementData[];
  [k: string]: unknown;
};
declare type TownshipTaskData1 = IDData;
/**
 * Data for constructing a Page object
 */
declare type PageData = PageData1 & {
  /**
   * Optional. Specifies a custom name for the page to be used instead of the first skill name
   */
  customName?: string;
  /**
   * URI of the page's icon.
   */
  media: string;
  /**
   * The HTMLElement-id of the page's container in the DOM
   */
  containerID: string;
  /**
   * The CSS class that is applied to the header of the game. Used to determine its background colour
   */
  headerBgClass: string;
  /**
   * If the page has a corresponding game guide that can be shown by clicking its icon in the header
   */
  hasGameGuide: boolean;
  /**
   * If the page can be set as a default page on load in the settings
   */
  canBeDefault: boolean;
  /**
   * Optional. An action that is associated with the page.
   */
  action?: ActionID;
  /**
   * Optional. Skills that are associated with the page.
   *
   * @minItems 1
   */
  skills?: [SkillID, ...SkillID[]];
  /**
   * Optional. If present this page will generate an item in the sidebar to change to it
   */
  sidebarItem?: PageSideBarItemOptions;
  /**
   * Optional. If present this page will generate subitems in the sidebar to change to it
   *
   * @minItems 1
   */
  sidebarSubItems?: [PageSideBarSubItemOptions, ...PageSideBarSubItemOptions[]];
  /**
   * The sidebar category ID to place associated skills' sidebar item under
   */
  skillSidebarCategoryID?: string;
  [k: string]: unknown;
};
declare type PageData1 = IDData;
/**
 * Data for constructing a LoreBook object
 */
declare type LoreBookData = LoreBookData1 & {
  /**
   * The displayed title of the book
   */
  title: string;
  /**
   * URI of The displayed icon for the book
   */
  media: string;
  /**
   * Requirements the player must meet to read the book
   */
  unlockRequirements: AnyRequirementData[];
  [k: string]: unknown;
};
declare type LoreBookData1 = IDData;

/**
 * A game data package for Melvor Idle
 */
declare interface MelvorGameDataPackage {
  /**
   * Unique namespace for the game data. For Modded Data Packages, this is defined by the manifest.json and has no effect.
   */
  namespace?: string;
  data?: GameData;
  modifications?: GameDataModifications;
  [k: string]: unknown;
}
/**
 * Contains the data used to construct game objects
 */
declare interface GameData {
  /**
   * An array of Gamemodes defined by this data package
   *
   * @minItems 1
   */
  gamemodes?: [GamemodeData, ...GamemodeData1[]];
  /**
   * An array of ItemEffects defined by this data package.
   */
  itemEffects?: ItemEffectData[];
  /**
   * Items defined by this data package
   *
   * @minItems 1
   */
  items?: [AnyItemData, ...AnyItemData[]];
  /**
   * AttackStyles defined by this data package
   *
   * @minItems 1
   */
  attackStyles?: [AttackStyleData, ...AttackStyleData1[]];
  /**
   * StackingEffects defined by this data package
   *
   * @minItems 1
   */
  stackingEffects?: [StackingEffectData, ...StackingEffectData1[]];
  /**
   * SpecialAttacks defined by this data package
   *
   * @minItems 1
   */
  attacks?: [AttackData, ...AttackData1[]];
  /**
   * CombatPassives defined by this data package
   *
   * @minItems 1
   */
  combatPassives?: [CombatPassiveData, ...CombatPassiveData1[]];
  /**
   * Monsters defined by this data package
   *
   * @minItems 1
   */
  monsters?: [MonsterData, ...MonsterData1[]];
  /**
   * Combat Areas defined by this data package
   *
   * @minItems 1
   */
  combatAreas?: [CombatAreaData, ...CombatAreaData1[]];
  /**
   * Determines the display order of combat areas
   *
   * @minItems 1
   */
  combatAreaDisplayOrder?: [InsertOrder, ...InsertOrder[]];
  /**
   * Slayer Areas defined by this data package
   *
   * @minItems 1
   */
  slayerAreas?: [SlayerAreaData, ...SlayerAreaData1[]];
  /**
   * Determines the display order of slayer areas
   *
   * @minItems 1
   */
  slayerAreaDisplayOrder?: [InsertOrder, ...InsertOrder[]];
  /**
   * Dungeons defined by this data package
   *
   * @minItems 1
   */
  dungeons?: [DungeonData, ...DungeonData1[]];
  /**
   * Determines the display order of dungeons
   *
   * @minItems 1
   */
  dungeonDisplayOrder?: [InsertOrder, ...InsertOrder[]];
  /**
   * ActivePrayers defined by this data package
   *
   * @minItems 1
   */
  prayers?: [PrayerData, ...PrayerData1[]];
  /**
   * StandardSpells defined by this data package
   *
   * @minItems 1
   */
  standardSpells?: [StandardSpellData, ...StandardSpellData1[]];
  /**
   * CurseSpells defined by this data package
   *
   * @minItems 1
   */
  curseSpells?: [CurseSpellData, ...CurseSpellData1[]];
  /**
   * AuroraSpells defined by this data package
   *
   * @minItems 1
   */
  auroraSpells?: [AuroraSpellData, ...AuroraSpellData1[]];
  /**
   * AncientSpells defined by this data package
   *
   * @minItems 1
   */
  ancientSpells?: [AncientSpellData, ...AncientSpellData1[]];
  /**
   * ArchaicSpells defined by this data package
   *
   * @minItems 1
   */
  archaicSpells?: [ArchaicSpellData, ...ArchaicSpellData1[]];
  /**
   * Pets defined by this data package
   *
   * @minItems 1
   */
  pets?: [PetData, ...PetData1[]];
  /**
   * ShopCategories defined by this data package
   *
   * @minItems 1
   */
  shopCategories?: [ShopCategoryData, ...ShopCategoryData1[]];
  /**
   * Determines the display order of ShopCategories
   *
   * @minItems 1
   */
  shopCategoryOrder?: [InsertOrder, ...InsertOrder[]];
  /**
   * ShopPurchases defined by this data package
   *
   * @minItems 1
   */
  shopPurchases?: [ShopPurchaseData, ...ShopPurchaseData1[]];
  /**
   * Determines the display order of ShopPurchases
   *
   * @minItems 1
   */
  shopDisplayOrder?: [InsertOrder, ...InsertOrder[]];
  /**
   * ShopUpgradeChains defined by this data package
   *
   * @minItems 1
   */
  shopUpgradeChains?: [ShopUpgradeChainData, ...ShopUpgradeChainData1[]];
  /**
   * ItemUpgrades defined by this data package
   *
   * @minItems 1
   */
  itemUpgrades?: [ItemUpgradeData, ...ItemUpgradeData[]];
  /**
   * ItemSynergies defined by this data package
   *
   * @minItems 1
   */
  itemSynergies?: [ItemSynergyData, ...ItemSynergyData[]];
  golbinRaid?: GolbinRaidData;
  /**
   * SteamAchievements defined by this data package. Has no effect for modded data packages.
   *
   * @minItems 1
   */
  steamAchievements?: [SteamAchievementData, ...SteamAchievementData[]];
  /**
   * TutorialStages defined by this data package. Has no effect for modded data packages.
   *
   * @minItems 1
   */
  tutorialStages?: [TutorialStageData, ...TutorialStageData1[]];
  /**
   * Determines the order that tutorial stages must be completed in. Has no effect for modded data packages.
   *
   * @minItems 1
   */
  tutorialStageOrder?: [InsertOrder, ...InsertOrder[]];
  /**
   * Contains data that should be registered to skills. Supports custom skill data.
   *
   * @minItems 1
   */
  skillData?: [AnySkillData, ...AnySkillData[]];
  /**
   * Determines the drops in the standard gem table.
   *
   * @minItems 1
   */
  randomGems?: [DropTableData, ...DropTableData[]];
  /**
   * Determines the drops in the superior gem table.
   *
   * @minItems 1
   */
  randomSuperiorGems?: [DropTableData, ...DropTableData[]];
  /**
   * Determines the list of monsters the Into the Mist Dungeon should choose from.
   *
   * @minItems 1
   */
  itmMonsters?: [MonsterID, ...MonsterID[]];
  /**
   * Determines the list of monsters the Spider Lair Dungeons should choose from.
   *
   * @minItems 1
   */
  spiderLairMonsters?: [MonsterID, ...MonsterID[]];
  /**
   * Pages defined by this data package.
   *
   * @minItems 1
   */
  pages?: [PageData, ...PageData1[]];
  /**
   * Determines the default sort order for items in the bank.
   *
   * @minItems 1
   */
  bankSortOrder?: [InsertOrder, ...InsertOrder[]];
  /**
   * LoreBooks defined by this data package.
   *
   * @minItems 1
   */
  lore?: [LoreBookData, ...LoreBookData1[]];
  [k: string]: unknown;
}
/**
 * Data for constructing a NamespacedObject object
 */
declare interface IDData {
  /**
   * The local ID of the object
   */
  id: string;
  [k: string]: unknown;
}
declare interface AnyItemQuantity {
  /**
   * The ID of any Item
   */
  id: AnyItemID;
  /**
   * The quantity of the item
   */
  quantity: number;
  [k: string]: unknown;
}
declare interface CombatModifierBase {
  /**
   * +${value}% Accuracy Rating
   */
  increasedGlobalAccuracy?: number;
  /**
   * -${value}% Global Accuracy
   */
  decreasedGlobalAccuracy?: number;
  /**
   * +${value}% Melee Accuracy Rating
   */
  increasedMeleeAccuracyBonus?: number;
  /**
   * -${value}% Melee Accuracy Rating
   */
  decreasedMeleeAccuracyBonus?: number;
  /**
   * +${value}% Melee Max Hit
   */
  increasedMeleeMaxHit?: number;
  /**
   * -${value}% Melee Max Hit
   */
  decreasedMeleeMaxHit?: number;
  /**
   * +${value}% Melee Evasion
   */
  increasedMeleeEvasion?: number;
  /**
   * -${value}% Melee Evasion
   */
  decreasedMeleeEvasion?: number;
  /**
   * +${value}% Ranged Accuracy Rating
   */
  increasedRangedAccuracyBonus?: number;
  /**
   * -${value}% Ranged Accuracy Rating
   */
  decreasedRangedAccuracyBonus?: number;
  /**
   * +${value}% Ranged Max Hit
   */
  increasedRangedMaxHit?: number;
  /**
   * -${value}% Ranged Max Hit
   */
  decreasedRangedMaxHit?: number;
  /**
   * +${value}% Ranged Evasion
   */
  increasedRangedEvasion?: number;
  /**
   * -${value}% Ranged Evasion
   */
  decreasedRangedEvasion?: number;
  /**
   * +${value}% Magic Accuracy Rating
   */
  increasedMagicAccuracyBonus?: number;
  /**
   * -${value}% Magic Accuracy Rating
   */
  decreasedMagicAccuracyBonus?: number;
  /**
   * +${value}% Magic Max Hit
   */
  increasedMagicMaxHit?: number;
  /**
   * -${value}% Magic Max Hit
   */
  decreasedMagicMaxHit?: number;
  /**
   * +${value}% Magic Evasion
   */
  increasedMagicEvasion?: number;
  /**
   * -${value}% Magic Evasion
   */
  decreasedMagicEvasion?: number;
  /**
   * +${value} Max Hit
   */
  increasedMaxHitFlat?: number;
  /**
   * -${value} Max Hit
   */
  decreasedMaxHitFlat?: number;
  /**
   * +${value}% Max Hit
   */
  increasedMaxHitPercent?: number;
  /**
   * -${value}% Max Hit
   */
  decreasedMaxHitPercent?: number;
  /**
   * +${value}% Damage Reduction
   */
  increasedDamageReduction?: number;
  /**
   * -${value}% Damage Reduction
   */
  decreasedDamageReduction?: number;
  /**
   * +${value} Flat HP Regen
   */
  increasedHPRegenFlat?: number;
  /**
   * -${value} Flat HP Regen
   */
  decreasedHPRegenFlat?: number;
  /**
   * -${value}s Attack Interval
   */
  decreasedAttackInterval?: number;
  /**
   * +${value}s Attack Interval
   */
  increasedAttackInterval?: number;
  /**
   * -${value}% Attack Interval
   */
  decreasedAttackIntervalPercent?: number;
  /**
   * +${value}% Attack Interval
   */
  increasedAttackIntervalPercent?: number;
  /**
   * +${value}% Maximum Hitpoints
   */
  increasedMaxHitpoints?: number;
  /**
   * -${value}% Maximum Hitpoints
   */
  decreasedMaxHitpoints?: number;
  /**
   * +${value} Maximum Hitpoints
   */
  increasedFlatMaxHitpoints?: number;
  /**
   * -${value} Maximum Hitpoints
   */
  decreasedFlatMaxHitpoints?: number;
  /**
   * +${value}% Reflect Damage
   */
  increasedReflectDamage?: number;
  /**
   * -${value}% Reflect Damage
   */
  decreasedReflectDamage?: number;
  /**
   * +${value} Reflect Damage
   */
  increasedFlatReflectDamage?: number;
  /**
   * -${value} Reflect Damage
   */
  decreasedFlatReflectDamage?: number;
  /**
   * +0-${value} Reflect Damage
   */
  increasedRolledReflectDamage?: number;
  /**
   * -0-${value} Reflect Damage
   */
  decreasedRolledReflectDamage?: number;
  /**
   * +${value}% Lifesteal
   */
  increasedLifesteal?: number;
  /**
   * -${value}% Lifesteal
   */
  decreasedLifesteal?: number;
  /**
   * +${value}% Melee lifesteal
   */
  increasedMeleeLifesteal?: number;
  /**
   * +${value}% Ranged lifesteal
   */
  increasedRangedLifesteal?: number;
  /**
   * +${value}% Magic lifesteal
   */
  increasedMagicLifesteal?: number;
  /**
   * +${value}% Bleed lifesteal
   */
  increasedBleedLifesteal?: number;
  /**
   * +${value}% Burn lifesteal
   */
  increasedBurnLifesteal?: number;
  /**
   * +${value}% Poison lifesteal
   */
  increasedPoisonLifesteal?: number;
  /**
   * -${value}% Melee lifesteal
   */
  decreasedMeleeLifesteal?: number;
  /**
   * -${value}% Ranged lifesteal
   */
  decreasedRangedLifesteal?: number;
  /**
   * -${value}% Magic lifesteal
   */
  decreasedMagicLifesteal?: number;
  /**
   * -${value}% Bleed lifesteal
   */
  decreasedBleedLifesteal?: number;
  /**
   * -${value}% Burn lifesteal
   */
  decreasedBurnLifesteal?: number;
  /**
   * -${value}% Poison lifesteal
   */
  decreasedPoisonLifesteal?: number;
  /**
   * +${value}% Melee critical hit chance
   */
  increasedMeleeCritChance?: number;
  /**
   * -${value}% Melee critical hit chance
   */
  decreasedMeleeCritChance?: number;
  /**
   * +${value}% Ranged critical hit chance
   */
  increasedRangedCritChance?: number;
  /**
   * -${value}% Ranged critical hit chance
   */
  decreasedRangedCritChance?: number;
  /**
   * +${value}% Magic critical hit chance
   */
  increasedMagicCritChance?: number;
  /**
   * -${value}% Magic critical hit chance
   */
  decreasedMagicCritChance?: number;
  /**
   * +${value}% Hitpoint Regeneration
   */
  increasedHitpointRegeneration?: number;
  /**
   * -${value}% Hitpoint Regeneration
   */
  decreasedHitpointRegeneration?: number;
  /**
   * +${value}% of Maximum Hit added to Minimum Hit
   */
  increasedMinHitBasedOnMaxHit?: number;
  /**
   * -${value}% of Maximum Hit added to Minimum Hit
   */
  decreasedMinHitBasedOnMaxHit?: number;
  /**
   * Your Attacks now roll twice (Select highest chance)
   */
  increasedAttackRolls?: number;
  /**
   * -${value} rolls per Attack. Select highest chance
   */
  decreasedAttackRolls?: number;
  /**
   * +${value} Minimum Hit
   */
  increasedFlatMinHit?: number;
  /**
   * -${value} Minimum Hit
   */
  decreasedFlatMinHit?: number;
  /**
   * +${value}% more Damage taken
   */
  increasedDamageTaken?: number;
  /**
   * ${value}% less Damage taken
   */
  decreasedDamageTaken?: number;
  /**
   * +${value}% of remaining HP taken as damage on a successful attack (once per turn)
   */
  increasedConfusion?: number;
  /**
   * +${value}% of Max HP taken as damage on a successful attack (once per turn)
   */
  increasedDecay?: number;
  /**
   * +${value}% Global Evasion
   */
  increasedGlobalEvasion?: number;
  /**
   * -${value}% Global Evasion
   */
  decreasedGlobalEvasion?: number;
  /**
   * +${value} Min Air Spell Dmg
   */
  increasedMinAirSpellDmg?: number;
  /**
   * -${value} Min Air Spell Dmg
   */
  decreasedMinAirSpellDmg?: number;
  /**
   * +${value} Min Water Spell Dmg
   */
  increasedMinWaterSpellDmg?: number;
  /**
   * -${value} Min Water Spell Dmg
   */
  decreasedMinWaterSpellDmg?: number;
  /**
   * +${value} Min Earth Spell Dmg
   */
  increasedMinEarthSpellDmg?: number;
  /**
   * -${value} Min Earth Spell Dmg
   */
  decreasedMinEarthSpellDmg?: number;
  /**
   * +${value} Min Fire Spell Dmg
   */
  increasedMinFireSpellDmg?: number;
  /**
   * -${value} Min Fire Spell Dmg
   */
  decreasedMinFireSpellDmg?: number;
  /**
   * +${value} Max Air Spell Dmg
   */
  increasedMaxAirSpellDmg?: number;
  /**
   * -${value} Max Air Spell Dmg
   */
  decreasedMaxAirSpellDmg?: number;
  /**
   * +${value} Max Water Spell Dmg
   */
  increasedMaxWaterSpellDmg?: number;
  /**
   * -${value} Max Water Spell Dmg
   */
  decreasedMaxWaterSpellDmg?: number;
  /**
   * +${value} Max Earth Spell Dmg
   */
  increasedMaxEarthSpellDmg?: number;
  /**
   * -${value} Max Earth Spell Dmg
   */
  decreasedMaxEarthSpellDmg?: number;
  /**
   * +${value} Max Fire Spell Dmg
   */
  increasedMaxFireSpellDmg?: number;
  /**
   * -${value} Max Fire Spell Dmg
   */
  decreasedMaxFireSpellDmg?: number;
  /**
   * ${value}% chance to dodge Melee attacks
   */
  meleeProtection?: number;
  /**
   * ${value}% chance to dodge Ranged attacks
   */
  rangedProtection?: number;
  /**
   * ${value}% chance to dodge Magic attacks
   */
  magicProtection?: number;
  /**
   * Immune to curses
   */
  curseImmunity?: number;
  /**
   * ${value}% increased damage reduction
   */
  increasedDamageReductionPercent?: number;
  /**
   * ${value}% decreased damage reduction
   */
  decreasedDamageReductionPercent?: number;
  /**
   * +${value}% chance to ignore Stuns and Freezes
   */
  stunImmunity?: number;
  /**
   * Immune to Sleep
   */
  sleepImmunity?: number;
  /**
   * +${value}% chance to ignore burn
   */
  burnImmunity?: number;
  /**
   * +${value}% chance to ignore poison
   */
  poisonImmunity?: number;
  /**
   * +${value}% chance to ignore bleed
   */
  bleedImmunity?: number;
  /**
   * Immune to debuffs
   */
  debuffImmunity?: number;
  /**
   * +${value}% chance to ignore Freezes only
   */
  freezeImmunity?: number;
  /**
   * +${value}% chance to respawn with full hitpoints upon reaching 0 hitpoints
   */
  increasedRebirthChance?: number;
  /**
   * +${value}% Chance to apply burn when attacking
   */
  increasedChanceToApplyBurn?: number;
  /**
   * -${value}% Chance to apply burn when attacking
   */
  decreasedChanceToApplyBurn?: number;
  /**
   * -${value}% damage taken from dragonbreath
   */
  decreasedDragonBreathDamage?: number;
  /**
   * Melee attacks stun the target when they deal ${value}% of max hit
   */
  increasedMeleeStunThreshold?: number;
  /**
   * ${value}% of Current HP taken as damage per Attack
   */
  increasedFrostburn?: number;
  /**
   * +${value}% chance to apply affliction when attacking
   */
  increasedAfflictionChance?: number;
  /**
   * Immune to all attack types other than their own
   */
  otherStyleImmunity?: number;
  /**
   * Immune to Melee attacks
   */
  meleeImmunity?: number;
  /**
   * Immune to Ranged attacks
   */
  rangedImmunity?: number;
  /**
   * Immune to Magic attacks
   */
  magicImmunity?: number;
  /**
   * +${value}% chance to ignore Slow effects
   */
  slowImmunity?: number;
  /**
   * Heal ${value}% of current hitpoints every 2 turns
   */
  increasedEndOfTurnHealing2?: number;
  /**
   * Heal ${value}% of current hitpoints every 3 turns
   */
  increasedEndOfTurnHealing3?: number;
  /**
   * Heal ${value}% of current hitpoints every 5 turns
   */
  increasedEndOfTurnHealing5?: number;
  /**
   * +${value}% chance to apply poison when hitting with an attack
   */
  increasedChanceToApplyPoison?: number;
  /**
   * +${value}% chance to apply frostburn when attacking
   */
  increasedChanceToApplyFrostburn?: number;
  /**
   * +${value}% chance to stun when hitting with a Melee attack (once per turn)
   */
  increasedMeleeStunChance?: number;
  /**
   * +${value}% chance to apply Burn, Frostburn or Freeze when hitting with a Magic attack (once per turn)
   */
  increasedElementalEffectChance?: number;
  /**
   * +${value}% chance to ignore Frostburn
   */
  frostBurnImmunity?: number;
  /**
   * +${value}% chance to poison attackers when hit
   */
  increasedPoisonReflectChance?: number;
  /**
   * +${value}% chance to inflict a bleed that does 300% of the attack's damage to attackers when hit
   */
  increasedBleedReflectChance?: number;
  /**
   * +${value}% of Maximum Hit added to Minimum Hit when using Nature spells
   */
  increasedMinNatureSpellDamageBasedOnMaxHit?: number;
  /**
   * +${value} total damage to bleeds inflicted
   */
  increasedTotalBleedDamage?: number;
  /**
   * +${value}% chance to increase the length of stuns inflicted by 1 turn
   */
  increasedChanceToIncreaseStunDuration?: number;
  /**
   * +${value}% Accuracy Rating when using Surge spells
   */
  increasedSurgeSpellAccuracy?: number;
  /**
   * +${value}% Max Hit when using Surge spells
   */
  increasedSurgeSpellMaxHit?: number;
  /**
   * -${value}s Hitpoint Regeneration interval
   */
  decreasedRegenerationInterval?: number;
  /**
   * Inflict a slow that increases the target's attack interval by ${value}% when hitting with an attack
   */
  increasedOnHitSlowMagnitude?: number;
  /**
   * Evasion Ratings are multiplied by ${value} times current Hitpoints percent
   */
  globalEvasionHPScaling?: number;
  /**
   * All Bone drops from Combat are doubled
   */
  doubleBoneDrops?: number;
  /**
   * Gain +${value} Prayer Points for each successful Enemy hit on you
   */
  increasedPrayerPointsWhenHit?: number;
  /**
   * +${value} Flat Melee Accuracy Bonus per 0.1s Attack Interval. This is doubled if a 2-Handed Weapon is currently equipped
   */
  increasedFlatMeleeAccuracyBonusPerAttackInterval?: number;
  /**
   * -${value} Flat Melee Accuracy Bonus per 0.1s Attack Interval. This is doubled if a 2-Handed Weapon is currently equipped
   */
  decreasedFlatMeleeAccuracyBonusPerAttackInterval?: number;
  /**
   * +${value} Flat Melee Strength Bonus per 0.1s Attack Interval. This is doubled if a 2-Handed Weapon is currently equipped
   */
  increasedFlatMeleeStrengthBonusPerAttackInterval?: number;
  /**
   * -${value} Flat Melee Strength Bonus per 0.1s Attack Interval. This is doubled if a 2-Handed Weapon is currently equipped
   */
  decreasedFlatMeleeStrengthBonusPerAttackInterval?: number;
  /**
   * +${value} Flat Ranged Accuracy Bonus per 0.1s Attack Interval. This is doubled if a 2-Handed Weapon is currently equipped
   */
  increasedFlatRangedAccuracyBonusPerAttackInterval?: number;
  /**
   * -${value} Flat Ranged Accuracy Bonus per 0.1s Attack Interval. This is doubled if a 2-Handed Weapon is currently equipped
   */
  decreasedFlatRangedAccuracyBonusPerAttackInterval?: number;
  /**
   * +${value} Flat Ranged Strength Bonus per 0.1s Attack Interval. This is doubled if a 2-Handed Weapon is currently equipped
   */
  increasedFlatRangedStrengthBonusPerAttackInterval?: number;
  /**
   * -${value} Flat Ranged Strength Bonus per 0.1s Attack Interval. This is doubled if a 2-Handed Weapon is currently equipped
   */
  decreasedFlatRangedStrengthBonusPerAttackInterval?: number;
  /**
   * +${value} Flat Magic Accuracy Bonus per 0.1s Attack Interval. This is doubled if a 2-Handed Weapon is currently equipped
   */
  increasedFlatMagicAccuracyBonusPerAttackInterval?: number;
  /**
   * -${value} Flat Magic Accuracy Bonus per 0.1s Attack Interval. This is doubled if a 2-Handed Weapon is currently equipped
   */
  decreasedFlatMagicAccuracyBonusPerAttackInterval?: number;
  /**
   * +${value}% Damage Reduction when fighting a Melee Enemy
   */
  increasedDamageReductionAgainstMelee?: number;
  /**
   * -${value}% Damage Reduction when fighting a Melee Enemy
   */
  decreasedDamageReductionAgainstMelee?: number;
  /**
   * +${value}% Damage Reduction when fighting a Ranged Enemy
   */
  increasedDamageReductionAgainstRanged?: number;
  /**
   * -${value}% Damage Reduction when fighting a Ranged Enemy
   */
  decreasedDamageReductionAgainstRanged?: number;
  /**
   * +${value}% Damage Reduction when fighting a Magic Enemy
   */
  increasedDamageReductionAgainstMagic?: number;
  /**
   * -${value}% Damage Reduction when fighting a Magic Enemy
   */
  decreasedDamageReductionAgainstMagic?: number;
  /**
   * +${value}% Damage Reduction when using a Magic 2-Handed Weapon
   */
  increasedDamageReductionWithMagic2HWeapon?: number;
  /**
   * -${value}% Damage Reduction when using a Magic 2-Handed Weapon
   */
  decreasedDamageReductionWithMagic2HWeapon?: number;
  /**
   * +${value}% Max Hit for each 1% of Damage Reduction the Enemy has
   */
  increasedMaxHitPercentBasedOnEnemyDamageReduction?: number;
  /**
   * -${value}% Max Hit for each 1% of Damage Reduction the Enemy has
   */
  decreasedMaxHitPercentBasedOnEnemyDamageReduction?: number;
  /**
   * +${value}% Melee Max Hit. This value is tripled if fighting a Ranged Enemy
   */
  increasedMeleeMaxHitBonusAgainstRanged?: number;
  /**
   * -${value}% Melee Max Hit. This value is tripled if fighting a Ranged Enemy
   */
  decreasedMeleeMaxHitBonusAgainstRanged?: number;
  /**
   * +${value}% Ranged Max Hit. This value is tripled if fighting a Magic Enemy
   */
  increasedRangedMaxHitBonusAgainstMagic?: number;
  /**
   * -${value}% Ranged Max Hit. This value is tripled if fighting a Magic Enemy
   */
  decreasedRangedMaxHitBonusAgainstMagic?: number;
  /**
   * +${value}% Magic Max Hit. This value is tripled if fighting a Melee Enemy
   */
  increasedMagicMaxHitBonusAgainstMelee?: number;
  /**
   * -${value}% Magic Max Hit. This value is tripled if fighting a Melee Enemy
   */
  decreasedMagicMaxHitBonusAgainstMelee?: number;
  /**
   * Killing a Melee Slayer Task Enemy grants Slayer Coins equal to Enemy Combat Level
   */
  gainSlayerCoinsBasedOnEnemyCombatLevelMelee?: number;
  /**
   * Killing a Ranged Slayer Task Enemy grants Slayer Coins equal to Enemy Combat Level
   */
  gainSlayerCoinsBasedOnEnemyCombatLevelRanged?: number;
  /**
   * Killing a Magic Slayer Task Enemy grants Slayer Coins equal to Enemy Combat Level
   */
  gainSlayerCoinsBasedOnEnemyCombatLevelMagic?: number;
  /**
   * +${value}% Damage Reduction when fighting a Dungeon Boss
   */
  increasedDamageReductionAgainstBosses?: number;
  /**
   * -${value}% Damage Reduction when fighting a Dungeon Boss
   */
  decreasedDamageReductionAgainstBosses?: number;
  /**
   * +${value}% chance for a Slayer Task kill to count as 2 kills (Rewards Slayer Coins for 2nd kill, but not Slayer XP)
   */
  increasedChanceDoubleSlayerTaskKill?: number;
  /**
   * -${value}% chance for a Slayer Task kill to count as 2 kills
   */
  decreasedChanceDoubleSlayerTaskKill?: number;
  /**
   * +${value}% of all damage taken is added as Prayer Points (Rounded down)
   */
  increasedDamageTakenAddedAsPrayerPoints?: number;
  /**
   * -${value}% of all damage taken is added as Prayer Points (Rounded down)
   */
  decreasedDamageTakenAddedAsPrayerPoints?: number;
  /**
   * Accuracy Ratings are multiplied by ${value} times current Hitpoints percent
   */
  globalAccuracyHPScaling?: number;
  /**
   * Enemy Damage Reduction is decreased by flat ${value}%
   */
  decreasedEnemyDamageReduction?: number;
  /**
   * Enemy Damage Reduction is increased by flat ${value}%
   */
  increasedEnemyDamageReduction?: number;
  /**
   * +${value}% chance to apply a Stun for 1 Attack Turn when hitting with any attack (once per turn)
   */
  increasedGlobalStunChance?: number;
  /**
   * -${value}% chance to apply a Stun for 1 Attack Turn when hitting with any attack (once per turn)
   */
  decreasedGlobalStunChance?: number;
  /**
   * +${value}% chance to apply Sleep when hitting with any attack (once per turn)
   */
  increasedGlobalSleepChance?: number;
  /**
   * -${value}% chance to apply Sleep when hitting with any attack (once per turn)
   */
  decreasedGlobalSleepChance?: number;
  /**
   * +${value}% chance to apply a 15% Slow for 2 Attack Turns when hitting with any attack (once per turn)
   */
  increased15SlowStunChance2Turns?: number;
  /**
   * -${value}% chance to apply a 15% Slow for 2 Attack Turns when hitting with any attack (once per turn)
   */
  decreased15SlowStunChance2Turns?: number;
  /**
   * +${value}% of damage dealt gained as GP
   */
  increasedGPPerDamage?: number;
  /**
   * -${value}% of damage dealt gained as GP
   */
  decreasedGPPerDamage?: number;
  /**
   * +${value}% GP gained per Attack Turn equal to the Enemy Combat Level
   */
  increasedGPBasedOnEnemyCombatLevel?: number;
  /**
   * +${value}% of damage dealt by Summoning Familiars gained as GP
   */
  increasedGPBasedOnSummonDamage?: number;
  /**
   * -${value}% of damage dealt by Summoning Familiars gained as GP
   */
  decreasedGPBasedOnSummonDamage?: number;
  /**
   * +${value}% Damage Dealt gained as Slayer Coins
   */
  increasedSlayerCoinsPerDamage?: number;
  /**
   * -${value}% Damage Dealt gained as Slayer Coins
   */
  decreasedSlayerCoinsPerDamage?: number;
  /**
   * +${value}% chance for Sleep applied to the Enemy to last an extra 1 Attack Turn
   */
  increasedChanceToIncreaseSleepDuration?: number;
  /**
   * -${value}% chance for Sleep applied to the Enemy to last an extra 1 Attack Turn
   */
  decreasedChanceToIncreaseSleepDuration?: number;
  /**
   * +${value}% chance to avoid being Stunned
   */
  increasedChanceToAvoidStun?: number;
  /**
   * -${value}% chance to avoid being Stunned
   */
  decreasedChanceToAvoidStun?: number;
  /**
   * +${value}% chance to avoid Sleep
   */
  increasedChanceToAvoidSleep?: number;
  /**
   * -${value}% chance to avoid Sleep
   */
  decreasedChanceToAvoidSleep?: number;
  /**
   * When a stun is applied to you, heal for +${value}% of your Max HP
   */
  increasedHealWhenStunned?: number;
  /**
   * When a stun is applied to you, heal for -${value}% of your Max HP
   */
  decreasedHealWhenStunned?: number;
  /**
   * When Sleep is applied to you, heal for +${value}% of your Max HP
   */
  increasedHealWhenSleep?: number;
  /**
   * When Sleep is applied to you, heal for -${value}% of your Max HP
   */
  decreasedHealWhenSleep?: number;
  /**
   * If target is poisoned, +${value}% chance to apply deadly poison when hitting with an attack
   */
  increasedChanceToApplyDeadlyPoisonWhenPoisoned?: number;
  /**
   * If target is poisoned, -${value}% chance to apply deadly poison when hitting with an attack
   */
  decreasedChanceToApplyDeadlyPoisonWhenPoisoned?: number;
  /**
   * +${value}% of Current HP taken as damage per Attack
   */
  increasedDamageTakenPerAttack?: number;
  /**
   * -${value}% of Current HP taken as damage per Attack
   */
  decreasedDamageTakenPerAttack?: number;
  /**
   * +${value}% damage taken when asleep
   */
  increasedDamageTakenWhenAsleep?: number;
  /**
   * -${value}% damage taken when asleep
   */
  decreasedDamageTakenWhenAsleep?: number;
  /**
   * +${value}% damage taken when stunned
   */
  increasedDamageTakenWhenStunned?: number;
  /**
   * -${value}% damage taken when stunned
   */
  decreasedDamageTakenWhenStunned?: number;
  /**
   * Reduce Player damage reduction by ${value}%
   */
  decreasedPlayerDamageReduction?: number;
  /**
   * +${value}% damage dealt if target is poisoned
   */
  increasedDamageDealtIfPoisoned?: number;
  /**
   * -${value}% damage dealt if target is poisoned
   */
  decreasedDamageDealtIfPoisoned?: number;
  /**
   * +${value} Flat Melee Maximum Hit
   */
  increasedMeleeMaxHitFlat?: number;
  /**
   * -${value} Flat Melee Maximum Hit
   */
  decreasedMeleeMaxHitFlat?: number;
  /**
   * +${value} Flat Ranged Maximum Hit
   */
  increasedRangedMaxHitFlat?: number;
  /**
   * -${value} Flat Ranged Maximum Hit
   */
  decreasedRangedMaxHitFlat?: number;
  /**
   * +${value} Flat Magic Maximum Hit
   */
  increasedMagicMaxHitFlat?: number;
  /**
   * -${value} Flat Magic Maximum Hit
   */
  decreasedMagicMaxHitFlat?: number;
  /**
   * +${value}% chance to reduce Target Damage Reduction by 1% per successful hit. Stacks up to 20 times
   */
  increasedChanceToApplyShock?: number;
  /**
   * Target gains +3% Damage Reduction for every successful hit by the Attacker (Stacks up to 10 times)
   */
  increasedAbsorbingSkin?: number;
  /**
   * For each Target Attack Turn: 50% chance for the Target to apply -50% Attack Interval to itself for 2 turns
   */
  increasedDuality?: number;
  /**
   * +${value}% to apply Decay Curse to the Target per hit
   */
  increasedChanceToApplyDecayCurse?: number;
  /**
   * When Target is hit, Attacker gains a stack of Rage: +2% Max Hit and -2% Attack Interval (Stacks up to 10 times)
   */
  increasedRage?: number;
  /**
   * +${value}% Lifesteal if target is Cursed
   */
  increasedCurseLifesteal?: number;
  /**
   * Apply a random Curse to the Target on spawn or revive
   */
  applyRandomCurseOnSpawn?: number;
  /**
   * +${value}% chance to apply Dark Blade Effect (+1% Max Hit) to the Attacker per successful hit (Stacks up to 30 times)
   */
  increasedChanceDarkBlade?: number;
  /**
   * +${value}% Max Hit for each 1% of Damage Reduction
   */
  increasedMaxHitPercentBasedOnDamageReduction?: number;
  /**
   * -${value}% Max Hit for each 1% of Damage Reduction
   */
  decreasedMaxHitPercentBasedOnDamageReduction?: number;
  /**
   * Damage Reduction is halved (Floored)
   */
  halveDamageReduction?: number;
  /**
   * Increased Lifesteal based on +${value}% * Current HP Regen Effectiveness (Eg. 5% * 300 = +15% Lifesteal)
   */
  increasedLifestealBasedOnHPRegenEffectiveness?: number;
  /**
   * Passive Hitpoint Regeneration is disabled
   */
  disableHPRegeneration?: number;
  /**
   * +${value} minimum Spell damage when using the Meteor Shower Archaic Spell
   */
  increasedMinMeteorShowerSpellDamage?: number;
  /**
   * Gains up to +${value}% Global Evasion Rating every 2 turns (Lasts 2 turns)
   */
  increasedEndOfTurnEvasion2?: number;
  /**
   * When a Stun is applied to the Target, -10% Global Evasion Rating for the remainder of the fight (Stacks up to 3 times)
   */
  decreaseEnemyEvasionOnStun?: number;
  /**
   * When a Sleep is applied to the Target, -10% Global Evasion Rating for the remainder of the fight (Stacks up to 3 times)
   */
  decreaseEnemyEvasionOnSleep?: number;
  /**
   * -${value}% Global Evasion Rating for every 2% base Damage Reduction
   */
  decreasedEvasionBasedOnDR?: number;
  /**
   * Heal for +${value}% of the Target's base Damage Reduction on a successful attack (once per turn)
   */
  healOnHitBasedOnTargetDR?: number;
  /**
   * Doubles the Attacker Lifesteal percent
   */
  doubleLifesteal?: number;
  /**
   * Burns to the Target deal +${value}% Max HP as extra damage
   */
  increasedMaxHPBurnDamage?: number;
  /**
   * +${value}% chance to apply Deadly Poison to the Target
   */
  increasedChanceToApplyDeadlyPoison?: number;
  /**
   * Disables all sources of Lifesteal
   */
  disableLifesteal?: number;
  /**
   * Gain Slayer Coins equal to ${value}% of the Target Damage Reduction
   */
  increasedSlayerCoinsBasedOnTargetDR?: number;
  /**
   * Gain Slayer Coins euqal to +${value}% of Poison damage dealt to Target
   */
  increasedSlayerCoinsPerPoisonDamage?: number;
  /**
   * +${value}% chance to avoid Curses
   */
  increasedChanceToAvoidCurses?: number;
  /**
   * Apply Madness Curse to the Target on spawn or revive
   */
  applyMadnessCurseOnSpawn?: number;
  /**
   * Apply Torment Curse to the Target on spawn or revive
   */
  applyTormentCurseOnSpawn?: number;
  /**
   * Apply Despair Curse to the Target on spawn or revive
   */
  applyDespairCurseOnSpawn?: number;
  /**
   * +${value} Minimum Damage for Archaic Spells that use Poison Runes
   */
  increasedMinPoisonArchaicDmg?: number;
  /**
   * +${value} Minimum Damage for Archaic Spells that use Infernal Runes
   */
  increasedMinInfernalArchaicDmg?: number;
  /**
   * +${value} Minimum Damage for Archaic Spells that use Lightning Runes
   */
  increasedMinLightningArchaicDmg?: number;
  /**
   * While Target is Bleeding, reduce their Damage Reduction by -${value}%
   */
  reducedTargetDamageRedcutionIfBleeding?: number;
  /**
   * When Target is hit, Attacker gains a stack of Assassin: +30% Global Accuracy (Stacks up to 5 times and resets after 5 Attack Turns)
   */
  increasedAssassin?: number;
  /**
   * +10% Agility Mastery XP. -100% GP from Agility.
   */
  summoningSynergy_Devil_Eagle?: number;
  /**
   * For every Enemy Attack Turn, the Enemy gains -2% Attack Interval, +2% Maximum Hit (Stacks 25 times)
   */
  growingMadnessPassive?: number;
  /**
   * For every Enemy Attack Turn, the Enemy gains -2% Attack Interval, +2% Maximum Hit, +2% Global Accuracy (Stacks 25 times)
   */
  momentInTimePassive?: number;
  /**
   * For every Enemy Attack Turn, Enemy gains -2% Attack Interval, +2% Maximum Hit, +2% Global Accuracy, +2% Global Evasion Rating (Stacks 25 times)
   */
  reignOverTimePassive?: number;
  /**
   * When hit, +${value}% chance to apply Sleep to the Target for 1 turn
   */
  increasedChanceToApplySleepToTargetWhenHit?: number;
  /**
   * When hit, +{value}% chance to gain a stack of Rage: +2% Max Hit and -2% Attack Interval (Stacks up to 10 times)
   */
  increasedPlayerRage?: number;
  /**
   * When hit, gain a stack of Leviathan: +5% Reflect Damage and +1% Damage Reduction (Stacks up to 5 times)
   */
  increasedLeviathan?: number;
  shadowCloak?: number;
  /**
   * +${value}% Accuracy Rating when using Archaic Spells that use Poison Runes
   */
  increasedPoisonSpellAccuracy?: number;
  /**
   * +${value}% Accuracy Rating when using Archaic Spells that use Infernal Runes
   */
  increasedInfernalSpellAccuracy?: number;
  /**
   * +${value}% Accuracy Rating when using Archaic Spells that use Lightning Runes
   */
  increasedLightningSpellAccuracy?: number;
  /**
   * -${value}% Damage taken from Burns
   */
  decreasedBurnDOTDamage?: number;
  /**
   * +${value}% Damage taken from Burns
   */
  increasedBurnDOTDamage?: number;
  /**
   * -${value}% Damage taken from Bleeds
   */
  decreasedBleedDOTDamage?: number;
  /**
   * +${value}% Damage taken from Bleeds
   */
  increasedBleedDOTDamage?: number;
  /**
   * +${value}% Damage taken from Poison
   */
  increasedPoisonDOTDamage?: number;
  /**
   * -${value}% Damage taken from Poison
   */
  decreasedPoisonDOTDamage?: number;
  /**
   * +${value}% Damage taken from Deadly Poison
   */
  increasedDeadlyPoisonDOTDamage?: number;
  /**
   * -${value}% Damage taken from Deadly Poison
   */
  decreasedDeadlyPoisonDOTDamage?: number;
  /**
   * +${value}% chance to inflict a Slow that increases the target's attack interval by 30% for 5 target turns when hitting with an attack
   */
  increased30Slow5TurnsChance?: number;
  /**
   * Heal ${value}% of max hitpoints every 2 turns
   */
  increasedEndOfTurnMaxHealing2?: number;
  /**
   * +${value}% Global Evasion against Melee targets
   */
  increasedEvasionAgainstMelee?: number;
  /**
   * +${value}% Global Evasion against Ranged targets
   */
  increasedEvasionAgainstRanged?: number;
  /**
   * +${value}% Global Evasion against Magic targets
   */
  increasedEvasionAgainstMagic?: number;
  [k: string]: unknown;
}
/**
 * Defines a SlowEffect object. Impacted by modifiers and conditions that specify Slow.
 */
declare interface SlowEffectData {
  effectType: "Slow";
  /**
   * Percentage value that the effect should increase attack interval by
   */
  magnitude: number;
  /**
   * Number of target character turns the effect should last for
   */
  turns: number;
  [k: string]: unknown;
}
/**
 * Defines a Burn DOT Effect, with the standard damage and duration
 */
declare interface BurnEffectData {
  effectType: "Burn";
  chance: EffectChance;
  [k: string]: unknown;
}
/**
 * Defines a Poison DOT Effect, with the standard damage and duration
 */
declare interface PoisonEffectData {
  effectType: "Poison";
  chance: EffectChance;
  [k: string]: unknown;
}
/**
 * Defines the standard Frostburn effect. Impacted by modifiers and conditions that specify Frostburn
 */
declare interface FrostBurnEffectData {
  effectType: "Frostburn";
  [k: string]: unknown;
}
declare interface AttackStackingEffectData {
  effectType: "Stacking";
  /**
   * The ID of the StackingEffect object this effect represents.
   */
  id: StackingEffectID;
  [k: string]: unknown;
}
/**
 * Defines the standard Affliction effect. Impacted by modifiers and conditions that specify Affliction
 */
declare interface AfflictionEffectData {
  effectType: "Affliction";
  [k: string]: unknown;
}
/**
 * Defines a custom modifier effect.
 */
declare interface ModifierEffectData {
  type: "Modifier";
  /**
   * Modifiers that are applied to the target character. Values are multiplied by the number of stacks active
   */
  modifiers: CombatModifierData;
  /**
   * The maximum number of stacks of this effect that can be applied at once
   */
  maxStacks: number;
  /**
   * The number of stacks of this effect that are added per proc
   */
  stacksToAdd: number;
  /**
   * The character that this effect should be applied to.
   */
  character: CharacterType;
  /**
   * The number of turns the effect lasts for. 0 specifies that it only lasts for the duration of the Special Attack. 'Infinity' specifies that it lasts until the end of the fight.
   */
  turns: number | "Infinity";
  /**
   * The character that the turn timer counts down on
   */
  countsOn: CharacterType;
  /**
   * The icon that is displayed for the effect
   */
  media: string;
  [k: string]: unknown;
}
/**
 * Defines a custom sleep effect.
 */
declare interface SleepEffect {
  type: "Sleep";
  /**
   * The number of turns the target should Sleep for
   */
  turns: number;
  chance: EffectChance;
  /**
   * Optional. If present, this effect will only be applied when the target's hitpoint percent is less than or equal to this value
   */
  hitpointThreshold?: number;
  [k: string]: unknown;
}
/**
 * Defines a custom stun effect.
 */
declare interface StunEffect {
  type: "Stun";
  /**
   * The number of turns the target should be Stunned for
   */
  turns: number;
  chance: EffectChance;
  /**
   * Determines if the effect is classified as Stun or Freeze
   */
  flavour: StunFlavour;
  [k: string]: unknown;
}
/**
 * Defines a custom DOT effect. DOT effects apply damage over time, or healing over time.
 */
declare interface DOTEffect {
  type: "DOT";
  /**
   * The type of DOT that should be applied.
   */
  subtype: DOTType;
  /**
   * The number of times the DOT should deal damage
   */
  procs: number;
  /**
   * Array of Damage, that is summed to compute the total DOT damage
   *
   * @minItems 1
   */
  damage: [Damage, ...Damage[]];
  /**
   * The interval between DOT procs in [ms]
   */
  interval: number;
  chance: EffectChance;
  [k: string]: unknown;
}
declare interface BaseDamage {
  /**
   * The character to use to determine the damage amount
   */
  character: CharacterType;
  /**
   * The method to compute the maximum damage dealt
   */
  maxRoll: RollType;
  /**
   * The magnitude of the damage. Effect depends on the value of maxRoll
   */
  maxPercent: number;
  /**
   * Optional. If present on a Mult-hit Special attack, the damage will only be dealt on this hit of the attack
   */
  attackCount?: number;
  [k: string]: unknown;
}
/**
 * Defines a custom reflexive effect. Reflexive effects increase in stack each time the target character is hit.
 */
declare interface ReflexiveEffectData {
  type: "Reflexive";
  /**
   * Modifiers that are applied to the character that has this effect. Multiplied by the number of stacks the effect has.
   */
  modifiers: CombatModifierData;
  /**
   * The maximum number of stacks this effect can reach
   */
  maxStacks: number;
  /**
   * The icon that is displayed for the effect
   */
  media: string;
  /**
   * The number of turns that this effect lasts. 'Infinity' indicates the effect lasts until the end of the fight. 0 indicates it only lasts the duration of the attack.
   */
  turns: number | "Infinity";
  /**
   * The display name of the effect
   */
  name: string;
  [k: string]: unknown;
}
/**
 * Defines a custom compound effect. A meta-effect, randomly applys one of the subsequent effects in the effect array.
 */
declare interface CompoundEffect {
  type: "Compound";
  chance: EffectChance;
  /**
   * The number of subsequent effects in the effect array to randomly select from.
   */
  numEffects: number;
  [k: string]: unknown;
}
/**
 * Defines a custom combo effect. Combo effects gain stacks each time the attacker succesfully hits thier target. All stacks are removed on a missed attack.
 */
declare interface ComboEffect {
  type: "Combo";
  /**
   * The maximum number of stacks the effect can have
   */
  maxStacks: number;
  /**
   * The modifiers that are applied to the target. Values are multiplied by the number of stacks of the effect
   */
  modifiers: CombatModifierData;
  /**
   * The icon that is displayed for the effect
   */
  media: string;
  [k: string]: unknown;
}
declare interface CurseEffectData {
  effectType: "Curse";
  /**
   * The ID of the Curse the effect should apply
   */
  curse: CurseID;
  /**
   * Optional. The percentage chance that the effect is applied. Defaults to 100%
   */
  chance?: number;
  /**
   * Optional. If set to true, the effect will select from all registered Curse spells instead of the specified value. Defaults to false.
   */
  isRandom?: boolean;
  [k: string]: unknown;
}
/**
 * Defines a Deadly Poison DOT Effect, with the standard damage and duration
 */
declare interface DeadlyPoisonEffectData {
  effectType: "DeadlyPoison";
  chance: EffectChance;
  [k: string]: unknown;
}
declare interface SkillLevelRequirementData {
  type: "SkillLevel";
  /**
   * The ID of the Skill that must have a level greater than or equal to level
   */
  skillID: SkillID;
  /**
   * The minimum level the Skill must have
   */
  level: number;
  [k: string]: unknown;
}
declare interface AllSkillLevelRequirementData {
  type: "AllSkillLevels";
  /**
   * The minimum level that all Skills must have
   */
  level: number;
  /**
   * Optional. If present, the skill IDs in the array will not be included in the requirement
   *
   * @minItems 1
   */
  exceptions?: [SkillID, ...SkillID[]];
  [k: string]: unknown;
}
declare interface DungeonRequirementData {
  type: "DungeonCompletion";
  /**
   * The ID of the Dungeon that must be completed
   */
  dungeonID: DungeonID;
  /**
   * The number of times the dungeon must be completed
   */
  count: number;
  [k: string]: unknown;
}
declare interface CompletionRequirementData {
  type: "Completion";
  /**
   * The percent total completion the player must have
   */
  percent: number;
  /**
   * The data namespace to check completion in. Accepts the special values of melvorBaseGame and melvorTrue for Base Game (demo + full) and True (all expacs + mods)
   */
  namespace: Namespace;
  [k: string]: unknown;
}
declare interface ShopPurchaseRequirementData {
  type: "ShopPurchase";
  /**
   * The ID of the shop purchase that must be bought
   */
  purchaseID: ShopPurchaseID;
  /**
   * The number of times the purchase must be bought
   */
  count: number;
  [k: string]: unknown;
}
declare interface SlayerItemRequirementData {
  type: "SlayerItem";
  /**
   * The ID of the EquipmentItem that must be equipped
   */
  itemID: EquipmentItemID;
  [k: string]: unknown;
}
declare interface SlayerTaskRequirement {
  type: "SlayerTask";
  /**
   * The minimum tier of slayer task that must be completed
   */
  tier: SlayerTier;
  /**
   * The number of Slayer Tasks of the tier or higher that must be completed
   */
  count: number;
  [k: string]: unknown;
}
declare interface ItemFoundRequirementData {
  type: "ItemFound";
  /**
   * The ID of the item that must be found at least once
   */
  itemID: AnyItemID;
  [k: string]: unknown;
}
declare interface MonsterKilledRequirementData {
  type: "MonsterKilled";
  /**
   * The ID of the monster that must be killed
   */
  monsterID: MonsterID;
  /**
   * The number of times the monster must be killed
   */
  count: number;
  [k: string]: unknown;
}
declare interface TownshipTaskCompletionRequirement {
  type: "TownshipTask";
  /**
   * The number of Township tasks that must be completed
   */
  count: number;
  [k: string]: unknown;
}
declare interface TownshipBuildingRequirementData {
  type: "TownshipBuilding";
  /**
   * The ID of the building that must be actively built
   */
  buildingID: TownshipBuildingID;
  /**
   * The number of buildings that must be actively built
   */
  count: number;
  [k: string]: unknown;
}
declare interface EquipStatPair {
  /**
   * The equipment stat that is provided
   */
  key: EquipStatKey;
  /**
   * The value of the equipment stat provided
   */
  value: number;
  [k: string]: unknown;
}
declare interface ConditionalModifierData {
  /**
   * The condition that must be matched for the modifiers provided to be active
   */
  condition: AnyConditionData;
  /**
   * Modifiers provided to the player if the condition is met
   */
  modifiers?: PlayerModifierData1;
  /**
   * Modifiers provided to the enemy if the condition is met
   */
  enemyModifiers?: CombatModifierData;
  [k: string]: unknown;
}
declare interface ValueCondition {
  /**
   * The value to compare with
   */
  value: number;
  /**
   * The comparison operator to use
   */
  operator: Comparison;
  [k: string]: unknown;
}
declare interface BooleanCondition {
  /**
   * If the condition should be inverted. e.g. !condition
   */
  inverted: boolean;
  [k: string]: unknown;
}
/**
 * Requires that all of the conditions be met
 */
declare interface EveryConditionData {
  type: "Every";
  /**
   * Array of conditions that must all be met
   *
   * @minItems 1
   */
  conditions: [AnyConditionData, ...AnyConditionData[]];
  [k: string]: unknown;
}
/**
 * Requires that any of the conditions are met
 */
declare interface SomeConditionData {
  type: "Some";
  /**
   * Array of conditions that at least one must be met
   *
   * @minItems 1
   */
  conditions: [AnyConditionData, ...AnyConditionData[]];
  [k: string]: unknown;
}
/**
 * Compares the Player's base equipment stat with the Enemies
 */
declare interface EquipStatCompareCondition {
  type: "EquipStatCompare";
  /**
   * The equipment stat to compare
   */
  statKey: EquipStatKey;
  /**
   * The comparison operator to use
   */
  operator: Comparison;
  [k: string]: unknown;
}
declare interface SkillActionEventMatcherOptions {
  /**
   * Optional. If present, the skill having a potion active must match
   */
  isPotionActive?: boolean;
  /**
   * Optional. If present, the skill action being succesful must match
   */
  succesful?: boolean;
  /**
   * Optional. If present, the ID of the active potion for the skill must match an element of the array
   *
   * @minItems 1
   */
  activePotionIDs?: [PotionItemID, ...PotionItemID[]];
  [k: string]: unknown;
}
/**
 * Matches when a Firemaking bonfire is lit
 */
declare interface BonfireLitEventMatcherOptions {
  type: "BonfireLit";
  /**
   * Optional. If present, the bonfire lit must have an ID that matches one element of the array
   *
   * @minItems 1
   */
  logIDs?: [FiremakingActionID, ...FiremakingActionID[]];
  [k: string]: unknown;
}
/**
 * Matches when a Farming Plant action occurs
 */
declare interface FarmingPlantActionEventMatcherOptions {
  type: "FarmingPlantAction";
  /**
   * Optional. If present, the action must have an ID that matches one element of the array
   *
   * @minItems 1
   */
  actionIDs?: [FarmingActionID, ...FarmingActionID[]];
  /**
   * Optional. If present, the category of the farming action must have an ID that matches one element of the array
   *
   * @minItems 1
   */
  categoryIDs?: [FarmingCategoryID, ...FarmingCategoryID[]];
  [k: string]: unknown;
}
/**
 * Matches when a Monster drops an item in combat
 */
declare interface MonsterDropEventMatcherOptions {
  type: "MonsterDrop";
  /**
   * Optional. If present, the original item dropped being a herb seed must match
   */
  herbSeed?: boolean;
  [k: string]: unknown;
}
/**
 * Matches when a Player Attack occurs
 */
declare interface PlayerAttackEventMatcherOptions {
  type: "PlayerAttack";
  /**
   * Optional. If present, the attack type of the player must match one of the array elements
   *
   * @minItems 1
   */
  attackTypes?: [AttackType, ...AttackType[]];
  [k: string]: unknown;
}
/**
 * Matches when a Enemy Attack occurs
 */
declare interface EnemyAttackEventMatcherOptions {
  type: "EnemyAttack";
  /**
   * Optional. If present, the attack type of the enemy must match one of the array elements
   *
   * @minItems 1
   */
  attackTypes?: [AttackType, ...AttackType[]];
  [k: string]: unknown;
}
/**
 * Matches when the player eats a food item
 */
declare interface FoodEatenEventMatcherOptions {
  type: "FoodEaten";
  [k: string]: unknown;
}
/**
 * Matches when the player uses prayer points
 */
declare interface PrayerPointConsumptionEventMatcherOptions {
  type: "PrayerPointConsumption";
  [k: string]: unknown;
}
/**
 * Matches when the player regenerated hitpoints
 */
declare interface PlayerHitpointsRegenerationEventMatcherOptions {
  type: "PlayerHitpointRegeneration";
  [k: string]: unknown;
}
/**
 * Matches when the player's summons make an attack
 */
declare interface PlayerSummonAttackEventMatcherOptions {
  type: "PlayerSummonAttack";
  [k: string]: unknown;
}
/**
 * Matches when the player uses runes to cast a spell
 */
declare interface RuneConsumptionEventMatcherOptions {
  type: "RuneConsumption";
  [k: string]: unknown;
}
/**
 * Matches when the player uses a potion item
 */
declare interface PotionUsedEventMatcherOptions {
  type: "PotionUsed";
  [k: string]: unknown;
}
/**
 * Matches when the player uses a potion charge
 */
declare interface PotionChargeUsedEventMatcherOptions {
  type: "PotionChargeUsed";
  [k: string]: unknown;
}
/**
 * Matches when the player kills a monster
 */
declare interface MonsterKilledEventMatcherOptions {
  type: "MonsterKilled";
  /**
   * Optional. If present, the ID of the monster killed must match a member of the array
   *
   * @minItems 1
   */
  monsterIDs?: [MonsterID, ...MonsterID[]];
  /**
   * Optional. If present, the monster being killed with the specified combat style must match
   */
  killedWithType?: AttackType;
  [k: string]: unknown;
}
/**
 * Matches when the player equips an item
 */
declare interface ItemEquippedEventMatcherOptions {
  type: "ItemEquipped";
  /**
   * Optional. If present, the ID of the item equipped must match a member of the array
   *
   * @minItems 1
   */
  itemIDs?: [EquipmentItemID, ...EquipmentItemID[]];
  [k: string]: unknown;
}
/**
 * Matches when the player equips a food item
 */
declare interface FoodEquippedEventMatcherOptions {
  type: "FoodEquipped";
  /**
   * Optional. If present, the ID of the food item equipped must match a member of the array
   *
   * @minItems 1
   */
  itemIDs?: [FoodItemID, ...FoodItemID[]];
  [k: string]: unknown;
}
/**
 * Matches when the player purchases an item from the shop
 */
declare interface ShopPurchaseMadeEventMatcherOptions {
  type: "ShopPurchaseMade";
  /**
   * Optional. If present, the ID of the ShopPurchase must match a member of the array
   *
   * @minItems 1
   */
  purchaseIDs?: [ShopPurchaseID, ...ShopPurchaseID[]];
  [k: string]: unknown;
}
/**
 * Matches when the player uses a Summoning tablet
 */
declare interface SummonTabletUsedEventMatcherOptions {
  type: "SummonTabletUsed";
  /**
   * Optional. If present, the ID of the Summoning tablet used must match a member of the array
   *
   * @minItems 1
   */
  tabletIDs?: [EquipmentItemID, ...EquipmentItemID[]];
  [k: string]: unknown;
}
declare interface LangStringData {
  /**
   * The category of the translation to get
   */
  category?: LanguageCategory;
  /**
   * The id of the translation in the given category
   */
  id?: string;
  [k: string]: unknown;
}
declare interface DropTableData {
  /**
   * The ID of the item that can drop
   */
  itemID: AnyItemID;
  /**
   * The minimum quantity of the item that is dropped
   */
  minQuantity: number;
  /**
   * The maximum quantity of the item that is dropped
   */
  maxQuantity: number;
  /**
   * The weight of the drop. Higher values respresent more common items
   */
  weight: number;
  [k: string]: unknown;
}
/**
 * Convenience data type for defining damage based on normal attack damage
 */
declare interface NormalDamageData {
  damageType: "Normal";
  /**
   * Percent of normal damage to scale by
   */
  amplitude: number;
  /**
   * Optional. If present, damage only occurs on the specified proc of the special attack
   */
  attackCount?: number;
  [k: string]: unknown;
}
/**
 * Inserts objects at the start of the order
 */
declare interface InsertStart {
  insertAt: "Start";
  ids: ObjectsToInsert;
  [k: string]: unknown;
}
/**
 * Inserts objects at the end of the order
 */
declare interface InsertEnd {
  insertAt: "End";
  ids: ObjectsToInsert;
  [k: string]: unknown;
}
/**
 * Inserts objects before the specified object
 */
declare interface InsertBefore {
  insertAt: "Before";
  /**
   * The ID of the object to insert items before
   */
  beforeID: string;
  ids: ObjectsToInsert;
  [k: string]: unknown;
}
/**
 * Inserts objects after the specified object
 */
declare interface InsertAfter {
  insertAt: "After";
  /**
   * The ID of the object to insert items after
   */
  afterID: string;
  ids: ObjectsToInsert;
  [k: string]: unknown;
}
declare interface PlayerAreaEffect {
  target: "Player";
  /**
   * The non-skill modifier key that should be applied to the player
   */
  modifier: StandardModifierKeys;
  /**
   * The base value that the modifier should have
   */
  magnitude: number;
  [k: string]: unknown;
}
declare interface EnemyAreaEffect {
  target: "Enemy";
  /**
   * The combat modifier key that should be applied to the enemy
   */
  modifier: CombatModifierKey;
  /**
   * The base value that the modifier should have
   */
  magnitude: number;
  [k: string]: unknown;
}
declare interface PetChanceData {
  /**
   * The ID of the pet to roll for
   */
  petID?: PetID;
  /**
   * Determines the chance of the pet. Rolls at 1/weight probability.
   */
  weight?: number;
  [k: string]: unknown;
}
/**
 * A fixed cost per purchase in the shop
 */
declare interface FixedCost {
  type: "Fixed";
  /**
   * The cost per purchase. Can be set to 0 to indicate no cost.
   */
  cost: number;
  [k: string]: unknown;
}
/**
 * A linearly scaling cost per purchase in the shop
 */
declare interface LinearCost {
  type: "Linear";
  /**
   * The cost of the first purchase
   */
  initial: number;
  /**
   * The amount the cost should increase per purchase made
   */
  scaling: number;
  [k: string]: unknown;
}
/**
 * A cost that scales according the bank slot cost formula per purchase in the shop
 */
declare interface BankSlotCost {
  type: "BankSlot";
  [k: string]: unknown;
}
/**
 * A fixed cost that can be reduced if the player has read the merchant's permit
 */
declare interface GloveCost {
  type: "Glove";
  /**
   * The cost per purchase.
   */
  cost: number;
  [k: string]: unknown;
}
/**
 * Data for constructing an ItemUpgrade object
 */
declare interface ItemUpgradeData {
  /**
   * The items required to upgrade the item. Must contain the rootItemIDs
   *
   * @minItems 1
   */
  itemCosts: [AnyItemQuantity, ...AnyItemQuantity[]];
  /**
   * The GP cost to upgrade the item
   */
  gpCost: number;
  /**
   * The Slayer coin cost to upgrade the item
   */
  scCost: number;
  /**
   * The IDs of the items that should show the upgrade option in the bank
   *
   * @minItems 1
   */
  rootItemIDs: [AnyItemID, ...AnyItemID[]];
  /**
   * The ID of the item that should be produced by this upgrade
   */
  upgradedItemID: AnyItemID;
  /**
   * Determines if the item should show as a Downgrade in the bank
   */
  isDowngrade: boolean;
  [k: string]: unknown;
}
/**
 * Data for constructing an ItemSynergy object
 */
declare interface ItemSynergyData {
  /**
   * IDs of Equipment Items that must be worn together for the synergy to work. Also accepts ThrowingWeapon to specify any Javelin or Throwing Knife, and Melee2HWeapon to specify any 2-Handed Melee weapon
   *
   * @minItems 2
   * @maxItems 15
   */
  itemIDs:
    | [EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"), EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon")]
    | [
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon")
      ]
    | [
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon")
      ]
    | [
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon")
      ]
    | [
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon")
      ]
    | [
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon")
      ]
    | [
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon")
      ]
    | [
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon")
      ]
    | [
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon")
      ]
    | [
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon")
      ]
    | [
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon")
      ]
    | [
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon")
      ]
    | [
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon")
      ]
    | [
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon"),
        EquipmentItemID | ("ThrowingWeapon" | "Melee2HWeapon")
      ];
  /**
   * Optional. Modifiers provided to the player when the synergy is active
   */
  playerModifiers?: PlayerModifierData1;
  /**
   * Optional. Combat Modifiers provided to Enemies when the synergy is active
   */
  enemyModifiers?: CombatModifierData;
  /**
   * Optional. Conditional Modifiers provided when the synergy is active
   *
   * @minItems 1
   */
  conditionalModifiers?: [ConditionalModifierData, ...ConditionalModifierData[]];
  /**
   * Optional. Equipment stats provided to the player when the synergy is active
   *
   * @minItems 1
   */
  equipmentStats?: [EquipStatPair, ...EquipStatPair[]];
  [k: string]: unknown;
}
/**
 * Data for the Golbin Raid minigame
 */
declare interface GolbinRaidData {
  /**
   * Items that should not show up in Golbin Raid
   */
  bannedItems: AnyItemID[];
  /**
   * Items that should not show up in the Passive slot in Golbin Raid
   */
  bannedPassiveItems: EquipmentItemID[];
  /**
   * Items that must be found in Golbin Crates before they show up in Raid
   */
  crateItems: {
    /**
     * The ID of the item in the crate
     */
    itemID: AnyItemID;
    /**
     * The weight of the item in golbin crates. Higher value indicates more common items
     */
    weight: 35 | 20 | 10 | 4 | 1;
    [k: string]: unknown;
  }[];
  /**
   * The IDs of CombatPassives that may randomly be given to Golbins
   */
  golbinPassives: CombatPassiveID[];
  /**
   * Optional. Determines the starting weapons given. Used in conjunction with the
   */
  startingWeapons?: WeaponItemID[];
  /**
   * Optional. Sets the starting food item of the player
   */
  startingFood?: FoodItemID;
  /**
   * Optional. Sets the starting ammo of the player
   */
  startingAmmo?: {
    /**
     * The ID of the ammo item
     */
    id: EquipmentItemID;
    /**
     * The starting quantity of ammo
     */
    quantity: number;
    [k: string]: unknown;
  };
  /**
   * Optional. Sets the starting runes of the player
   *
   * @minItems 1
   */
  startingRunes?: [AnyItemQuantity, ...AnyItemQuantity[]];
  [k: string]: unknown;
}
/**
 * Data for constructing an SteamAchievement object
 */
declare interface SteamAchievementData {
  /**
   * The ID of the achievement on steam
   */
  id: string;
  /**
   * The requirements the player must meet to unlock the achievement
   */
  requirements: AnyRequirementData[];
  /**
   * Optional. The ID of the gamemode that the player must be playing to unlock the achievement. If unset the achievement can be unlocked in any gamemode
   */
  requiredGamemodeID?: GamemodeID;
  [k: string]: unknown;
}
/**
 * Data for constructing a TutorialTask object
 */
declare interface TutorialTaskData {
  /**
   * A description of what needs to be done to finish the task
   */
  description: string;
  /**
   * URI of the image to display next to the task
   */
  media: string;
  /**
   * Game event matcher that should progress the task
   */
  eventMatcher: GameEventMatcherData;
  /**
   * The number of times the event must happen to complete the task
   */
  eventCount: number;
  /**
   * Whether the quantity of items made/equipped/purchased should be counted for the eventCount
   */
  countEventQuantity: boolean;
  [k: string]: unknown;
}
/**
 * Basic data shared between all skills
 */
declare interface BaseSkillData {
  /**
   * The IDs of pets that are possible to be obtained when completing a skill action
   *
   * @minItems 1
   */
  pets?: [PetID, ...PetID[]];
  /**
   * Rare drops that may be obtained on performing an action in the skill
   *
   * @minItems 1
   */
  rareDrops?: [RareSkillDropData, ...RareSkillDropData[]];
  /**
   * Data for the skilling minibar for this skill. Has no effect for skills that don't have a minibar
   */
  minibar?: MinibarData;
  /**
   * Custom Milestones that are unlocked as the skill levels up
   *
   * @minItems 1
   */
  customMilestones?: [MilestoneData, ...MilestoneData[]];
  [k: string]: unknown;
}
declare interface RareSkillDropData {
  /**
   * The ID of the item to drop
   */
  itemID: AnyItemID;
  /**
   * Optional. The ID of an alternative item to drop if the player has the allowSignetDrops modifier.
   */
  altItemID?: AnyItemID;
  /**
   * The quantity of the item to give per drop
   */
  quantity: number;
  /**
   * Determines how the chance to obtain the drop is calculated
   */
  chance: RareSkillDropChance;
  /**
   * Requirements that the Player must meet for the item to drop
   */
  requirements: AnyRequirementData[];
  [k: string]: unknown;
}
/**
 * A Fixed chance that the item should drop
 */
declare interface FixedSkillDropChance {
  type: "Fixed";
  /**
   * The percent chance that the item should drop
   */
  chance: number;
  [k: string]: unknown;
}
declare interface ScalingChance {
  /**
   * The base percent chance that the item should drop
   */
  baseChance: number;
  /**
   * The amount the chance should increase per level
   */
  scalingFactor: number;
  /**
   * The maximum percent chance that the item should drop
   */
  maxChance: number;
  [k: string]: unknown;
}
declare interface MinibarData {
  /**
   * The IDs of equipment items that should be added to the minibar item selection when they are found for the first time
   */
  defaultItems: EquipmentItemID[];
  /**
   * The IDs of Shop purchases that should be displayed in the minibar
   */
  upgrades: ShopPurchaseID[];
  /**
   * The ID of pets that should be displayed in the minibar
   */
  pets: PetID[];
  [k: string]: unknown;
}
declare interface MilestoneLike {
  /**
   * The skill level the milestone is met at
   */
  level: number;
  /**
   * The display name of the milestone
   */
  name: string;
  /**
   * The URI of the milestones image
   */
  media: string;
  [k: string]: unknown;
}
/**
 * Defines a milestone for being able to equip an item
 */
declare interface EquipItemMilestoneData {
  type: "EquipItem";
  /**
   * The ID of the equipment item to show as a milestone
   */
  itemID: EquipmentItemID;
  [k: string]: unknown;
}
/**
 * Data for constructing a MasteryLevelUnlock object
 */
declare interface MasteryLevelUnlockData {
  /**
   * Optional. Determines the localization ID for the unlock
   */
  descriptionID?: number;
  /**
   * Displayed description for the unlock
   */
  description: string;
  /**
   * The mastery level the unlock occurs at
   */
  level: number;
  [k: string]: unknown;
}
/**
 * Data for constructing a GeneralThievingRare object
 */
declare interface GeneralThievingRareData {
  /**
   * The ID of the item that should drop
   */
  itemID: AnyItemID;
  /**
   * The percentage chance that the item can drop from an NPC
   */
  chance: number;
  /**
   * Optional. If present, this drop is limited to the NPCs with the IDs in this array
   *
   * @minItems 1
   */
  npcs?: [ThievingActionID, ...ThievingActionID[]];
  [k: string]: unknown;
}
/**
 * The data required to construct a SummoningSynergy object
 */
declare interface SummoningSynergyData {
  /**
   * The IDs of the two summoning actions that are required for the synergy
   *
   * @minItems 2
   * @maxItems 2
   */
  summonIDs: [SummoningActionID, SummoningActionID];
  /**
   * Displayed description for the synergies effect
   */
  customDescription?: string;
  /**
   * Modifiers given to the player when the synergy is active
   */
  modifiers: PlayerModifierData1;
  /**
   * Optional. Combat Modifiers given to the enemy when the synergy is active
   */
  enemyModifiers?: CombatModifierData;
  /**
   * Optional. Conditional modifiers that are active when the synergy is active
   *
   * @minItems 1
   */
  conditionalModifiers?: [ConditionalModifierData, ...ConditionalModifierData[]];
  /**
   * Game event matchers that determine when the synergy tablets should be consumed
   *
   * @minItems 1
   */
  consumesOn: [GameEventMatcherData, ...GameEventMatcherData[]];
  [k: string]: unknown;
}
/**
 * Data for constructing a AstrologyModifier object
 */
declare interface AstrologyModifierData {
  /**
   * The modifier keys and skills that are provided by this constellation modifier
   *
   * @minItems 1
   */
  modifiers: [
    (
      | {
          /**
           * A standard player modifier key
           */
          key: StandardModifierKeys;
          [k: string]: unknown;
        }
      | {
          /**
           * A skill modifier key
           */
          key: SkillModifierKeys;
          /**
           * The ID of the skill the modifier should apply to
           */
          skill: SkillID;
          [k: string]: unknown;
        }
    ),
    ...(
      | {
          /**
           * A standard player modifier key
           */
          key: StandardModifierKeys;
          [k: string]: unknown;
        }
      | {
          /**
           * A skill modifier key
           */
          key: SkillModifierKeys;
          /**
           * The ID of the skill the modifier should apply to
           */
          skill: SkillID;
          [k: string]: unknown;
        }
    )[]
  ];
  /**
   * The maximum number of times this modifier can be bought
   */
  maxCount: number;
  /**
   * The value that each modifier is increased by per times bought
   */
  incrementValue: number;
  /**
   * The quantity of stardust required to buy each level of the modifier. Must have a length of at least maxCount
   *
   * @minItems 1
   */
  costs: [number, ...number[]];
  [k: string]: unknown;
}
declare interface TownshipResourceQuantity {
  /**
   * The ID of the resource
   */
  id: TownshipResourceID;
  /**
   * The quantity of the resource
   */
  quantity: number;
  [k: string]: unknown;
}
declare interface TownshipStatPenaltyData {
  /**
   * The township stat that should be penalized
   */
  penalty: "deathRate" | "flatHappiness" | "happinessModifier";
  /**
   * The value of the penalty. Percentage for deathRate and happinessModifier. Flat value for flatHappiness.
   */
  value: number;
  /**
   * Optional. If present, the penalty requires a building to be built in this biome to be applied
   */
  biome?: TownshipBiomeID;
  /**
   * Optional. If the penalty requires a max age worker to be applied
   */
  maxAgeWorkers?: boolean;
  /**
   * Optional. If the penalties value scales with the number of citizens above the max worker age
   */
  scaleWithMaxAgeWorkers?: boolean;
  [k: string]: unknown;
}
declare interface TownshipBuildingPenaltyData {
  /**
   * The building attribute to penalize
   */
  provides: "happiness" | "education" | "resources" | "worship";
  /**
   * The percent value that the attribute should be reduced by
   */
  value: number;
  /**
   * The ID of the biome that buildings are built in that will be penalized
   */
  biome: TownshipBiomeID;
  [k: string]: unknown;
}
declare interface TownshipHealthBonus {
  /**
   * The percent bonus provided when the resource is owned and increasing
   */
  positiveIncreasing: number;
  /**
   * The percent bonus provided when the resource is owned and decreasing
   */
  positiveDecreasing: number;
  /**
   * The percent bonus provided when the resource is not owned and increasing
   */
  negativeIncreasing: number;
  /**
   * The percent bonus provided when the resource is not owned and decreasing
   */
  negativeDecreasing: number;
  [k: string]: unknown;
}
declare interface TownshipBuildingProvidesData {
  /**
   * Increased population cap provided by the building
   */
  population: number;
  /**
   * Flat happiness provided by the building
   */
  happiness: number;
  /**
   * Flat education provided by the building
   */
  education: number;
  /**
   * Resource storage cap provided by the building
   */
  storage: number;
  /**
   * Worker slots provided by the building
   */
  workers: {
    /**
     * The ID of the Township Job
     */
    id: TownshipJobID;
    /**
     * The number of jobs provided
     */
    quantity: number;
    [k: string]: unknown;
  }[];
  /**
   * Resource production provided by the building
   */
  resources: TownshipResourceQuantity[];
  /**
   * Optional. Dead storage provided by the building
   */
  deadStorage?: number;
  /**
   * Optional. Flat worship provided by the building
   */
  worship?: number;
  [k: string]: unknown;
}
/**
 * The requirements for completing the task
 */
declare interface TownshipTaskGoalsData {
  /**
   * Items that must be handed in to complete the task
   */
  items: AnyItemQuantity[];
  /**
   * Monsters that must be killed to complete the task
   */
  monsters: {
    /**
     * The ID of the monster that must be killed
     */
    id: MonsterID;
    /**
     * The number of times the mosnter must be killed
     */
    quantity: number;
    [k: string]: unknown;
  }[];
  /**
   * Skill XP that must be earned to complete the task
   */
  skillXP: {
    /**
     * The ID of the skill that must earn XP
     */
    id: SkillID;
    /**
     * The amount of skill XP that must be earned
     */
    quantity: number;
    [k: string]: unknown;
  }[];
  /**
   * Township Buildings that must be actively built to complete the task
   */
  buildings: {
    /**
     * The id of the building that must be built
     */
    id: TownshipBuildingID;
    /**
     * The number of buildings that must be built
     */
    quantity: number;
    [k: string]: unknown;
  }[];
  [k: string]: unknown;
}
/**
 * The rewards given for completing the taks
 */
declare interface TownshipTaskRewardsData {
  /**
   * GP awarded upon completion of the task
   */
  gp: number;
  /**
   * Slayer coins awarded upon completion of the task
   */
  slayerCoins: number;
  /**
   * Items awarded upon completion of the task
   */
  items: AnyItemQuantity[];
  /**
   * Skill experience awarded upon completion of the task
   */
  skillXP: {
    /**
     * The ID of the skill to grant XP
     */
    id: SkillID;
    /**
     * The amount of skill XP rewarded
     */
    quantity: number;
    [k: string]: unknown;
  }[];
  /**
   * Township resources awarded upon completion of the task
   */
  townshipResources: TownshipResourceQuantity[];
  [k: string]: unknown;
}
declare interface PageSideBarItemOptions {
  /**
   * The ID of the sidebar category to add the item to
   */
  categoryID: string;
  rootClass?: string;
  itemClass?: string;
  icon?: string;
  iconClass?: string;
  nameClass?: string;
  aside?: string;
  asideClass?: string;
  ignoreToggle?: boolean;
  before?: string;
  after?: string;
  [k: string]: unknown;
}
declare interface PageSideBarSubItemOptions {
  /**
   * The ID of the sidebar category which contains the item to add the subItem to
   */
  categoryID: string;
  /**
   * The Id of the sidebar item to add the subItem to
   */
  itemID: string;
  rootClass?: string;
  subitemClass?: string;
  name?: string;
  nameClass?: string;
  aside?: string;
  asideClass?: string;
  before?: string;
  after?: string;
  [k: string]: unknown;
}
/**
 * Contains the data used to modify existing game objects
 */
declare interface GameDataModifications {
  [k: string]: unknown;
}
